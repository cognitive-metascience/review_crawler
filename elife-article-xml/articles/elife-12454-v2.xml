<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1d3 20150301//EN"  "JATS-archivearticle1.dtd"><article article-type="research-article" dtd-version="1.1d3" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><front><journal-meta><journal-id journal-id-type="nlm-ta">elife</journal-id><journal-id journal-id-type="hwp">eLife</journal-id><journal-id journal-id-type="publisher-id">eLife</journal-id><journal-title-group><journal-title>eLife</journal-title></journal-title-group><issn pub-type="epub" publication-format="electronic">2050-084X</issn><publisher><publisher-name>eLife Sciences Publications, Ltd</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">12454</article-id><article-id pub-id-type="doi">10.7554/eLife.12454</article-id><article-categories><subj-group subj-group-type="display-channel"><subject>Research Article</subject></subj-group><subj-group subj-group-type="heading"><subject>Neuroscience</subject></subj-group></article-categories><title-group><article-title>Optimal compensation for neuron loss</article-title></title-group><contrib-group><contrib contrib-type="author" id="author-45531"><name><surname>Barrett</surname><given-names>David GT</given-names></name><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="aff" rid="aff2">2</xref><xref ref-type="fn" rid="con1"/><xref ref-type="fn" rid="conf1"/><xref ref-type="fn" rid="pa1">†</xref></contrib><contrib contrib-type="author" id="author-76665"><name><surname>Denève</surname><given-names>Sophie</given-names></name><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="other" rid="par-1"/><xref ref-type="other" rid="par-2"/><xref ref-type="other" rid="par-3"/><xref ref-type="other" rid="par-4"/><xref ref-type="fn" rid="con2"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" corresp="yes" id="author-41002"><name><surname>Machens</surname><given-names>Christian K</given-names></name><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1717-1562</contrib-id><xref ref-type="aff" rid="aff2">2</xref><xref ref-type="corresp" rid="cor1">*</xref><xref ref-type="other" rid="par-5"/><xref ref-type="other" rid="par-6"/><xref ref-type="fn" rid="con3"/><xref ref-type="fn" rid="conf1"/></contrib><aff id="aff1"><label>1</label><institution content-type="dept">Laboratoire de Neurosciences Cognitives</institution>, <institution>École Normale Supérieure</institution>, <addr-line><named-content content-type="city">Paris</named-content></addr-line>, <country>France</country></aff><aff id="aff2"><label>2</label><institution content-type="dept">Champalimaud Neuroscience Programme</institution>, <institution>Champalimaud Centre for the Unknown</institution>, <addr-line><named-content content-type="city">Lisbon</named-content></addr-line>, <country>Portugal</country></aff></contrib-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Skinner</surname><given-names>Frances K</given-names></name><role>Reviewing editor</role><aff id="aff3"><institution>University Health Network</institution>, <country>Canada</country></aff></contrib></contrib-group><author-notes><corresp id="cor1"><email>christian.machens@neuro.fchampalimaud.org</email></corresp><fn fn-type="present-address" id="pa1"><label>†</label><p>DeepMind, London, United Kingdom</p></fn></author-notes><pub-date date-type="pub" publication-format="electronic"><day>09</day><month>12</month><year>2016</year></pub-date><pub-date pub-type="collection"><year>2016</year></pub-date><volume>5</volume><elocation-id>e12454</elocation-id><history><date date-type="received"><day>20</day><month>10</month><year>2015</year></date><date date-type="accepted"><day>08</day><month>12</month><year>2016</year></date></history><permissions><copyright-statement>© 2016, Barrett et al</copyright-statement><copyright-year>2016</copyright-year><copyright-holder>Barrett et al</copyright-holder><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="elife-12454-v2.pdf"/><abstract><object-id pub-id-type="doi">10.7554/eLife.12454.001</object-id><p>The brain has an impressive ability to withstand neural damage. Diseases that kill neurons can go unnoticed for years, and incomplete brain lesions or silencing of neurons often fail to produce any behavioral effect. How does the brain compensate for such damage, and what are the limits of this compensation? We propose that neural circuits instantly compensate for neuron loss, thereby preserving their function as much as possible. We show that this compensation can explain changes in tuning curves induced by neuron silencing across a variety of systems, including the primary visual cortex. We find that compensatory mechanisms can be implemented through the dynamics of networks with a tight balance of excitation and inhibition, without requiring synaptic plasticity. The limits of this compensatory mechanism are reached when excitation and inhibition become unbalanced, thereby demarcating a recovery boundary, where signal representation fails and where diseases may become symptomatic.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.001">http://dx.doi.org/10.7554/eLife.12454.001</ext-link></p></abstract><kwd-group kwd-group-type="author-keywords"><title>Author Keywords</title><kwd>balanced networks</kwd><kwd>efficient coding</kwd><kwd>visual cortex</kwd><kwd>neuron death</kwd><kwd>oculomotor</kwd><kwd>cercal system</kwd></kwd-group><kwd-group kwd-group-type="research-organism"><title>Research Organism</title><kwd>None</kwd></kwd-group><funding-group><award-group id="par-1"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100001659</institution-id><institution>Deutsche Forschungsgemeinschaft</institution></institution-wrap></funding-source><award-id>Emmy-Noether</award-id><principal-award-recipient><name><surname>Machens</surname><given-names>Christian K</given-names></name></principal-award-recipient></award-group><award-group id="par-2"><funding-source><institution-wrap><institution>Agence Nationale de Recherche</institution></institution-wrap></funding-source><award-id>Chaire d'Excellence</award-id><principal-award-recipient><name><surname>Machens</surname><given-names>Christian K</given-names></name></principal-award-recipient></award-group><award-group id="par-3"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000913</institution-id><institution>James S. McDonnell Foundation</institution></institution-wrap></funding-source><principal-award-recipient><name><surname>Denève</surname><given-names>Sophie</given-names></name></principal-award-recipient></award-group><award-group id="par-4"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000781</institution-id><institution>European Research Council</institution></institution-wrap></funding-source><award-id>ERC FP7-PREDSPIKE</award-id><principal-award-recipient><name><surname>Denève</surname><given-names>Sophie</given-names></name></principal-award-recipient></award-group><award-group id="par-5"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000781</institution-id><institution>European Research Council</institution></institution-wrap></funding-source><award-id>BIND MECT-CT-20095-024831</award-id><principal-award-recipient><name><surname>Denève</surname><given-names>Sophie</given-names></name></principal-award-recipient></award-group><award-group id="par-6"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000781</institution-id><institution>European Research Council</institution></institution-wrap></funding-source><award-id>BACS 796 FP6-IST-027140</award-id><principal-award-recipient><name><surname>Denève</surname><given-names>Sophie</given-names></name></principal-award-recipient></award-group><funding-statement>The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.</funding-statement></funding-group><custom-meta-group><custom-meta><meta-name>elife-xml-version</meta-name><meta-value>2.5</meta-value></custom-meta><custom-meta specific-use="meta-only"><meta-name>Author impact statement</meta-name><meta-value>Spiking networks compensate the loss of neurons instantaneously, when restoration of excitatory/inhibitory balance becomes equivalent to restoration of functionality.</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="s1" sec-type="intro"><title>Introduction</title><p>The impact of neuron loss on information processing is poorly understood (<xref ref-type="bibr" rid="bib52">Palop et al., 2006</xref>; <xref ref-type="bibr" rid="bib49">Montague et al., 2012</xref>). Chronic diseases such as Alzheimer’s disease cause a considerable decline in neuron numbers (<xref ref-type="bibr" rid="bib50">Morrison and Hof, 1997</xref>), yet can go unnoticed for years. Acute events such as a stroke and traumatic brain injury can kill large numbers of cells rapidly, yet the vast majority of strokes are ‘silent’ (<xref ref-type="bibr" rid="bib41">Leary and Saver, 2003</xref>). Similarly, the partial lesion or silencing of a targeted brain area may ‘fail’ to produce any measurable, behavioral effect (<xref ref-type="bibr" rid="bib43">Li et al., 2016</xref>). This resilience of neural systems to damage is especially impressive when compared to man-made computer systems that typically lose all function following only minor destruction of their circuits. A thorough understanding of the interplay between neural damage and information processing is therefore crucial for our understanding of the nervous system, and may also help in the interpretation of various experimental manipulations such as pharmacological silencing (<xref ref-type="bibr" rid="bib3">Aksay et al., 2007</xref>; <xref ref-type="bibr" rid="bib17">Crook and Eysel, 1992</xref>), lesion studies (<xref ref-type="bibr" rid="bib37">Keck et al., 2008</xref>), and optogenetic perturbations (<xref ref-type="bibr" rid="bib25">Fenno et al., 2011</xref>).</p><p>In contrast to the study of information representation in damaged brains, there has been substantial progress in our understanding of information representation in healthy brains (<xref ref-type="bibr" rid="bib1">Abbott, 2008</xref>). In particular, the theory of efficient coding, which states that neural circuits represent sensory signals optimally given various constraints (<xref ref-type="bibr" rid="bib6">Barlow, 1961</xref>; <xref ref-type="bibr" rid="bib5">Atick, 1992</xref>; <xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>; <xref ref-type="bibr" rid="bib55">Rieke et al., 1997</xref>; <xref ref-type="bibr" rid="bib59">Simoncelli and Olshausen, 2001</xref>; <xref ref-type="bibr" rid="bib57">Salinas, 2006</xref>), has successfully accounted for a broad range of observations in a variety of sensory systems, in both vertebrates (<xref ref-type="bibr" rid="bib59">Simoncelli and Olshausen, 2001</xref>; <xref ref-type="bibr" rid="bib5">Atick, 1992</xref>; <xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>; <xref ref-type="bibr" rid="bib60">Smith and Lewicki, 2006</xref>; <xref ref-type="bibr" rid="bib28">Greene et al., 2009</xref>) and invertebrates (<xref ref-type="bibr" rid="bib55">Rieke et al., 1997</xref>; <xref ref-type="bibr" rid="bib24">Fairhall et al., 2001</xref>; <xref ref-type="bibr" rid="bib47">Machens et al., 2005</xref>). However, an efficient representation of information is of little use if it cannot withstand some perturbations, such as normal cell loss. Plausible mechanistic models of neural computation should be able to withstand the type of perturbations that the brain can withstand.</p><p>In this work, we propose that neural systems maintain stable signal representations by optimally compensating for the loss of neurons. We show that this compensation does not require synaptic plasticity, but can be implemented instantaneously by a tightly balanced network whose dynamics and connectivity are tuned to implement efficient coding (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>; <xref ref-type="bibr" rid="bib22">Denève and Machens, 2016</xref>). When too many cells disappear, the balance between excitation and inhibition is disrupted, and the signal representation is lost. We predict how much cell loss can be tolerated by a neural system and how tuning curves change shape following optimal compensation. We illustrate these predictions using three specific neural systems for which experimental data before and after silencing are available – the oculomotor integrator in the hindbrain (<xref ref-type="bibr" rid="bib2">Aksay et al., 2000</xref>, <xref ref-type="bibr" rid="bib3">2007</xref>), the cricket cercal system (<xref ref-type="bibr" rid="bib61">Theunissen and Miller, 1991</xref>; <xref ref-type="bibr" rid="bib48">Mizrahi and Libersat, 1997</xref>), and the primary visual cortex (<xref ref-type="bibr" rid="bib36">Hubel and Wiesel, 1962</xref>; <xref ref-type="bibr" rid="bib17">Crook and Eysel, 1992</xref>; <xref ref-type="bibr" rid="bib18">Crook et al., 1996</xref>, <xref ref-type="bibr" rid="bib19">1997</xref>, <xref ref-type="bibr" rid="bib20">1998</xref>). In addition, we show that many input/output non-linearities in the tuning of neurons can be re-interpreted to be the result of compensation mechanisms within neural circuits. Therefore, beyond dealing with neuronal loss, the proposed optimal compensation principle expands the theory of efficient coding and provides important insights and constraints for neural population codes.</p></sec><sec id="s2" sec-type="results"><title>Results</title><sec id="s2-1"><title>The impact of neuron loss on neural representations</title><p>We begin by studying how neuron loss can influence neural representations. We assume that information is represented within neural systems such that it can be read out or decoded by a downstream area through a linear combination of neural firing rates. More specifically, we imagine a system of <inline-formula><mml:math id="inf1"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula> neurons that represents a set of signals <inline-formula><mml:math id="inf2"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mrow><mml:mo>…</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>M</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. These signals may be time-dependent sensory signals such as visual images or sounds, for instance, or, more generally, they may be the result of some computation from within a neural circuit. We assume that these signals can be read out from a weighted summation of the neurons’ instantaneous firing rates, <inline-formula><mml:math id="inf3"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>, such that<disp-formula id="equ1"><label>(1)</label><mml:math id="m1"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:munderover><mml:msub><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf4"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> is the signal estimate and <inline-formula><mml:math id="inf5"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> is a <inline-formula><mml:math id="inf6"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula>-dimensional vector of decoding weights that determines how the firing of the <inline-formula><mml:math id="inf7"><mml:mi>i</mml:mi></mml:math></inline-formula>-th neuron contributes to the readout. Such linear readouts are used in many contexts and broadly capture the integrative nature of dendritic summation.</p><p>What happens to such a readout if one of the neurons is suddenly taken out of the circuit? A specific example is illustrated in <xref ref-type="fig" rid="fig1">Figure 1A</xref>. Here the neural system consists of only two neurons that represent a single, scalar signal, <inline-formula><mml:math id="inf8"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>x</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, in the sum of their instantaneous firing rates, <inline-formula><mml:math id="inf9"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. If initially both neurons fired at 150 Hz, yielding a signal estimate <inline-formula><mml:math id="inf10"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mn>300</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>, then the sudden loss of one neuron will immediately degrade the signal estimate to <inline-formula><mml:math id="inf11"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mn>150</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>. More generally, in the absence of any corrective action, the signal estimate will be half the size it used to be.<fig id="fig1" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.002</object-id><label>Figure 1.</label><caption><title>Optimal representation and optimal compensation in a two-neuron example.</title><p>(<bold>A</bold>) A signal <inline-formula><mml:math id="inf12"><mml:mi>x</mml:mi></mml:math></inline-formula> can be represented using many different firing rate combinations (dashed line). Before cell loss, the combination that best shares the load between the neurons, requires that both cells are equally active (black circle). After the loss of neuron 1, the signal must be represented entirely by the remaining neuron, and so, its firing rate must double (red circle). We will refer to this change in firing rate as an optimal compensation for the lost neuron. (<bold>B</bold>) This optimal compensation can be implemented in a network of neurons that are coupled by mutual inhibition and driven by an excitatory input signal. When neuron 1 is knocked out, the inhibition disappears, allowing the firing rate of neuron 2 to increase. (<bold>C</bold>) Two spiking neurons, connected together as in B, represent a signal <inline-formula><mml:math id="inf13"><mml:mi>x</mml:mi></mml:math></inline-formula> (black line, top panel) by producing appropriate spike trains and voltage traces, <inline-formula><mml:math id="inf14"><mml:msub><mml:mi>V</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inline-formula> and <inline-formula><mml:math id="inf15"><mml:msub><mml:mi>V</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></inline-formula> (lower panels). To read out the original signal, the spikes are replaced by decaying exponentials (a simple model of postsynaptic potentials), and summed to produce a readout, <inline-formula><mml:math id="inf16"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> (blue, top panel). After the loss of neuron 1 (red arrow), neuron 2 compensates by firing twice as many spikes.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.002">http://dx.doi.org/10.7554/eLife.12454.002</ext-link></p></caption><graphic mime-subtype="postscript" mimetype="application" xlink:href="elife-12454-fig1-v2"/></fig></p><p>There are two solutions to this problem. First, a downstream or read-out area could recover the correct signal estimate by doubling its decoder weight for the remaining neuron. In this scenario, the two-neuron circuit would remain oblivious to the loss of a neuron, and the burden of adjustment would be borne by downstream areas. Second, the firing rate of the remaining neuron could double, so that a downstream area would still obtain the correct signal estimate. In this scenario, the two-neuron circuit would correct the problem itself, and downstream areas would remain unaffected. While actual neural systems may make use of both possibilities, here we will study the second solution, and show that it has crucial advantages.</p></sec><sec id="s2-2"><title>The principle of optimal compensation</title><p>To quantify the ability of a system to compensate for neuron loss, we will assume that the representation performance can be measured with a simple cost-benefit trade-off. We formalize this trade-off in a loss function,<disp-formula id="equ2"><label>(2)</label><mml:math id="m2"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>E</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo mathvariant="bold">−</mml:mo><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo mathvariant="bold" stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Here, the first term quantifies the signal representation error—the smaller the difference between the readout, <inline-formula><mml:math id="inf17"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, and the actual signals, <inline-formula><mml:math id="inf18"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula>, the smaller the representation error. The second term quantifies the cost of the representation and is problem-specific and system-specific. Generally, we assume that the costs are small if the signal representation (1) is shared amongst all neurons and (2) uses as few spikes as possible. The parameter <inline-formula><mml:math id="inf19"><mml:mi>β</mml:mi></mml:math></inline-formula> determines the trade-off between this cost and the representation error. Quadratic loss functions such as <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> have been a mainstay of efficient coding theories for many years, for example, in stimulus reconstruction (<xref ref-type="bibr" rid="bib55">Rieke et al., 1997</xref>) and in sparse coding (<xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>).</p><p>The minimum of our loss function indicates the set of firing rates that represent a given signal optimally. In the two-neuron example in <xref ref-type="fig" rid="fig1">Figure 1A</xref>, the initial minimum is reached if both neurons fire equally strong (assuming a cost of <inline-formula><mml:math id="inf20"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>C</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:mrow></mml:mstyle></mml:math></inline-formula>). If we kill neuron 1, then we can minimize the loss function under the constraint that <inline-formula><mml:math id="inf21"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula>, and the minimum is now reached if neuron 2 doubles its firing rates (assuming a small trade-off parameter <inline-formula><mml:math id="inf22"><mml:mi>β</mml:mi></mml:math></inline-formula>). The induced change in the firing rate of neuron 2 preserves the signal representation, and therefore compensates for the loss of neuron 1. More generally, if the firing rates of a neural system represent a given signal optimally with respect to some loss function, then we define 'optimal compensation' as the change in firing rates necessary to remain at the minimum of that loss function.</p><p>Clearly, a system’s ability to compensate for a lost neuron relies on some redundancy in the representation. If there are more neurons than signals, then different combinations of firing rates may represent the same signal (see <xref ref-type="fig" rid="fig1">Figure 1A</xref>, dashed line, for the two-neuron example). Up to a certain point (which we will study below), a neural system can always restore signal representation by adjusting its firing rates.</p></sec><sec id="s2-3"><title>Optimal compensation through instantaneous restoration of balance</title><p>Next, we investigate how this compensation can be implemented in a neural circuit. One possibility is that a circuit rewires through internal plasticity mechanisms in order to correct for the effect of the lost neurons. However, we find that plasticity is not necessary. Rather, neural networks can be wired up such that the dynamics of their firing rates rapidly evolves into the minimum of the loss function, <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> (<xref ref-type="bibr" rid="bib31">Hopfield, 1984</xref>; <xref ref-type="bibr" rid="bib21">Dayan and Abbott, 2001</xref>; <xref ref-type="bibr" rid="bib56">Rozell et al., 2008</xref>). Such dynamics can be formulated not just for rate networks, but also for networks of integrate-and-fire neurons (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>). The step towards spiking neurons will lead us to two crucial insights. First, we will link the optimal compensation principle to the balance of excitation and inhibition. Second, unlike networks of idealized rate units, networks of spiking neurons can only generate positive firing rates. We will show that this constraint alters the nature of compensation in non-trivial ways.</p><p>In order to move towards spiking networks, we assume that the instantaneous firing rates, <inline-formula><mml:math id="inf23"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, are equivalent to filtered spike trains, similar to the postsynaptic filtering of actual spike trains (see Materials and methods for details). Specifically, a spike fired by neuron <inline-formula><mml:math id="inf24"><mml:mi>i</mml:mi></mml:math></inline-formula> contributes a discrete unit to its instantaneous firing rate, <inline-formula><mml:math id="inf25"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>→</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mrow></mml:math></inline-formula>, followed by an exponential decay. Next, we assume that each neuron will only fire a spike if the resulting change in the instantaneous firing rate reduces the loss function (<xref ref-type="disp-formula" rid="equ2">Equation 2</xref>). From these two assumptions, the dynamics and connectivity of the network can be derived (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>; <xref ref-type="bibr" rid="bib12">Bourdoukan et al., 2012</xref>; <xref ref-type="bibr" rid="bib7">Barrett et al., 2013</xref>). Even though neurons in these networks are ordinary integrate-and-fire neurons, the voltage of each neuron acquires an important functional interpretation, as it represents a transformation of the signal representation error, <inline-formula><mml:math id="inf26"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> (see Materials and methods).</p><p>If we apply this formalism to the two-neuron example in <xref ref-type="fig" rid="fig1">Figure 1</xref>, we obtain a network with two integrate-and-fire neurons driven by an excitatory input signal and coupled by mutual inhibition (<xref ref-type="fig" rid="fig1">Figure 1B</xref>). If we neglect the cost term, then the neuron’s (subthreshold) voltages directly reflect the difference between the scalar input signal, <inline-formula><mml:math id="inf27"><mml:mrow><mml:mi>x</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM23">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, and its linear readout, <inline-formula><mml:math id="inf28"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, so that <inline-formula><mml:math id="inf29"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>D</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>x</mml:mi><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> for <inline-formula><mml:math id="inf30"><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:mn id="XM26">1</mml:mn><mml:mo>,</mml:mo><mml:mn id="XM27">2</mml:mn><mml:mo>}</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> (<xref ref-type="fig" rid="fig1">Figure 1C</xref>). Initially, the excitatory input signal depolarizes the voltages of both neurons, which reflects an increase in the signal representation error. The neuron that reaches threshold first produces a spike and corrects the signal readout, <inline-formula><mml:math id="inf31"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. In turn, the errors or voltages in both neurons are reset, due to the self-reset of the spiking neuron, and due to fast inhibition of the other neuron. This procedure repeats, so that both neurons work together, and take turns at producing spikes (<xref ref-type="fig" rid="fig1">Figure 1C</xref>). Now, when one neuron dies (<xref ref-type="fig" rid="fig1">Figure 1C</xref>, red arrow), the remaining neuron no longer receives inhibition from its partner neuron and it becomes much more strongly excited, spiking twice as often.</p><p>These ideas can be scaled up to larger networks of excitatory and inhibitory neurons, as illustrated in <xref ref-type="fig" rid="fig2">Figure 2</xref>. Here a homogeneous population of excitatory neurons, again modeled as leaky integrate-and-fire neurons (<xref ref-type="fig" rid="fig2">Figure 2A</xref>), is driven by a time-varying input signal, <inline-formula><mml:math id="inf32"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>x</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. Just as in the simplified two-neuron example, the excitatory neurons take turns at generating spikes, such that the linear readout of their spike trains, <xref ref-type="disp-formula" rid="equ1">Equation 1</xref>, yields an estimate <inline-formula><mml:math id="inf33"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> that minimizes the loss function from <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> (<xref ref-type="fig" rid="fig2">Figure 2D</xref>).<fig id="fig2" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.003</object-id><label>Figure 2.</label><caption><title>Optimal compensation in a larger spiking network with separate excitatory (<bold>E</bold>) and inhibitory (<bold>I</bold>) populations (<inline-formula><mml:math id="inf34"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>80</mml:mn></mml:mrow></mml:math></inline-formula> excitatory and <inline-formula><mml:math id="inf35"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>20</mml:mn></mml:mrow></mml:math></inline-formula> inhibitory neurons) (<bold>A</bold>) Schematic of network representing a scalar signal <inline-formula><mml:math id="inf36"><mml:mrow><mml:mi>x</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM329">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>.</title><p>The excitatory neurons receive an excitatory feedforward input, that reflects the input signal, <inline-formula><mml:math id="inf37"><mml:mrow><mml:mi>x</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM330">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, and a recurrent inhibitory input, that reflects the signal estimate, <inline-formula><mml:math id="inf38"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>. The signal estimate stems from the excitatory population and is simply re-routed through the inhibitory population. In turn, the voltages of the excitatory neurons are given by a transformation of the signal representation error, <inline-formula><mml:math id="inf39"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>, assuming that <inline-formula><mml:math id="inf40"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>β</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>. Since a neuron’s voltage is bounded from above by the threshold, all excesses in signal representation errors are eliminated by spiking, and the signal estimate remains close to the signal, especially if the input signals are large compared to the threshold. Mechanistically, excitatory inputs here generate signal representation errors, and inhibitory inputs eliminate them. The prompt resolution of all errors is therefore identical to a precise balance of excitation and inhibition. (<bold>B</bold>) Schematic of a network with 75% of the excitatory neurons knocked out. (<bold>C</bold>) Schematic of a network with 75% of the inhibitory neurons knocked out also. (<bold>D</bold>) The network provides an accurate representation <inline-formula><mml:math id="inf41"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> (blue line) of the time-varying signal <inline-formula><mml:math id="inf42"><mml:mrow><mml:mi>x</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM336">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> (black line). Whether part of the excitatory population is knocked out or part of the inhibitory population is knocked out, the representation remains intact, even though the readout weights do not change. (<bold>E</bold>) A raster plot of the spiking activity in the inhibitory and excitatory populations. In both populations, spike trains are quite irregular. Red crosses mark the portion of neurons that are knocked out. Whenever neurons are knocked out, the remaining neurons change their firing rates instantaneously and restore the signal representation. (<bold>F</bold>) Voltage of an example neuron (marked with green dots in <bold>E</bold>) with threshold <inline-formula><mml:math id="inf43"><mml:mi>T</mml:mi></mml:math></inline-formula> and reset potential <inline-formula><mml:math id="inf44"><mml:mi>R</mml:mi></mml:math></inline-formula>. (<bold>G</bold>) The total excitatory (light green) and inhibitory (dark green) input currents to this example neuron are balanced, and the remaining fluctuations (inset) produce the membrane potential shown in <bold>F</bold>. This balance is maintained after the partial knock-outs in the E and I populations.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.003">http://dx.doi.org/10.7554/eLife.12454.003</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig2-v2"/></fig></p><p>Mechanistically, the excitatory population receives an excitatory input signal, <inline-formula><mml:math id="inf45"><mml:mrow><mml:mi>x</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM31">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, that is matched by an equally strong inhibitory input. This inhibitory input is generated by a separate population of inhibitory interneurons, and is effectively equivalent to the (re-routed) signal estimate, <inline-formula><mml:math id="inf46"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. As a result, the (subthreshold) voltage of each excitatory neuron is once again determined by the signal representation error, <inline-formula><mml:math id="inf47"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>x</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, and a neuron will only fire when this error exceeds its (voltage) threshold. By design, each spike improves the signal estimate, and decreases the voltages. The spike rasters of both populations are shown in <xref ref-type="fig" rid="fig2">Figure 2E</xref>.</p><p>Since the signals are excitatory and the signal estimates are inhibitory, the tight tracking of the signal by the signal estimate corresponds to a tight tracking of excitation by inhibition. The network is therefore an example of a balanced network in which inhibition and excitation track each other spike by spike (<xref ref-type="bibr" rid="bib22">Denève and Machens, 2016</xref>). Importantly, the excitatory-inhibitory (EI) balance is a direct correlate of the signal representation accuracy (see Materials and methods for mathematical details).</p><p>Now, when some portion of the excitatory neural population is eliminated (<xref ref-type="fig" rid="fig2">Figure 2B</xref>), the inhibitory neurons receive less excitation, and in turn convey less inhibition to the remaining excitatory neurons. Consequently, the excitatory neurons increase their firing rates, and the levels of inhibition (or excitation) readjust automatically such that EI balance is restored (see <xref ref-type="fig" rid="fig2">Figure 2G</xref> for an example neuron). The restoration of balance guarantees that the signals continue to be represented accurately (<xref ref-type="fig" rid="fig2">Figure 2D</xref>). This compensation happens because each excitatory neuron seeks to keep the signal representation error in check, with or without the help of the other excitatory neurons. When one neuron dies, the remaining excitatory neurons automatically and rapidly assume the full burden of signal representation.</p><p>Similar principles hold when part of the inhibitory population is knocked out (<xref ref-type="fig" rid="fig2">Figure 2C</xref>). The inhibitory population here is constructed to faithfully represent its ‘input signals’, which are given by the postsynaptically filtered spike trains of the excitatory neurons. Consequently, the inhibitory population acts similarly to the excitatory population, and its response to neuron loss is almost identical. When inhibitory neurons are knocked out, the remaining inhibitory neurons increase their firing rates in order to restore the EI balance. Again, the compensation happens because each inhibitory neuron seeks to keep its signal representation error in check, independent of the other inhibitory neurons.</p></sec><sec id="s2-4"><title>The recovery boundary</title><p>Naturally, the recovery from neural loss is not unlimited. As we will show now, the resultant <italic>recovery boundary</italic> is marked by a breakdown in the balance of excitation and inhibition. In <xref ref-type="fig" rid="fig2">Figure 2</xref>, this recovery boundary coincides with a complete knock-out of either the excitatory or the inhibitory population. The nature of the recovery boundary becomes more complex, however, if a network tracks more than one signal.</p><p>In <xref ref-type="fig" rid="fig3">Figure 3</xref> we show an example network that represents two sinusoidal signals, <inline-formula><mml:math id="inf48"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. The spikes of each neuron contribute to two readouts, and the decoding weights <inline-formula><mml:math id="inf49"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> of the neurons correspond to two-dimensional vectors (<xref ref-type="fig" rid="fig3">Figure 3D</xref>). The two signals and the corresponding signal estimates are shown in <xref ref-type="fig" rid="fig3">Figure 3E</xref>, and the spike trains of the excitatory population are shown in <xref ref-type="fig" rid="fig3">Figure 3F</xref>. (Here and in the following, we will focus on neuron loss in the excitatory population only, and replace the inhibitory population by direct inhibitory connections between excitatory neurons, see <xref ref-type="fig" rid="fig3">Figure 3A–C</xref>. This simplification does not affect the compensatory properties of the network, see Materials and methods.)<fig id="fig3" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.004</object-id><label>Figure 3.</label><caption><title>Optimal compensation and recovery boundary in a network with <inline-formula><mml:math id="inf50"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>32</mml:mn></mml:mrow></mml:math></inline-formula> excitatory neurons representing a two-dimensional signal <inline-formula><mml:math id="inf51"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM337">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM340"><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM338">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>,</mml:mo><mml:mrow id="XM341"><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM339">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>.</title><p>(A–C) Schematic of network and knock-out schedule. (Inhibitory neurons not explicitly modeled for simplicity, see text.) (<bold>B</bold>) Neural knock-out that leads to optimal compensation. (<bold>C</bold>) Neural knock-out that pushes the system beyond the recovery boundary. (<bold>D</bold>) Readout or decoding weights of the neurons. Since the signal is two-dimensional, each neuron contributes to the readout with two decoding weights, shown here as black dots. Red crosses in the central and right panel indicate neurons that are knocked out at the respective time. (<bold>E</bold>) Signals and readouts. In this example, the two signals (black lines) consist of a sine and cosine. The network provides an accurate representation (blue lines) of the signals, even after 25% of the neurons have been knocked out (first dashed red line). When 50% of the neurons are knocked out (second dashed red line), the representation of the first signal fails temporarily (red arrow). (<bold>F</bold>) A raster plot of the spiking activity of all neurons. Neurons take turns in participating in the representation of the two signals (which trace out a circle in two dimensions), and individual spike trains are quite irregular. Red crosses mark the portion of neurons that are knocked out. Colored neurons (green, yellow, and purple dots) correspond to the neurons with the decoder weights shown in panel D. Note that the green and purple neurons undergo dramatic changes in firing rate after the first and second knock-outs, respectively, which reflects their attempts to restore the signal representation. (<bold>G</bold>) Voltages of the three example neurons (marked with green, yellow, and purple dots in D and F), with threshold <inline-formula><mml:math id="inf52"><mml:mi>T</mml:mi></mml:math></inline-formula> and reset potential <inline-formula><mml:math id="inf53"><mml:mi>R</mml:mi></mml:math></inline-formula>. (<bold>H</bold>) Ratio of positive (E; excitation) and negative (I+R; inhibition and reset) currents in the three example neurons. After the first knock-out, the ratio remains around one, and the system remains balanced despite the loss of neurons. After the second knock-out, part of the signal can no longer be represented, and balance in the example neurons is (temporarily) lost. (<bold>I</bold>) Ratio of excitatory and inhibitory currents. Similar to H, except that a neuron’s self-reset current is not included. (<bold>J</bold>) When neurons are knocked out at random, the network can withstand much larger percentages of cell loss. Individual grey traces show ten different, random knock-out schemes, and the black trace shows the average. (<bold>K</bold>) When neurons saturate, the overall ability of the network to compensate for neuron loss decreases.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.004">http://dx.doi.org/10.7554/eLife.12454.004</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig3-v2"/></fig></p><p>When part of the excitatory population is lost (<xref ref-type="fig" rid="fig3">Figure 3B,D</xref>), the remaining neurons compensate by adjusting their firing rates, and the signal representation remains intact (<xref ref-type="fig" rid="fig3">Figure 3E,F</xref>, first k.o.). However, when too many cells are eliminated from the network (<xref ref-type="fig" rid="fig3">Figure 3C,D</xref>), some portions of the signal can no longer be represented, no matter how the remaining neurons change their firing rates (<xref ref-type="fig" rid="fig3">Figure 3E,F</xref>, second k.o.). In this example, the recovery boundary occurs when all the neurons with negative-valued readout weights along the <inline-formula><mml:math id="inf54"><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inline-formula>-axis have been lost, so that the network can no longer represent the negative component of the first signal (<xref ref-type="fig" rid="fig3">Figure 3E</xref>, second k.o.). The representation of signal <inline-formula><mml:math id="inf55"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM40">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> is largely unaffected, so the deficits are only partial.</p><p>The recovery boundary is characterized by the network’s inability to correct signal representation errors. Since the neurons’ voltages correspond to transformations of these signal representation errors, the recovery boundary occurs when some of these voltages run out of bounds (<xref ref-type="fig" rid="fig3">Figure 3G</xref>, arrows). Such aberrations of the voltages are caused by an excess of either positive or negative currents. Indeed, the ratio of positive to negative currents becomes disrupted after the second k.o., precisely when <inline-formula><mml:math id="inf56"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM41">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> becomes negative (<xref ref-type="fig" rid="fig3">Figure 3H</xref>). Whereas a neuron can always ‘eliminate’ a positive, depolarizing current by spiking, it cannot eliminate any negative, hyperpolarizing currents, and these latter currents therefore reflect signal representation errors that are not eliminated within the network.</p><p>Here, positive currents are generated by excitatory inputs, whereas negative currents are generated by inhibitory inputs as well as the self-reset currents after an action potential. The self-reset currents become negligible in networks in which the number of neurons, <inline-formula><mml:math id="inf57"><mml:mi>N</mml:mi></mml:math></inline-formula>, is much larger than the number of input signals, <inline-formula><mml:math id="inf58"><mml:mi>M</mml:mi></mml:math></inline-formula> (see <xref ref-type="fig" rid="fig2">Figure 2</xref>; see also Materials and methods). Even in <xref ref-type="fig" rid="fig3">Figure 3</xref> this is approximately the case, so that the ratio of positive to negative currents is similar to the ratio of excitatory to inhibitory synaptic inputs (<xref ref-type="fig" rid="fig3">Figure 3I</xref>). The recovery boundary is then signified by a dramatic breakdown in the balance of excitatory and inhibitory currents.</p><p>In this simple example, the recovery boundary emerged because neurons were knocked out in a systematic and ordered fashion (according to the features that they represented). Such a scenario may correspond to lesions or knock-outs in systems in which neural tuning is topologically organized. If the representational features of neurons are randomly interspersed, we find a different scenario. Indeed, when neurons are knocked out at random in our model, the network can withstand the loss of many more neurons. We find that signals are well represented until only a few neurons remain (<xref ref-type="fig" rid="fig3">Figure 3J</xref>).</p><p>At the recovery boundary, the few remaining neurons will shoulder the full representational load. This can easily become an unwieldy situation because the firing rates of the remaining neurons must become unrealistically large to compensate for all the lost neurons. In reality, neural activity will saturate at some point, in which case the recovery boundary occurs much earlier. For instance, we find that the example network tolerates up to <inline-formula><mml:math id="inf59"><mml:mpadded lspace="3.3pt" width="+3.3pt"><mml:mn>70</mml:mn></mml:mpadded></mml:math></inline-formula>–<inline-formula><mml:math id="inf60"><mml:mrow><mml:mn>80</mml:mn><mml:mo lspace="0pt" rspace="3.5pt">%</mml:mo></mml:mrow></mml:math></inline-formula> of random neuron loss if the maximum firing rate of a neuron is unbounded (<xref ref-type="fig" rid="fig3">Figure 3J</xref>), whereas it will only tolerate <inline-formula><mml:math id="inf61"><mml:mpadded lspace="3.3pt" width="+3.3pt"><mml:mn>40</mml:mn></mml:mpadded></mml:math></inline-formula>–<inline-formula><mml:math id="inf62"><mml:mrow><mml:mn>50</mml:mn><mml:mo lspace="0pt" rspace="3.5pt">%</mml:mo></mml:mrow></mml:math></inline-formula> of random neuron loss if the maximum firing rate is 80 Hz (<xref ref-type="fig" rid="fig3">Figure 3K</xref>).</p></sec><sec id="s2-5"><title>The influence of idle neurons on tuning curve shapes</title><p>So far we have considered what happens when neurons are lost permanently in a neural circuit, either because of their death or because of experimental interventions. We have shown that networks can compensate for this loss up to a recovery boundary. Independent of whether compensation is successful or not, it is always marked by changes in firing rates. We will now show how to quantify and predict these changes.</p><p>To do so, we first notice that neurons can also become inactive temporarily in a quite natural manner. In sensory systems, for instance, certain stimuli may inhibit neurons and silence them. This natural, temporary inactivity of neurons leads to similar, ‘compensatory’ effects on the population level in our networks. These effects will provide important clues to understanding how neurons’ firing rates need to change whenever neurons become inactive, whether in a natural or non-natural context.</p><p>For simplicity, let us focus on constant input signals, <inline-formula><mml:math id="inf63"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, and study the <italic>average</italic> firing rates of the neurons, <inline-formula><mml:math id="inf64"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="normal">r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. For constant inputs, the average firing rates must approach the minimum of the same loss function as in <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> so that,<disp-formula id="equ3"><label>(3)</label><mml:math id="m3"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>arg</mml:mi><mml:mo>⁡</mml:mo><mml:munder><mml:mo form="prefix" movablelimits="true">min</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mspace width="thinmathspace"/><mml:mi mathvariant="normal">∀</mml:mi><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where the signal estimate, <inline-formula><mml:math id="inf65"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="normal">r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>, is formed using the average firing rates. This minimization is performed under the constraint that firing rates must be positive, since the firing rates of spiking neurons are positive valued quantities, by definition. Mathematically, the corresponding optimization problem is known as ‘quadratic programming’ (see Materials and methods for more details). Traditionally, studies of population coding or efficient coding assume both positive and negative firing rates (<xref ref-type="bibr" rid="bib21">Dayan and Abbott, 2001</xref>; <xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>; <xref ref-type="bibr" rid="bib59">Simoncelli and Olshausen, 2001</xref>), and the restriction to positive firing rates is generally considered an implementational problem (<xref ref-type="bibr" rid="bib56">Rozell et al., 2008</xref>). Surprisingly, however, we find that the constraint changes the nature of the solutions and provides fundamental insights into the shapes of tuning curves in our networks, as clarified below.</p><p>An example is shown in <xref ref-type="fig" rid="fig4">Figure 4</xref> where we focus on networks of increasing complexity that represent two signals. For simplicity, we keep the second signal constant (‘fixed background’ signal, <inline-formula><mml:math id="inf66"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>) and study the firing rates of all neurons as a function of the first signal, <inline-formula><mml:math id="inf67"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula>. Solving <xref ref-type="disp-formula" rid="equ3">Equation 3</xref> for a range of values, we obtain <inline-formula><mml:math id="inf68"><mml:mi>N</mml:mi></mml:math></inline-formula> neural tuning curves, <inline-formula><mml:math id="inf69"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mrow><mml:mo>…</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> (<xref ref-type="fig" rid="fig4">Figure 4</xref>, second column). These tuning curves closely match those measured in simulations of the corresponding spiking networks (<xref ref-type="fig" rid="fig4">Figure 4</xref>, third and fourth column; see supplementary materials for mathematical details).<fig-group><fig id="fig4" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.005</object-id><label>Figure 4.</label><caption><title>Explaining tuning curves in the spiking network with quadratic programming.</title><p>(<bold>A</bold>) A network with <inline-formula><mml:math id="inf70"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula> neurons. The first column shows the decoding weights for the two neurons. The first decoding weight determines the readout of the signal <inline-formula><mml:math id="inf71"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:math></inline-formula>, whereas the second decoding weight helps to represent a constant background signal <inline-formula><mml:math id="inf72"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>. The second column shows the tuning curves, i.e., firing rates as a function of <inline-formula><mml:math id="inf73"><mml:mi>x</mml:mi></mml:math></inline-formula>, predicted using quadratic programming. The third column shows the tuning curves measured during a 1 s simulation of the respective spiking network. The fourth column shows the match between the measured and predicted tuning curves. (<bold>B</bold>) Similar to A , but using a network of <inline-formula><mml:math id="inf74"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>16</mml:mn></mml:mrow></mml:math></inline-formula> neurons with inhomogeneous, regularly spaced decoding weights. The resulting tuning curves are regularly spaced. Neurons with small decoding weight magnitude have eccentric firing rate thresholds and shallow slopes; neurons with large decoding weight magnitudes have central firing rate thresholds and steep slopes. (<bold>C</bold>) Similar to B except that decoding weights and cost terms are irregularly spaced. This irregularity leads to inhomogeneity in the balanced network tuning curves, and in the quadratic programming prediction (see also <xref ref-type="fig" rid="fig4s1">Figure 4—figure supplements 1</xref>–<xref ref-type="fig" rid="fig4s3">3</xref>).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.005">http://dx.doi.org/10.7554/eLife.12454.005</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig4-v2"/></fig><fig id="fig4s1" position="float" specific-use="child-fig"><object-id pub-id-type="doi">10.7554/eLife.12454.006</object-id><label>Figure 4—figure supplement 1.</label><caption><title>The geometry of quadratic programming.</title><p>(<bold>A</bold>) Tuning curves calculated for a two neuron example. The tuning curve solution can be decomposed into three regions: region <inline-formula><mml:math id="inf75"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">ℛ</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> where <inline-formula><mml:math id="inf76"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf77"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>, region <inline-formula><mml:math id="inf78"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">ℛ</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> where <inline-formula><mml:math id="inf79"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf80"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>, and region <inline-formula><mml:math id="inf81"><mml:msub><mml:mi class="ltx_font_mathcaligraphic">ℛ</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math></inline-formula> where <inline-formula><mml:math id="inf82"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf83"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>. In each region the firing rate solution is given by a different linear projection of <inline-formula><mml:math id="inf84"><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM348">x</mml:mi><mml:mo>,</mml:mo><mml:msub id="XM349"><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf85"><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:math></inline-formula> is a fixed background signal. (<bold>B</bold>) If the readout vectors of the two neurons are defined as <inline-formula><mml:math id="inf86"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>w</mml:mi><mml:mo>,</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf87"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>−</mml:mo><mml:mi>w</mml:mi><mml:mo>,</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>, then the transformation from firing rate space to signal space is given by a simple linear projection of firing rates onto the vectors <inline-formula><mml:math id="inf88"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>−</mml:mo><mml:mi>w</mml:mi><mml:mo>,</mml:mo><mml:mi>w</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> (for the variable signal <inline-formula><mml:math id="inf89"><mml:mi>x</mml:mi></mml:math></inline-formula>) and <inline-formula><mml:math id="inf90"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">c</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:mo>,</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> (for the background signal). Unlike the transformation from signal space to firing rate space in A , this transformation is not region dependent.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.006">http://dx.doi.org/10.7554/eLife.12454.006</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig4-figsupp1-v2"/></fig><fig id="fig4s2" position="float" specific-use="child-fig"><object-id pub-id-type="doi">10.7554/eLife.12454.007</object-id><label>Figure 4—figure supplement 2.</label><caption><title>A taxonomy of tuning curve shapes.</title><p>Here, we explore the relationship between tuning curve shape and the choice of readout weights for the variable signal (‘weight’ <inline-formula><mml:math id="inf91"><mml:mi>w</mml:mi></mml:math></inline-formula>) and the background signal (‘cost’ <inline-formula><mml:math id="inf92"><mml:mi>c</mml:mi></mml:math></inline-formula>). Specifically, we calculate tuning curve shape using quadratic programming for 12 distinct systems, each with different parameter values. (<bold>A</bold>) The left column shows the read-out weights <inline-formula><mml:math id="inf93"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> for each system. The right column shows the tuning curves calculated using quadratic programming. Each row corresponds to a distinct neural population. In this panel, we increase the spread of the read-out weight <inline-formula><mml:math id="inf94"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>w</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> from top to bottom (left column), and we find that the range of tuning curve slopes increase (right column). The loss is approximately invariant to this modulation (right column, bottom). (<bold>B</bold>) Similar to A , except that we increase the spread of the read-out weights <inline-formula><mml:math id="inf95"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> (‘cost’ term) from top to bottom (left column), and we observe that the range of tuning curve intercept values increase (right column). Again, the loss is approximately invariant to this modulation (right column, bottom). (<bold>C</bold>) Similar to A and B except that this time we reduce the magnitude of the read-out weights <inline-formula><mml:math id="inf96"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> from top to bottom (left column), and we observe that the intercept values decrease, until tuning curves do not overlap with each other (right column). This time, the loss increases marginally (right column, bottom). This happens because the system is unable to represent the background signal.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.007">http://dx.doi.org/10.7554/eLife.12454.007</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig4-figsupp2-v2"/></fig><fig id="fig4s3" position="float" specific-use="child-fig"><object-id pub-id-type="doi">10.7554/eLife.12454.008</object-id><label>Figure 4—figure supplement 3.</label><caption><title>Quadratic programming firing rate predictions compared to spiking network measurements.</title><p>(<bold>A</bold>) The impact of membrane potential noise <inline-formula><mml:math id="inf97"><mml:msub><mml:mi>σ</mml:mi><mml:mi>V</mml:mi></mml:msub></mml:math></inline-formula> on firing rate predictions is calculated by comparing quadratic programming predictions and firing rate measurements in network simulations. We calculate the prediction error of quadratic programming by taking the average absolute difference between quadratic programming predictions and spiking network measurements (solid line) and by taking the standard deviation of these measurements about the predictions (dashed line). Averages are calculated across neurons, stimuli and time, using networks with tuning curve shapes similar to <xref ref-type="fig" rid="fig5">Figure 5B</xref>. In the parameter range used throughout this paper (indicated by a blue cross), the prediction error is small and robust to changes in noise. As expected, the error increases when the noise is the same order of magnitude as the mean spiking threshold, <inline-formula><mml:math id="inf98"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mover><mml:mi>T</mml:mi><mml:mo accent="false">¯</mml:mo></mml:mover><mml:mo>≡</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mi>i</mml:mi></mml:munder><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula>. (<bold>B</bold>) Similarly, the prediction error increases as the size of the decoder weights increase. Here, <inline-formula><mml:math id="inf99"><mml:mi>α</mml:mi></mml:math></inline-formula> is a scaling parameter that characterizes the magnitude of the decoder weights (see Methods). We find that the error is small around the parameter range used throughout this paper ( <inline-formula><mml:math id="inf100"><mml:mrow><mml:mi>α</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula>). However, for larger values of <inline-formula><mml:math id="inf101"><mml:mi>α</mml:mi></mml:math></inline-formula> the quadratic programming prediction degrades. Again, this is expected because <inline-formula><mml:math id="inf102"><mml:mi>α</mml:mi></mml:math></inline-formula> determines the resolution with which our spiking network can represent a signal. As such, our predictions are most accurate in the very regime that we are most interested in - where optimal coding is possible. Note that we must also scale the spiking cost and the membrane potential leak with <inline-formula><mml:math id="inf103"><mml:mi>α</mml:mi></mml:math></inline-formula> so that the shape of tuning curves are preserved, allowing for a fair comparison across decoder scales (see Materials and methods). (<bold>C</bold>) The network size <inline-formula><mml:math id="inf104"><mml:mi>N</mml:mi></mml:math></inline-formula> has little influence on the prediction error. Again, read-out weights and cost parameters are scaled so that tuning curve shape is invariant to changes in <inline-formula><mml:math id="inf105"><mml:mi>N</mml:mi></mml:math></inline-formula> (see Materials and methods).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.008">http://dx.doi.org/10.7554/eLife.12454.008</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig4-figsupp3-v2"/></fig></fig-group></p><p>We observe that the positivity constraint produces non-linearities in neural tuning curves. We illustrate this using a two-neuron system with two opposite-valued readout weights for the first signal (<xref ref-type="fig" rid="fig4">Figure 4A</xref>, first column). At signal value <inline-formula><mml:math id="inf106"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>, both neurons fire at equal rates so that the readout <inline-formula><mml:math id="inf107"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, <xref ref-type="disp-formula" rid="equ1">Equation 1</xref>, correctly becomes <inline-formula><mml:math id="inf108"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>∝</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>. When we move to higher values of <inline-formula><mml:math id="inf109"><mml:mi>x</mml:mi></mml:math></inline-formula>, the firing rate of the first neuron, <inline-formula><mml:math id="inf110"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>, increases linearly (<xref ref-type="fig" rid="fig4">Figure 4A</xref>, second column, orange line), and the firing rate of the second neuron, <inline-formula><mml:math id="inf111"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>, decreases linearly (<xref ref-type="fig" rid="fig4">Figure 4A</xref>, second column, blue line), so that in each case, <inline-formula><mml:math id="inf112"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>≈</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula>. Eventually, around <inline-formula><mml:math id="inf113"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mn>0.4</mml:mn></mml:mrow></mml:math></inline-formula>, the firing rate of neuron two hits zero (<xref ref-type="fig" rid="fig4">Figure 4A</xref>, black arrow). At this point, neuron two has effectively disappeared from the network. Since it cannot decrease below zero, and because the estimated value <inline-formula><mml:math id="inf114"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> must keep growing with <inline-formula><mml:math id="inf115"><mml:mi>x</mml:mi></mml:math></inline-formula>, the firing rate of neuron one must grow at a faster rate. This causes a kink in its tuning curve (<xref ref-type="fig" rid="fig4">Figure 4A</xref>, black arrow). This kink in the tuning curve slope is an indirect form of optimal compensation, where the network is compensating for the temporary silencing of a neuron.</p><p>More generally, the firing rates of neurons are piecewise linear functions of the input signals. In <xref ref-type="fig" rid="fig4">Figure 4B,C</xref>, every time one of the neurons hits the zero firing rate lower bound, the tuning curve slopes of all the other neurons change. We furthermore note that the tuning curves also depend on the form of the cost terms, <inline-formula><mml:math id="inf116"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>C</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. If there is no cost term, there are many equally favorable firing rate combinations that produce identical readouts (<xref ref-type="fig" rid="fig1">Figure 1A</xref>). The precise choice of a cost term determines which of these solutions is found by the network. We provide further geometric insights into the shape of the tuning curves obtained in our networks in <xref ref-type="fig" rid="fig4s1">Figure 4—figure supplements 1</xref>–<xref ref-type="fig" rid="fig4s3">3</xref> and in the Materials and methods.</p></sec><sec id="s2-6"><title>Tuning curves before and after neuronal silencing</title><p>We can now calculate how tuning curves change shape in our spiking network following neuronal loss. When a set of neurons are killed or silenced within a network, their firing rates are effectively set to zero. We can include this silencing of neurons in our loss function by simply clamping the respective neurons’ firing rates to zero:<disp-formula id="equ4"><label>(4)</label><mml:math id="m4"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">r</mml:mi><mml:mi mathvariant="normal">g</mml:mi></mml:mrow><mml:mrow><mml:munder><mml:mo form="prefix">min</mml:mo><mml:mrow><mml:mfrac linethickness="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>≥</mml:mo><mml:mspace width="thinmathspace"/><mml:mn>0</mml:mn><mml:mspace width="thinmathspace"/><mml:mi>i</mml:mi><mml:mi>f</mml:mi><mml:mspace width="thinmathspace"/><mml:mi>i</mml:mi><mml:mspace width="thinmathspace"/><mml:mo>∈</mml:mo><mml:mspace width="thinmathspace"/><mml:mi>X</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>=</mml:mo><mml:mspace width="thinmathspace"/><mml:mn>0</mml:mn><mml:mspace width="thinmathspace"/><mml:mi>i</mml:mi><mml:mi>f</mml:mi><mml:mspace width="thinmathspace"/><mml:mi>j</mml:mi><mml:mspace width="thinmathspace"/><mml:mo>∈</mml:mo><mml:mspace width="thinmathspace"/><mml:mi>Y</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:munder></mml:mrow><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf117"><mml:mi>X</mml:mi></mml:math></inline-formula> denotes the set of healthy neurons and <inline-formula><mml:math id="inf118"><mml:mi>Y</mml:mi></mml:math></inline-formula> the set of dead (or silenced) neurons. This additional clamping constraint is the mathematical equivalent of killing neurons. In turn, we can study the tuning curves of neurons in networks with knocked-out neurons without having to simulate the corresponding spiking networks every single time.</p><p>As a first example, we revisit the network shown in <xref ref-type="fig" rid="fig4">Figure 4C</xref>, which represents a signal <inline-formula><mml:math id="inf119"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:math></inline-formula>, and a constant ‘background’ signal <inline-formula><mml:math id="inf120"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>. This network exhibits a complex mixture of tuning curves, i.e., firing rates as a function of the primary signal <inline-formula><mml:math id="inf121"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:math></inline-formula>, with positive and negative slopes, and diverse threshold crossings (<xref ref-type="fig" rid="fig5">Figure 5B</xref>). When we knock out a subset of neurons (<xref ref-type="fig" rid="fig5">Figure 5A</xref>, neurons labeled ‘C’), we find that neurons with similar tuning to the knocked out neurons increase their firing rates and dissimilarly-tuned neurons decrease their firing rates, especially for negative values of the signal <inline-formula><mml:math id="inf122"><mml:mi>x</mml:mi></mml:math></inline-formula> (<xref ref-type="fig" rid="fig5">Figure 5C, left</xref>). In this way, signal representation is preserved as much as possible (<xref ref-type="fig" rid="fig5">Figure 5C</xref>, right, black line). In comparison, a network that does not change its tuning curves after the cell loss has drastically worse representation error (<xref ref-type="fig" rid="fig5">Figure 5C</xref>, right, dashed line). Once all the neurons with positive tuning curve slopes are killed (<xref ref-type="fig" rid="fig5">Figure 5A</xref>, neurons labeled ‘D’), we cross the recovery boundary, and even optimal compensation can no longer preserve the representation of negatively-valued signals (<xref ref-type="fig" rid="fig5">Figure 5D</xref>).<fig id="fig5" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.009</object-id><label>Figure 5.</label><caption><title>Changes in tuning curves following neuron loss and optimal compensation, as calculated with quadratic programming for three different networks.</title><p>(<bold>A</bold>) Decoding weights for a network of <inline-formula><mml:math id="inf123"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>16</mml:mn></mml:mrow></mml:math></inline-formula> neurons, similar to <xref ref-type="fig" rid="fig4">Figure 4C</xref>. Arrows indicate the neurons that will be knocked out, either in panel (<bold>C</bold>) or (<bold>D</bold>). (<bold>B</bold>) The firing rates of all neurons given as a function of the first input signal <inline-formula><mml:math id="inf124"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>. Each line is the tuning curve of a single neuron, with either positive slope (yellow–red) or negative slope (blue-green). (<bold>C</bold>) Left, tuning curves after the loss of four negatively sloped neurons and after optimal compensation from the remaining neurons. Right, the signal representation continues to be accurate (black line). If the tuning curves of the remaining neurons do not undergo optimal compensation, the signal representation fails for negative values of <inline-formula><mml:math id="inf125"><mml:mi>x</mml:mi></mml:math></inline-formula> (dashed grey line). (<bold>D</bold>) After the loss of the remaining negatively sloped neurons, the population is no longer capable of producing a readout <inline-formula><mml:math id="inf126"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> that can match negative values of the signal <inline-formula><mml:math id="inf127"><mml:mi>x</mml:mi></mml:math></inline-formula>, even with optimal compensation (black line). This happens because the recovery boundary has been reached – where signal representation fails. The changes in tuning curves that occur still seek to minimize the error, as can be seen when comparing the error incurred by a network whose tuning curves do not change (dashed gray line). (<bold>E</bold>) Decoding weights for a two-dimensional network model containing <inline-formula><mml:math id="inf128"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>20</mml:mn></mml:mrow></mml:math></inline-formula> neurons. Apart from the smaller number of neurons and the added heterogeneity, this network is equivalent to the network shown in <xref ref-type="fig" rid="fig3">Figure 3</xref>. (<bold>F</bold>) This system has bell-shaped tuning curves when firing rates are plotted as a function of a circular signal with direction <inline-formula><mml:math id="inf129"><mml:mi>θ</mml:mi></mml:math></inline-formula>. (<bold>G</bold>) Left, when some of the neurons have been knocked out, the tuning curves of the remaining neurons change by shifting towards the preferred directions of the knocked out neurons. Right, this compensation preserves high signal representation quality (black line). In comparison, if the tuning curves do not change, the readout error increases substantially (dashed gray line). (<bold>H</bold>) Left, when more neurons are knocked-out (here, all neurons with positive decoding weights), the firing rates of the remaining neurons still shift towards the missing directions (compare highlighted spike trains in <xref ref-type="fig" rid="fig3">Figure 3</xref>). Right, despite the compensation, the network is no longer able to properly represent the signal in all directions. (<bold>I</bold>) Decoding weights for a two-dimensional network model containing <inline-formula><mml:math id="inf130"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:mrow></mml:math></inline-formula> neurons. (<bold>J</bold>) The network exhibits four bell-shaped tuning curves. (<bold>K</bold>) Left, following the loss of a single neuron and optimal compensation, the tuning curves of the remaining neurons do not change. Right, after cell loss, the network incurs a strong error around the preferred direction of the knocked out neuron (<inline-formula><mml:math id="inf131"><mml:mrow><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mn>0</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula>), with optimal compensation (black line) or without optimal compensation (dashed gray line).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.009">http://dx.doi.org/10.7554/eLife.12454.009</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig5-v2"/></fig></p><p>Next, we investigate these compensatory mechanisms in neural systems that have bell-shaped tuning curves (<xref ref-type="bibr" rid="bib9">Ben-Yishai et al., 1995</xref>). Our framework captures these cases if we assume that a network represents circular signals embedded in a two-dimensional space, <inline-formula><mml:math id="inf132"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>cos</mml:mi><mml:mo>⁡</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>θ</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mi>sin</mml:mi><mml:mo>⁡</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>θ</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, where <inline-formula><mml:math id="inf133"><mml:mi>θ</mml:mi></mml:math></inline-formula> is the direction of our signal. To do so, we construct a network in which the decoding weights of the neurons are spaced around a circle, with some irregularity added (<xref ref-type="fig" rid="fig5">Figure 5E</xref>). As a result, we obtain an irregular combination of bell-shaped tuning curves (<xref ref-type="fig" rid="fig5">Figure 5F</xref>), similar to those found in the primary visual or primary motor cortex, with each neuron having a different preferred direction and maximum firing rate as determined by the value of the decoding weights. We note that, apart from the smaller number of neurons and the greater irregularity of the decoding weights, this network is similar to the spiking network investigated in <xref ref-type="fig" rid="fig3">Figure 3</xref>.</p><p>If we now kill neurons within a specific range of preferred directions (<xref ref-type="fig" rid="fig5">Figure 5E</xref>), then the remaining neurons with the most similar directions increase their firing rates and shift their tuning curves towards the preferred directions of the missing neurons (<xref ref-type="fig" rid="fig5">Figure 5G</xref>, left). Furthermore, neurons further away from the knocked-out region will slightly skew their tuning curves by decreasing their firing rates for directions around zero (<xref ref-type="fig" rid="fig5">Figure 5F,G</xref>, arrows). Overall, the portion of space that is under-represented following cell loss becomes populated by neighboring neurons, which thereby counteract the loss. In turn, the signal representation performance of the population is dramatically improved following optimal compensation compared to a system without compensatory mechanisms (<xref ref-type="fig" rid="fig5">Figure 5G</xref>, right). Once all neurons with positive read-out weights along the first axis are killed, the network can no longer compensate, and signal representation fails, despite the strong changes in firing rates of the neurons (<xref ref-type="fig" rid="fig5">Figure 5H</xref>). This latter scenario is equivalent to the one we observed in <xref ref-type="fig" rid="fig3">Figure 3</xref> after the second knock-out.</p><p>The ability of the system to compensate for the loss of neurons depends on the redundancy of its representation (although redundancy alone is not sufficient for compensation). If our network consists of only four neurons with equally spaced readout weights (<xref ref-type="fig" rid="fig5">Figure 5I</xref>), then it cannot compensate for the loss of neurons. Rather, we find that this model system crosses the recovery boundary following the loss of a single neuron, and so, optimal compensation does not produce any changes in the remaining neurons (<xref ref-type="fig" rid="fig5">Figure 5K</xref>, left). It occurs because the four neurons exactly partition the four quadrants of the signal space, and the remaining neurons cannot make any changes that would improve the signal representation.</p></sec><sec id="s2-7"><title>Comparison to experimental data</title><p>Does optimal compensation happen in real neural systems? Our framework makes strong predictions for how firing rates should change following neuronal knock-outs. Unfortunately, there is currently little data on how neural firing rates change directly after the loss of neurons in a given system. However, we found data from three systems—the oculomotor integrator in the hindbrain, the cricket cercal system, and the primary visual cortex—which allows us to make a first comparison of our predictions to reality. We emphasize that a strict test of our theory is left for future work.</p><p>The first system is the horizontal velocity-to-position integrator of the vertebrate oculomotor system, which is responsible for horizontal eye fixations, and which is comparable to the network model in <xref ref-type="fig" rid="fig5">Figure 5A–D</xref>. This system is usually considered to represent the signals that need to be sent to the two muscles (lateral and medial rectus) that control horizontal eye movements. In this case, the signal <inline-formula><mml:math id="inf134"><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inline-formula> corresponds to the eye position, controlled by the difference in muscular activity, with zero representing the central eye position, positive values representing right-side eye positions and negative values representing left-side eye positions. The fixed background signal corresponds to the net sum of the two muscle activities, which we assume to remain constant for simplicity.</p><p>We find that the tuning curves of neurons measured in the right half of the oculomotor system (<xref ref-type="bibr" rid="bib2">Aksay et al., 2000</xref>) (<xref ref-type="fig" rid="fig6">Figure 6A</xref>) are similar to the positively-sloped tuning curves in our network model calculated using <xref ref-type="disp-formula" rid="equ3">Equation 3</xref> (<xref ref-type="fig" rid="fig6">Figure 6B</xref>). In both cases, neurons that encode right-side eye positions have positive slopes, and these follow a recruitment order, where neurons with shallow tuning curve slopes become active before neurons with steep tuning curve slopes (<xref ref-type="bibr" rid="bib26">Fuchs et al., 1988</xref>; <xref ref-type="bibr" rid="bib2">Aksay et al., 2000</xref>; <xref ref-type="bibr" rid="bib53">Pastor and Gonzalez-Forero, 2003</xref>) (<xref ref-type="fig" rid="fig6">Figure 6A,B</xref> inset). Similar observations hold for the left half of the oculomotor system, which has negatively-sloped tuning curves (data not shown).<fig id="fig6" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.010</object-id><label>Figure 6.</label><caption><title>Tuning curves and inactivation experiments in the oculomotor integrator of the goldfish, and in the cricket cercal system.</title><p>(<bold>A</bold>) Tuning curve measurements from <italic>right-side</italic> oculomotor neurons (Area 1 of goldfish). Firing rate measurements above 5 Hz are fit with a straight line <inline-formula><mml:math id="inf135"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mi>k</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM344"><mml:mi>x</mml:mi><mml:mo>-</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mrow id="XM342"><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM343">n</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf136"><mml:msub><mml:mi>f</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inline-formula> is the firing rate of the <inline-formula><mml:math id="inf137"><mml:msup><mml:mi>n</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math></inline-formula> neuron, <inline-formula><mml:math id="inf138"><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mrow id="XM345"><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM346">n</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> is the firing rate threshold, <inline-formula><mml:math id="inf139"><mml:msub><mml:mi>k</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inline-formula> is the firing rate slope and <inline-formula><mml:math id="inf140"><mml:mi>x</mml:mi></mml:math></inline-formula> is the eye position. As the eye position increases, from left to right, a recruitment order is observed, where neuron slopes increase as the firing rate threshold increases (inset).</p><p>(<bold>B</bold>) Tuning curves from our network model. We use the same parameters as in previous figures (<xref ref-type="fig" rid="fig5">Figure 5A</xref>), and fit the threshold-linear model to the simulated tuning curves (<xref ref-type="fig" rid="fig5">Figure 5B</xref>) using the same procedure as in the experiments from <xref ref-type="bibr" rid="bib2">Aksay et al. (2000)</xref>. As in the data, a recruitment order is observed with slopes increasing as the firing threshold increases (inset). (<bold>C</bold>) Eye position drift measurements after the pharmacological inactivation of left side neurons in goldfish. Inactivation was performed using lidocaine and muscimol injections. Here <inline-formula><mml:math id="inf141"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi mathvariant="normal">Δ</mml:mi><mml:mi>D</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mtext>after</mml:mtext></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mtext>before</mml:mtext></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>, where <inline-formula><mml:math id="inf142"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>D</mml:mi><mml:mtext>before</mml:mtext></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> is the average drift in eye position before pharmacological inactivation and is the average drift in eye position after pharmacological inactivation. Averages are calculated across goldfish.</p><p>(<bold>D</bold>) Eye position representation error of the model network following optimal compensation. Here <inline-formula><mml:math id="inf143"><mml:mrow><mml:mrow><mml:mi mathvariant="normal">Δ</mml:mi><mml:mo>⁢</mml:mo><mml:mi>E</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mi>I</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula>, where is the representation error of the intact system and <inline-formula><mml:math id="inf144"><mml:msub><mml:mi>E</mml:mi><mml:mi>C</mml:mi></mml:msub></mml:math></inline-formula> is the representation error following optimal compensation. These representation errors are calculated using the loss function from <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> . (<bold>E</bold>) Firing rate recordings from the cricket cercal system in response to air currents from different directions. Each neuron has a preference for a different wind direction. Compare with <xref ref-type="fig" rid="fig5">Figure 5J</xref>.</p><p>(<bold>F</bold>) Measured change of cockroach cercal system tuning curves following the ablation of another cercal system neuron. In all cases, there is no significant change in firing rate. This is consistent with the lack of compensation in <xref ref-type="fig" rid="fig5">Figure 5K</xref>. The notation GI2-GI3 denotes that Giant Interneuron 2 is ablated and the change in Giant Interneuron 3 is measured. The firing rate after ablation is given as a percentage of the firing rate before ablation.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.010">http://dx.doi.org/10.7554/eLife.12454.010</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig6-v2"/><permissions><copyright-statement>© 2000 The American Physiological Society. All Rights Reserved</copyright-statement><copyright-year>2000</copyright-year><copyright-holder>The American Physiological Society</copyright-holder><license><license-p><xref ref-type="fig" rid="fig6">Figure 6A</xref> has been adapted with permission from The American Physiological Society.</license-p></license></permissions><permissions><copyright-statement>© 2007 McMillan Publisher Ltd: Nature Neuroscience. All Rights Reserved</copyright-statement><copyright-year>2007</copyright-year><copyright-holder>McMillan Publisher Ltd: Nature Neuroscience</copyright-holder><license><license-p><xref ref-type="fig" rid="fig6">Figure 6C</xref> has been adapted with permission from McMillan Publisher Ltd: Nature Neuroscience</license-p></license></permissions><permissions><copyright-statement>© 1991 The American Physiological Society. All Rights Reserved</copyright-statement><copyright-year>1991</copyright-year><copyright-holder>The American Physiological Society</copyright-holder><license><license-p><xref ref-type="fig" rid="fig6">Figure 6E</xref> has been adapted with permission from The American Physiological Society</license-p></license></permissions><permissions><copyright-statement>© 1997 The American Physiological Society. All Rights Reserved</copyright-statement><copyright-year>1997</copyright-year><copyright-holder>The American Physiological Society</copyright-holder><license><license-p><xref ref-type="fig" rid="fig6">Figure 6F</xref> has been adapted with permission from The American Physiological Society</license-p></license></permissions></fig></p><p>Now, when the left half of the oculomotor system is inactivated using lidocaine and muscimol injections (<xref ref-type="bibr" rid="bib3">Aksay et al., 2007</xref>), the system can still represent right-side eye positions, but is unable to represent left-side eye positions (<xref ref-type="fig" rid="fig6">Figure 6C</xref>). In our network model, this inactivation corresponds to eliminating all negatively-sloped tuning curves (<xref ref-type="fig" rid="fig5">Figure 5D</xref>). The optimal compensation ensures that the right part of the signal is still correctly represented, but the left part can no longer be represented due to the lack of negatively tuned neurons (<xref ref-type="fig" rid="fig5">Figure 5D</xref> and <xref ref-type="fig" rid="fig6">Figure 6D</xref>). Hence, these measurements are consistent with our optimal compensation and recovery boundary predictions.</p><p>The second system is a small sensory system called the cricket (or cockroach) cercal system, which represents wind velocity (<xref ref-type="bibr" rid="bib61">Theunissen and Miller, 1991</xref>), and which is comparable to the network model in <xref ref-type="fig" rid="fig5">Figure 5I–K</xref>. In the case of the cercal system, <inline-formula><mml:math id="inf145"><mml:mi>θ</mml:mi></mml:math></inline-formula> is the wind-direction. The tuning curves we obtain are similar to those measured, with each neuron having a different, preferred wind direction (<xref ref-type="bibr" rid="bib61">Theunissen and Miller, 1991</xref>), see <xref ref-type="fig" rid="fig6">Figure 6E</xref>. The similarity between measured tuning curves (<xref ref-type="fig" rid="fig6">Figure 6E</xref>) and predicted tuning curves (<xref ref-type="fig" rid="fig5">Figure 5J</xref>) suggests that we can interpret cercal system neurons to be optimal for representing wind direction using equally spaced readout weights.</p><p>When one neuron in the cercal system is killed, the remaining neurons do not change their firing rates (<xref ref-type="bibr" rid="bib44">Libersat and Mizrahi, 1996</xref>; <xref ref-type="bibr" rid="bib48">Mizrahi and Libersat, 1997</xref>), see <xref ref-type="fig" rid="fig6">Figure 6F</xref>. This is analogous to our predictions (<xref ref-type="fig" rid="fig5">Figure 5K</xref>). Indeed, our model of the cercal system has no redundancy (see Materials and methods for more details). The cercal system in all its simplicity is therefore a nice example of a system that exists on the ‘edge’ of the recovery boundary.</p></sec><sec id="s2-8"><title>A high-dimensional example: optimal compensation in V1</title><p>The relatively simple models we have described so far are useful for understanding the principle of optimal compensation, but they are unlikely to capture the complexity of large neural populations in the brain. Even though the network model in <xref ref-type="fig" rid="fig5">Figure 5E–G</xref> resembles common network models for the primary visual or primary motor cortex, it does not capture the high-dimensional nature of representations found in these areas. To investigate the compensatory mechanisms in more complex networks, we make a final generalization to systems that can represent high-dimensional signals, and for concreteness we focus on the (primary) visual cortex, which is our third test system.</p><p>The visual cortex is generally thought to construct representations of images consisting of many pixel values (<xref ref-type="fig" rid="fig7">Figure 7A</xref>). The tuning of V1 simple cells, for instance, can largely be accounted for by assuming that neural firing rates provide a sparse code of natural images (<xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>; <xref ref-type="bibr" rid="bib59">Simoncelli and Olshausen, 2001</xref>). In accordance with this theory, we choose a model that represents image patches (size <inline-formula><mml:math id="inf146"><mml:mrow><mml:mn>12</mml:mn><mml:mo>×</mml:mo><mml:mn>12</mml:mn></mml:mrow></mml:math></inline-formula>, corresponding to <inline-formula><mml:math id="inf147"><mml:mrow><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mn>144</mml:mn></mml:mrow></mml:math></inline-formula> dimensions), and we use decoding weights that are optimized for natural images (see Materials and methods). Neurons in this model are tuned to both the orientation and polarity of edge-like images (<xref ref-type="fig" rid="fig7">Figure 7D</xref>), where the polarity is either a bright edge with dark flanks, or the opposite polarity – a dark edge with bright flanks. Orientation tuning emerges because natural images typically contain edges at many different orientations, and a sparse code captures these natural statistics (<xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>; <xref ref-type="bibr" rid="bib59">Simoncelli and Olshausen, 2001</xref>). Polarity tuning emerges as a natural consequence of the positivity constraint, because a neuron with a positive firing rate cannot represent edges at two opposing polarities. Similar polarity tuning has been obtained before, but with an additional constraint that decoding weights be strictly positive (<xref ref-type="bibr" rid="bib34">Hoyer, 2003</xref>, <xref ref-type="bibr" rid="bib33">2004</xref>).<fig id="fig7" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.011</object-id><label>Figure 7.</label><caption><title>Optimal compensation for orientation column cell loss in a positive sparse coding model of the visual cortex.</title><p>(<bold>A</bold>) Schematic of a neural population (middle) providing a representation (right) of a natural image (left). This image representation is formed when neurons respond to an image patch <inline-formula><mml:math id="inf148"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:math></inline-formula> with a sparse representation and an output <inline-formula><mml:math id="inf149"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. Here, patches are overlapped to remove aliasing artifacts. (<bold>B</bold>) Following the loss of neurons that represent vertical orientations, the image representation degrades substantially without optimal compensation, especially for image segments that contain vertical lines (orange arrow), and less so for image segments that contain horizontal lines (green arrow). (<bold>C</bold>) Following the optimal compensation, the image representation is recovered. (<bold>D</bold>) A selection of efficient sparse decoding weights, illustrated as image patches. Each image patch represents the decoding weights for a single neuron. In total, there are 288 neurons in the population. (<bold>E</bold>) A selection of vertically orientated decoding weights whose neurons are selected for simulated loss. All neurons with preferred vertical orientations at <inline-formula><mml:math id="inf150"><mml:msup><mml:mn>67.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula>, <inline-formula><mml:math id="inf151"><mml:msup><mml:mn>90</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula> and <inline-formula><mml:math id="inf152"><mml:msup><mml:mn>112.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula> and at the opposite polarity, <inline-formula><mml:math id="inf153"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>67.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula>, <inline-formula><mml:math id="inf154"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>90</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf155"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>112.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> are silenced.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.011">http://dx.doi.org/10.7554/eLife.12454.011</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig7-v2"/></fig></p><p>As before, we compute the firing rates of our neural population by solving <xref ref-type="disp-formula" rid="equ3">Equation 3</xref>, which provides a convenient approximation of the underlying spiking network. We then silence all neurons with a vertical orientation preference (<xref ref-type="fig" rid="fig7">Figure 7E</xref>) and calculate the resulting changes in firing rates in the network. Without optimal compensation, (i.e., without any changes in firing rates), we find that the silencing of an orientation column damages image representation, especially for image components that contain edges parallel to the preferred orientations of the dead neurons (<xref ref-type="fig" rid="fig7">Figure 7B</xref>, orange arrow). When the population implements optimal compensation, the firing rates of many neurons change, and the image representation is recovered (<xref ref-type="fig" rid="fig7">Figure 7C</xref>).</p><p>To illustrate the nature of the network compensation, we study how the tuning of neurons changes when part of the population is lost. This focus will allow us to compare our predictions to experimental data. The tuning curves of all cells in response to the directions of various gratings are shown in <xref ref-type="fig" rid="fig8">Figure 8A</xref>. If we knock out a (small) subset of the cells, e.g., 50% of all neurons with preferred directions around <inline-formula><mml:math id="inf156"><mml:mrow><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mn>0</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>, then the firing rates of several of the remaining neurons increase at the preferred direction of the silenced cells (<xref ref-type="fig" rid="fig8">Figure 8B,D</xref>). As a consequence, the preferred directions of many cells shift toward the preferred direction of the silenced cells (<xref ref-type="fig" rid="fig8">Figure 8C</xref>). Unlike the simple example in <xref ref-type="fig" rid="fig5">Figure 5G</xref>, however, these shifts occur in neurons throughout the population, and not just in neurons with neighboring directions. For the affected stimuli, the shifts decrease the representation errors compared to a system without compensation (<xref ref-type="fig" rid="fig8">Figure 8E</xref>).<fig id="fig8" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.012</object-id><label>Figure 8.</label><caption><title>Tuning curves and signatures of optimal compensation in the V1 model.</title><p>(<bold>A</bold>) The tuning curves (firing rates as a function of stimulus direction) for all neurons in the model (<inline-formula><mml:math id="inf157"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>288</mml:mn></mml:mrow></mml:math></inline-formula>). (<bold>B</bold>) Changes in firing rates (<inline-formula><mml:math id="inf158"><mml:mrow><mml:mi mathvariant="normal">Δ</mml:mi><mml:mo>⁢</mml:mo><mml:mi>F</mml:mi></mml:mrow></mml:math></inline-formula>), as a function of stimulus direction, for all neurons in the model, when 50% of neurons with a preferred direction at <inline-formula><mml:math id="inf159"><mml:msup><mml:mn>0</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula> degrees are knocked out <inline-formula><mml:math id="inf160"><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM347"><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>11</mml:mn></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></inline-formula>. Several cells change their firing close to the preferred (<inline-formula><mml:math id="inf161"><mml:msup><mml:mn>0</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula>) or anti-preferred (<inline-formula><mml:math id="inf162"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>180</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> or <inline-formula><mml:math id="inf163"><mml:msup><mml:mn>180</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula>) direction of the k.o. cells. (<bold>C</bold>) The change in preferred direction, <inline-formula><mml:math id="inf164"><mml:mi mathvariant="normal">Δ</mml:mi></mml:math></inline-formula>PD, following optimal compensation is given for each neuron as a function of its preferred direction before cell loss. Many cells shift their preferred direction towards the preferred direction of the knocked out cells. (<bold>D</bold>) The average change in firing rate due to optimal compensation (<inline-formula><mml:math id="inf165"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi mathvariant="normal">Δ</mml:mi><mml:mrow><mml:mover><mml:mi>F</mml:mi><mml:mo accent="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>) is calculated at each stimulus direction, where the average is taken across the neural population in B. There is a substantial increase in firing rates close to the preferred directions of the knocked out cells. The histograms on the bottom show the firing rate changes in the population as a function of four different stimulus directions. Stimuli with horizontal orientations (<inline-formula><mml:math id="inf166"><mml:msup><mml:mn>0</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula> or <inline-formula><mml:math id="inf167"><mml:mrow><mml:mo>±</mml:mo><mml:msup><mml:mn>180</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>) lead to firing rate changes, but stimuli with vertical orientations ( <inline-formula><mml:math id="inf168"><mml:mrow><mml:mo>±</mml:mo><mml:msup><mml:mn>90</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>) do not. (<bold>E</bold>) Ratio of reconstruction errors (no compensation vs. optimal compensation) across a large range of Gabor stimuli. For most stimuli, no compensation is necessary, but for a few stimuli (mostly those showing edges with horizontal orientations) the errors are substantially reduced if the network compensates. (<bold>F</bold>) Schematic of compensation in high-dimensional spaces. In the intact state (left), a stimulus (black arrow) is represented through the firing of four neurons (colored arrows, representing the decoding vectors of the neurons, weighted by their firing rates). If the grey neuron is knocked out, one possibility to restore the representation may be to modify the firing rates of the remaining neurons (center). However, in higher-dimensional spaces, the three remaining arrows will not be sufficient to reach any stimulus position, so that this possibility is usually ruled out. Rather, additional neurons will need to be recruited (right) in order to restore the stimulus representation. These neurons may have contributed only marginally (or not at all) to the initial stimulus representation, because their contribution was too costly. In the absence of the grey neuron, however, they have become affordable. If no combination of neurons allows the system to reach the stimulus position, then the recovery boundary has been crossed.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.012">http://dx.doi.org/10.7554/eLife.12454.012</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig8-v2"/></fig></p><p>The more complicated pattern of firing rate changes occurs for two reasons. First, neurons represent more than the direction of a grating—they represent a 12 × 12 image patch, i.e., a vector in a high-dimensional space (<xref ref-type="fig" rid="fig8">Figure 8F</xref>). Such a vector will generally be represented by the firing of many different neurons, each of which contributes with its decoding vector, <inline-formula><mml:math id="inf169"><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, weighted by its firing rate, <inline-formula><mml:math id="inf170"><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>. However, these neurons will rarely point exactly in the right (stimulus) direction, and only their combined effort allows them to represent the stimulus. When some of the neurons contributing to this stimulus representation are knocked out, the network will recruit from the pool of all neurons whose decoding vectors are non-orthogonal to the stimulus vector. In turn, each of these remaining neurons gets assigned a new firing rate such that the cost term in <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> is minimized. Second, high-dimensional spaces literally provide a lot of space. Whereas stacking 20 neurons in a two-dimensional space (as in <xref ref-type="fig" rid="fig5">Figure 5E,F</xref>) immediately causes crowding, with neighboring neurons sharing a substantial overlap of information, stacking e.g. 1000 neurons in a 100-dimensional space causes no such thing. Rather, neurons can remain almost independent, while sharing only small amounts of information. As a consequence, not a single pair of the naturally trained decoding weights in our model will point in similar directions. In other words, when we knock out a set of neurons, there are no similarly tuned neurons that could change their firing rates in order to restore the representation. Rather, the compensation for a single lost neuron will require the concerted effort of several other neurons, and many of the required changes can be small and subtle. However, all of these changes will seek to restore the lost information, and cells will shift their tuning towards that of the lost neurons.</p><p>As a consequence of this additional complexity, we find that firing rates at the anti-preferred direction also increase (<xref ref-type="fig" rid="fig8">Figure 8B,D</xref>). A key reason for this behavior is that many neurons are strongly tuned to orientation, but only weakly tuned to direction, so that eliminating neurons with <inline-formula><mml:math id="inf171"><mml:msup><mml:mn>0</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula> degree direction preference also eliminates some of the representational power at the anti-preferred direction.</p><p>Finally, although our model is simply a (positive) sparse coding model, we note that most of its predictions are consistent with experiments in the cat visual cortex, in which sites with specific orientation or direction tuning are silenced using GABA (<xref ref-type="bibr" rid="bib18">Crook et al., 1996</xref>, <xref ref-type="bibr" rid="bib19">1997</xref>, <xref ref-type="bibr" rid="bib20">1998</xref>) (<xref ref-type="fig" rid="fig9">Figure 9</xref> and <xref ref-type="fig" rid="fig9s1">Figure 9—figure supplement 1</xref>), while recording the firing rates of nearby neurons. Neurons that escape silencing in the cat visual cortex also shift their tuning curves towards the preferred directions of the silenced neurons (<xref ref-type="fig" rid="fig9">Figure 9A</xref>). More specifically, three types of changes were found: (1) Neurons whose preferred direction was different to that of the silenced neurons (PD<inline-formula><mml:math id="inf172"><mml:mrow><mml:mi/><mml:mo>&gt;</mml:mo><mml:msup><mml:mn>22.5</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>) will increase their firing rates at the knocked-out direction and broaden their tuning (see <xref ref-type="fig" rid="fig9">Figure 9A</xref>, top row for an example). (2) Neurons whose preferred direction was opposite to the silenced neurons will increase their firing rates towards the knocked out direction (see <xref ref-type="fig" rid="fig9">Figure 9A</xref>, middle row for an example). (3) Neurons whose preferred direction was similar to the silenced neurons (PD<inline-formula><mml:math id="inf173"><mml:mrow><mml:mi/><mml:mo>&lt;</mml:mo><mml:msup><mml:mn>22.5</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>) will either increase their firing to the knocked out direction (see <xref ref-type="fig" rid="fig9">Figure 9A</xref>, bottom row) or decrease their firing to the knocked out direction (data not shown).<fig-group><fig id="fig9" position="float"><object-id pub-id-type="doi">10.7554/eLife.12454.013</object-id><label>Figure 9.</label><caption><title>Tuning curves and inactivation experiments: Comparison between recordings from visual cortex and the V1 model.</title><p>(<bold>A</bold>) Recordings of cat visual cortex neurons both before (middle column) and after (right column) the GABA-ergic knock out of neighboring neurons (left column). The tuning curves of all neurons are shown in polar coordinates. The firing rates of all neurons increase in the direction of the preferred direction of the silenced neurons (red cross). Each row illustrates the response of a different test neuron to silencing. Examples are selected for ease of comparison with the theory. Knock-out measurements were obtained using multi-unit recording, and single-unit recordings were obtained for neurons that were not subject to silencing.</p><p>(<bold>B</bold>) A set of similarly tuned neurons are selected for the artificial knock out in our V1 model. The tuning curve of a test neuron is shown before the selected neurons are knocked out (middle column) and after optimal compensation (right column). Each row illustrates the response of a different test neuron to neuron loss. Following the optimal compensation, the neurons remaining after cell loss shift their tuning curves towards the preferred direction of the knocked out neurons (indicated by a red cross). (<bold>C</bold>) Histogram of changes in the firing rate at preferred stimulus orientations following GABA-ergic silencing. Firing rate change for neurons with tuning preferences that are similar to the recorded neurons (iso-orientation inactivation) are counted separately to changes in neurons with different tuning preferences (cross-orientation inactivation).</p><p>(<bold>D</bold>) Histogram firing rate changes in the V1 model, same format as C. In B and D we knock out <inline-formula><mml:math id="inf174"><mml:mrow><mml:mn>50</mml:mn><mml:mo lspace="0pt" rspace="3.5pt">%</mml:mo></mml:mrow></mml:math></inline-formula> of neurons with preferred directions across a range of <inline-formula><mml:math id="inf175"><mml:msup><mml:mn>50</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula> (see also <xref ref-type="fig" rid="fig9s1">Figure 9—figure supplement 1</xref>).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.013">http://dx.doi.org/10.7554/eLife.12454.013</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig9-v2"/><permissions><copyright-statement>© 1996 The American Physiological Society. All Rights Reserved</copyright-statement><copyright-year>1996</copyright-year><copyright-holder>The American Physiological Society</copyright-holder><license><license-p><xref ref-type="fig" rid="fig9">Figure 9A</xref> has been adapted with permission from The American Physiological Society</license-p></license></permissions><permissions><copyright-statement>© 1992 Society of Neuroscience. All Rights Reserved</copyright-statement><copyright-year>1992</copyright-year><copyright-holder>Society of Neuroscience</copyright-holder><license><license-p><xref ref-type="fig" rid="fig9">Figure 9A</xref> has been adapted with permission from Society of Neuroscience</license-p></license></permissions><permissions><copyright-statement>© 1992 Society of Neuroscience. All Rights Reserved</copyright-statement><copyright-year>1992</copyright-year><copyright-holder>Society of Neuroscience</copyright-holder><license><license-p><xref ref-type="fig" rid="fig9">Figure 9C</xref> is reproduced with permission from Society of Neuroscience</license-p></license></permissions></fig><fig id="fig9s1" position="float" specific-use="child-fig"><object-id pub-id-type="doi">10.7554/eLife.12454.014</object-id><label>Figure 9—figure supplement 1.</label><caption><title>Histograms of experimental responses to neuron silencing in V1, compared to theoretical predictions using a range of different parameters.</title><p>(<bold>A</bold>) Histogram of changes in the firing rate at preferred stimulus orientations following GABA-ergic silencing. Firing rate change for neurons with tuning preferences that are similar to the recorded neurons (iso-orientation inactivation) are counted separately to changes in neurons with different tuning preferences (cross-orientation inactivation). These results are reproduced from Crook et al, 1992, see also <xref ref-type="fig" rid="fig9">Figure 9C</xref>. (<bold>B</bold>) Histograms of preferred compensation firing rate changes in positive sparse coding neurons, again with iso-orientation and cross-orientation neurons counted separately. Each histogram corresponds to the theoretical prediction obtained by knocking out different percentages of neurons (25%, 50%, 75% and 100%), across different ranges of preferred directions (at <inline-formula><mml:math id="inf176"><mml:msup><mml:mn>0</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula> only, from <inline-formula><mml:math id="inf177"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>22.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> to <inline-formula><mml:math id="inf178"><mml:msup><mml:mn>22.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula>, and from <inline-formula><mml:math id="inf179"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>45</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> to <inline-formula><mml:math id="inf180"><mml:msup><mml:mn>45</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula>). We explore the full parameter space of our model, because the exact amount of neuron loss in the experiments from Crook et al (1992) is unknown. We find that when 50% or 75% of neurons with preferred directions at <inline-formula><mml:math id="inf181"><mml:msup><mml:mn>0</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula> are knocked out, the form of the predicted histogram is similar to the experimentally recorded histogram, with a greater proportion of iso-orientation inactivations having an impact on the firing rate at the preferred stimulus orientation, compared to cross-orientation inactivation. In these calculations, we use the same sparse coding model for each histogram, with four times as many neurons as stimulus dimensions.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.014">http://dx.doi.org/10.7554/eLife.12454.014</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig9-figsupp1-v2"/></fig><fig id="fig9s2" position="float" specific-use="child-fig"><object-id pub-id-type="doi">10.7554/eLife.12454.015</object-id><label>Figure 9—figure supplement 2.</label><caption><title>Optimal compensation in V1 models with different degrees of redundancy or over-completeness.</title><p>(<bold>A</bold>) The visual cortex contains many more neurons than input dimensions. To investigate the impact of this over-completeness, we calculate the average change in tuning curve shape following optimal compensation in our sparse coding model of V1 for increasing degrees of over completeness (see Methods). Here, the over completeness factor, <inline-formula><mml:math id="inf182"><mml:mi>K</mml:mi></mml:math></inline-formula> is given by <inline-formula><mml:math id="inf183"><mml:mrow><mml:mi>K</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mi>N</mml:mi><mml:mo>/</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf184"><mml:mi>N</mml:mi></mml:math></inline-formula> is the number of neurons and <inline-formula><mml:math id="inf185"><mml:mi>M</mml:mi></mml:math></inline-formula> is the signal dimension. The form of the tuning curve changes is unaffected by the degree of over-completeness, but there are some fluctuations in the overall change. (<bold>B</bold>) As the degree of over completeness <inline-formula><mml:math id="inf186"><mml:mi>K</mml:mi></mml:math></inline-formula> increases, the average change fluctuates moderately. These fluctuations are the result of inhomogeneities in our V1 model, which have a larger effect when the over-completeness factor is small. (<bold>C</bold>) Similar to A , but for the 2-d bump-shaped tuning curve model. We use the same model as before (<xref ref-type="fig" rid="fig5">Figure and 5E–H</xref>), but with a sparse linear cost instead of a quadratic cost. For each value of <inline-formula><mml:math id="inf187"><mml:mi>K</mml:mi></mml:math></inline-formula>, we choose decoder weights that are evenly spaced on the unit circle. This produces evenly spaced bump-shaped tuning curves. We knock out neurons in this model and calculate the average change in tuning curve. In this case, we can easily calculate the impact of optimal compensation for systems with high degrees of over-completeness, such as the visual cortex because the dimensionality of the problem is much lower. (<bold>D</bold>) The impact of optimal compensation fluctuates moderately for low values of <inline-formula><mml:math id="inf188"><mml:mi>K</mml:mi></mml:math></inline-formula>, as in the sparse coding model. However, as the degree of over completeness increases, the average change in tuning curve shape converges, as the fluctuations average out. The maximum and standard deviation of the average tuning curve change are calculated across all stimulus directions. In both the full sparse coding model and the 2-d model, we knock out neurons with preferred directions between <inline-formula><mml:math id="inf189"><mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mn>22.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf190"><mml:msup><mml:mn>22.5</mml:mn><mml:mi>o</mml:mi></mml:msup></mml:math></inline-formula>.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.12454.015">http://dx.doi.org/10.7554/eLife.12454.015</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-12454-fig9-figsupp2-v2"/></fig></fig-group></p><p>In our sparse coding model, we find increases in firing rates to the knocked-out directions in all three types of neurons (with different direction preference, opposite direction preference, or similar direction preference), see <xref ref-type="fig" rid="fig9">Figure 9B</xref>. We do not observe a decrease in firing to the knocked-out directions. While this mismatch likely points towards the limits of our simplified model (which models a relatively small set of simple cells) in comparison with the data (which examines both simple and complex cells in both V1 and V2), it does not violate the optimal compensation principle. Due to the complexity of interactions in a high-dimensional space, a decrease in firing of a few neurons to the missing directions is not a priori ruled out in our model, as long as there is a net increase to the missing directions across the whole population. Indeed, when increasing the redundancy in our V1 model (e.g. by moving from <inline-formula><mml:math id="inf191"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>288</mml:mn></mml:mrow></mml:math></inline-formula> neurons to <inline-formula><mml:math id="inf192"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>500</mml:mn></mml:mrow></mml:math></inline-formula> neurons while keeping the dimensionality of the stimulus fixed), we find that several neurons start decreasing their firing rates in response to the knocked-out directions, even though the average firing rate changes in the population remain positive (data not shown).</p><p>We emphasize that there are only a few free parameters in our model. Since the decoding weights are learnt from natural images using the (positive) sparse coding model, we are left with the dimensionality of the input space, the number of neurons chosen, and the number of neurons knocked out. The qualitative results are largely independent of these parameters. For instance, the precise proportion of neurons knocked out in the experimental studies (<xref ref-type="bibr" rid="bib17">Crook and Eysel, 1992</xref>) is not known. However, for a range of reasonable parameter choices (50–75% knock out of all neurons with a preferred direction), our predicted tuning curve changes are consistent with the recorded population response to neuron silencing (<xref ref-type="bibr" rid="bib17">Crook and Eysel, 1992</xref>) (<xref ref-type="fig" rid="fig9s1">Figure 9—figure supplement 1B</xref>). Furthermore, if we increase the redundancy of the system by scaling up the number of neurons, but not the number of stimulus dimensions, we shift the recovery boundary to a larger fraction of knocked-out neurons, but we do not change the nature of the compensatory response (<xref ref-type="fig" rid="fig9s2">Figure 9—figure supplement 2A,B</xref>). At high degrees of redundancy (or so-called ‘over-completeness’), quantitive fluctuations in tuning curve responses are averaged out, indicating that optimal compensation becomes invariant to over-completeness (<xref ref-type="fig" rid="fig9s2">Figure 9—figure supplement 2C,D</xref>). Given the few assumptions that enter our model, we believe that the broad qualitative agreement between our theory and the data is quite compelling.</p></sec></sec><sec id="s3" sec-type="discussion"><title>Discussion</title><p>To our knowledge, optimal compensation for neuron loss has not been proposed before. Usually, cell loss or neuron silencing is assumed to be a wholly destructive action, and the immediate neural response is assumed to be pathological, rather than corrective. Synaptic plasticity is typically given credit for the recovery of neural function. For example, synaptic compensation has been proposed as a mechanism for memory recovery following synaptic deletion (<xref ref-type="bibr" rid="bib32">Horn et al., 1996</xref>), and optimal adaptation following perturbations of sensory stimuli (<xref ref-type="bibr" rid="bib66">Wainwright, 1999</xref>) and motor targets (<xref ref-type="bibr" rid="bib58">Shadmehr et al., 2010</xref>; <xref ref-type="bibr" rid="bib13">Braun et al., 2009</xref>; <xref ref-type="bibr" rid="bib40">Kording et al., 2007</xref>) has also been observed, but on a slow time scale consistent with synaptic plasticity. In this work, we have explored the properties of an instantaneous, optimal compensation, that can be implemented without synaptic plasticity, on a much faster time scale, through balanced network dynamics.</p><p>Our work is built upon a connection between two separate theories: the theory of balanced networks, which is widely regarded to be the standard model of cortical dynamics (<xref ref-type="bibr" rid="bib63">van Vreeswijk and Sompolinsky, 1996</xref>, <xref ref-type="bibr" rid="bib64">1998</xref>; <xref ref-type="bibr" rid="bib4">Amit and Brunel, 1997</xref>; <xref ref-type="bibr" rid="bib54">Renart et al., 2010</xref>; <xref ref-type="bibr" rid="bib22">Denève and Machens, 2016</xref>) and the theory of efficient coding, which is arguably our most influential theory of neural computation (<xref ref-type="bibr" rid="bib6">Barlow, 1961</xref>; <xref ref-type="bibr" rid="bib57">Salinas, 2006</xref>; <xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>; <xref ref-type="bibr" rid="bib8">Bell and Sejnowski, 1997</xref>; <xref ref-type="bibr" rid="bib28">Greene et al., 2009</xref>). This connection relies on the following two derivations: (1) We derive a tightly balanced spiking network from a quadratic loss function, following the recent work of (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>; <xref ref-type="bibr" rid="bib10">Boerlin and Denève, 2011</xref>) by focusing on the part of their networks that generate a spike-based representation of the information. (2) We show that the firing rates in these spiking networks also obey a quadratic loss function, albeit with a positivity constraint on the firing rate (<xref ref-type="bibr" rid="bib7">Barrett et al., 2013</xref>). This constrained minimization problem, called quadratic programming, provides a novel link between spiking networks and firing rate calculations. While the importance of positivity constraints has been noted in other contexts (<xref ref-type="bibr" rid="bib42">Lee and Seung, 1999</xref>; <xref ref-type="bibr" rid="bib34">Hoyer, 2003</xref>, <xref ref-type="bibr" rid="bib33">2004</xref>; <xref ref-type="bibr" rid="bib57">Salinas, 2006</xref>), here we show its dramatic consequences in shaping tuning curves, which had not been appreciated previously. In turn, we obtain a single normative explanation for the polarity tuning of simple cells (<xref ref-type="fig" rid="fig7">Figure 7D</xref>), tuning curves in the oculomotor system (<xref ref-type="fig" rid="fig6">Figure 6A,B</xref>), and tuning curves in the cricket cercal system (<xref ref-type="fig" rid="fig6">Figure 6E</xref>), as well as the mechanisms underlying the generation of these tuning curves, and the response of these systems to neuron loss.</p><p>Several alternative network models have been proposed that minimize similar loss functions as in our work (<xref ref-type="bibr" rid="bib21">Dayan and Abbott, 2001</xref>; <xref ref-type="bibr" rid="bib56">Rozell et al., 2008</xref>; <xref ref-type="bibr" rid="bib35">Hu et al., 2012</xref>; <xref ref-type="bibr" rid="bib16">Charles et al., 2012</xref>; <xref ref-type="bibr" rid="bib23">Druckmann and Chklovskii, 2012</xref>). However, in all these models, neurons produce positive and negative firing rates (<xref ref-type="bibr" rid="bib21">Dayan and Abbott, 2001</xref>; <xref ref-type="bibr" rid="bib56">Rozell et al., 2008</xref>; <xref ref-type="bibr" rid="bib16">Charles et al., 2012</xref>; <xref ref-type="bibr" rid="bib23">Druckmann and Chklovskii, 2012</xref>), or positive and negative valued spikes (<xref ref-type="bibr" rid="bib35">Hu et al., 2012</xref>). The compensatory response of these systems will be radically different, because oppositely tuned neurons can compensate for each other by increasing their firing rates and changing sign, which is impossible in our networks. Similar reasoning holds for any efficient coding theories that assume positive and negative firing rates.</p><p>Whether general spiking networks support some type of compensation will depend on the specifics of their connectivity (see Materials and methods). For instance, spiking networks that learn to efficiently represent natural images could potentially compensate for neuron loss (<xref ref-type="bibr" rid="bib68">Zylberberg et al., 2011</xref>; <xref ref-type="bibr" rid="bib38">King et al., 2013</xref>). Furthermore, networks designed to generate EI balance through strong recurrent dynamics will automatically restore balance when neurons are lost (<xref ref-type="bibr" rid="bib63">van Vreeswijk and Sompolinsky, 1996</xref>, <xref ref-type="bibr" rid="bib64">1998</xref>; <xref ref-type="bibr" rid="bib4">Amit and Brunel, 1997</xref>; <xref ref-type="bibr" rid="bib54">Renart et al., 2010</xref>). In turn, networks whose representations and computations are based on such randomly balanced networks may be able to compensate for neuron loss as well (<xref ref-type="bibr" rid="bib65">Vogels et al., 2011</xref>; <xref ref-type="bibr" rid="bib30">Hennequin et al., 2014</xref>), as has been shown for neural integrators (<xref ref-type="bibr" rid="bib45">Lim and Goldman, 2013</xref>). However, the optimality or the speed of the compensation is likely to increase with the tightness of the balancing. In turn, the tightness of EI balance is essentially determined by synaptic connectivity, whether through experience-dependent learning of the synaptic connections (<xref ref-type="bibr" rid="bib29">Haas et al., 2006</xref>; <xref ref-type="bibr" rid="bib65">Vogels et al., 2011</xref>; <xref ref-type="bibr" rid="bib12">Bourdoukan et al., 2012</xref>; <xref ref-type="bibr" rid="bib46">Luz and Shamir, 2012</xref>), through scaling laws for random connectivities (<xref ref-type="bibr" rid="bib63">van Vreeswijk and Sompolinsky, 1996</xref>, <xref ref-type="bibr" rid="bib64">1998</xref>; <xref ref-type="bibr" rid="bib4">Amit and Brunel, 1997</xref>; <xref ref-type="bibr" rid="bib54">Renart et al., 2010</xref>), or by design, via the decoding weights of linear readouts, as in our case (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>; <xref ref-type="bibr" rid="bib7">Barrett et al., 2013</xref>). Future work may resolve the commonalities and differences of these approaches.</p><p>The principle of optimal compensation is obviously an idealization, and any putative compensatory mechanism of an actual neural system may be more limited. That said, we have catalogued a series of experiments in which pharmacologically induced changes in neural activities and in behavior can be explained in terms of optimal compensation. These experiments were not originally conducted to test any specific compensatory mechanisms, and so, the results of each individual experiment were explained by separate, alternative mechanisms (<xref ref-type="bibr" rid="bib3">Aksay et al., 2007</xref>; <xref ref-type="bibr" rid="bib27">Gonçalves et al., 2014</xref>; <xref ref-type="bibr" rid="bib44">Libersat and Mizrahi, 1996</xref>; <xref ref-type="bibr" rid="bib48">Mizrahi and Libersat, 1997</xref>; <xref ref-type="bibr" rid="bib18">Crook et al., 1996</xref>, <xref ref-type="bibr" rid="bib19">1997</xref>, <xref ref-type="bibr" rid="bib20">1998</xref>). The advantage of our optimal compensation theory is that it provides a simple, unifying explanation for all these experiments. Whether it is the correct explanation can only be answered through further experimental research.</p><p>To guide such research, we can use our theory to make a number of important predictions about the impact of neural damage on neural circuits. First, we can predict how tuning curves change shape to compensate for neuron loss. Specifically, neurons throughout the network will, on average, increase their firing rates to the signals that specifically activated the dead neurons. This happens because the remaining neurons automatically seek to carry the informational load of the knocked out neurons (which is equivalent to maintaining a balance of excitation and inhibition). This is a strong prediction of our theory, and as such, an observation inconsistent with this prediction would invalidate our theory. There have been very few experiments that measure neural tuning before and after neuron silencing, but in the visual cortex, where this has been done, our predictions are consistent with experimental observations (<xref ref-type="fig" rid="fig9">Figure 9</xref>).</p><p>Our second prediction is that optimal compensation is extremely fast—faster than the time scale of neural spiking. This speed is possible because optimal compensation is supported by the tight balance of excitation and inhibition, which responds rapidly to neuron loss—just as balanced networks can respond rapidly to changes in inputs (<xref ref-type="bibr" rid="bib54">Renart et al., 2010</xref>; <xref ref-type="bibr" rid="bib64">van Vreeswijk and Sompolinsky, 1998</xref>, <xref ref-type="bibr" rid="bib63">1996</xref>). We are not aware of any experiments that have explicitly tested the speed of firing rate changes following neuron silencing. In the pharmacological silencing of direction-selective cells in the visual cortex, the time scales of the reagents are too slow to out-rule the possibility that there is some synaptic plasticity (<xref ref-type="bibr" rid="bib18">Crook et al., 1996</xref>, <xref ref-type="bibr" rid="bib19">1997</xref>, <xref ref-type="bibr" rid="bib20">1998</xref>). Nonetheless, these experiments are consistent with our prediction, because the changes observed in tuning curve shape are at least as fast, if not faster than the speed of pharmacological silencing. Ideally, these predictions could be tested using neuronal ablations or optogenetic silencing.</p><p>Finally, we predict that all neural systems have a cell loss recovery boundary, beyond which neural function disintegrates. Existing measurements from the oculomotor system (<xref ref-type="bibr" rid="bib3">Aksay et al., 2007</xref>) seem to be consistent with this prediction (<xref ref-type="fig" rid="fig6">Figure 6</xref>). We predict that this recovery boundary coincides with a disruption in the balance of excitation and inhibition. This has not been explored experimentally, although the disruption of balance has recently been implicated in a range of neural disorders such as epilepsy (<xref ref-type="bibr" rid="bib15">Bromfield, 2006</xref>) and schizophrenia (<xref ref-type="bibr" rid="bib67">Yizhar et al., 2011</xref>). Anecdotally, there have been many unreported experiments where neural ablation has failed to cause a measurable behavioral effect. Our theory suggests that such ‘failed’ lesion experiments may be far more interesting than previously thought, and that the boundary between a measurable and unnoticeable behavioral effect deserves specific attention. Indeed, the properties of a recovery boundary may also shed light on the progression of neurodegenerative diseases—especially those that are characterized by a period of asymptomatic cell loss, followed by a transition to a disabled symptomatic state, as in Alzheimer’s disease and stroke (<xref ref-type="bibr" rid="bib41">Leary and Saver, 2003</xref>). We speculate that these transitions occur at the recovery boundary of the diseased system. If this were the case, then an accumulation of asymptomatic damage, through aging for example, or through acute conditions such as silent stroke, will increase the susceptibility of the brain to symptomatic damage, by moving it closer to the recovery boundary.</p><p>These predictions, and more broadly, the principle of optimal compensation that we have developed here, promise to be useful across a number of areas. First, as a neuroscience tool, our work provides a framework for the interpretation of experimental manipulations such as pharmacological silencing (<xref ref-type="bibr" rid="bib3">Aksay et al., 2007</xref>), lesion studies (<xref ref-type="bibr" rid="bib37">Keck et al., 2008</xref>) and optogenetic perturbations (<xref ref-type="bibr" rid="bib25">Fenno et al., 2011</xref>; <xref ref-type="bibr" rid="bib43">Li et al., 2016</xref>). Second, in the study of neural computation, optimal compensation may be a useful guiding principle, because plausible models of neural computation should be designed specifically to withstand the type of damage that the brain can withstand. Finally, our work may provide new perspectives on how neurodegenerative diseases impact behavior through neural networks, by generalizing the theory of efficient coding from the intact brain state to the damaged brain state (<xref ref-type="bibr" rid="bib50">Morrison and Hof, 1997</xref>; <xref ref-type="bibr" rid="bib14">Bredesen et al., 2006</xref>).</p></sec><sec id="s4" sec-type="materials|methods"><title>Materials and methods</title><p>We have described the properties of optimal compensation, and given a variety of examples of optimal compensation across a range of systems. Here, we present further technical details. First, we describe how we tune spiking networks to represent signals optimally, including both networks that obey Dale’s law and those that do not. Next, we explain quadratic programming with an analytically tractable example. We then specify our choice of parameters for each figure. For the high-dimensional sparse coding example, we describe how we calculate sparse coding receptive fields and direction tuning curves. Finally, we provide additional details on the knock-out calculations, and we prove that our spiking model is tightly balanced and performs optimal compensation. The Matlab code that we used to generate all the figures in this paper is published online (<ext-link ext-link-type="uri" xlink:href="http://TBD">http://github.com/machenslab/spikes</ext-link>).</p><sec id="s4-1"><title>Derivation of network model using spikes</title><p>In this section, we derive the connectivity and dynamics of a network that can optimally compensate for neuron loss. For simplicity, we will for now ignore the constraint that neurons need to be either excitatory or inhibitory, which will be revisited in the next section. We consider a network of <inline-formula><mml:math id="inf193"><mml:mi>N</mml:mi></mml:math></inline-formula> leaky integrate-and-fire neurons receiving time-varying inputs <inline-formula><mml:math id="inf194"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM69">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo maxsize="120%" minsize="120%">(</mml:mo><mml:mrow id="XM73"><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM70">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM74" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM75"><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM71">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM76" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM77"><mml:msub><mml:mi>x</mml:mi><mml:mi>M</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM72">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo maxsize="120%" minsize="120%">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf195"><mml:mi>M</mml:mi></mml:math></inline-formula> is the dimension of the input and <inline-formula><mml:math id="inf196"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM78">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> is the <inline-formula><mml:math id="inf197"><mml:msup><mml:mi>j</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math></inline-formula> input signal. In response to this input, the network produces spike trains <inline-formula><mml:math id="inf198"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">𝐬</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM79">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM83"><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM80">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM84" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM85"><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM81">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM86" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM87"><mml:msub><mml:mi>s</mml:mi><mml:mi>N</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM82">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf199"><mml:mrow><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM88">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mo largeop="true" symmetric="true">∑</mml:mo><mml:mi>l</mml:mi></mml:msub><mml:mrow><mml:mi>δ</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM89"><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:msubsup><mml:mi>t</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msubsup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula> is the spike train of the <inline-formula><mml:math id="inf200"><mml:msup><mml:mi>i</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math></inline-formula> neuron and <inline-formula><mml:math id="inf201"><mml:mrow><mml:mo>{</mml:mo><mml:msubsup id="XM90"><mml:mi>t</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msubsup><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> are the spike times of that neuron. Here, we describe the general formulation of our framework for arbitrary networks with <inline-formula><mml:math id="inf202"><mml:mrow><mml:mi>N</mml:mi><mml:mo>≥</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:math></inline-formula>.</p><p>A neuron fires a spike whenever its membrane potential exceeds a spiking threshold. We can write this as <inline-formula><mml:math id="inf203"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&gt;</mml:mo><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf204"><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> is the membrane potential of neuron <inline-formula><mml:math id="inf205"><mml:mi>i</mml:mi></mml:math></inline-formula> and <inline-formula><mml:math id="inf206"><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> is the spiking threshold. The dynamics of the membrane potentials are given by:<disp-formula id="equ5"><label>(5)</label><mml:math id="m5"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mi>λ</mml:mi><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mi>g</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mrow><mml:mi mathvariant="normal">Ω</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>σ</mml:mi><mml:mrow><mml:mi>V</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf207"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> is the connection strength from neuron <inline-formula><mml:math id="inf208"><mml:mi>k</mml:mi></mml:math></inline-formula> to neuron <inline-formula><mml:math id="inf209"><mml:mi>i</mml:mi></mml:math></inline-formula>, <inline-formula><mml:math id="inf210"><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> is the connection strength from input <inline-formula><mml:math id="inf211"><mml:mi>j</mml:mi></mml:math></inline-formula> to neuron <inline-formula><mml:math id="inf212"><mml:mi>i</mml:mi></mml:math></inline-formula>, <inline-formula><mml:math id="inf213"><mml:mrow><mml:mi>g</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msub id="XM92"><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> is a function (or functional) applied to the input <inline-formula><mml:math id="inf214"><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math></inline-formula>, <inline-formula><mml:math id="inf215"><mml:mi>λ</mml:mi></mml:math></inline-formula> is the neuron leak and <inline-formula><mml:math id="inf216"><mml:msub><mml:mi>σ</mml:mi><mml:mi>V</mml:mi></mml:msub></mml:math></inline-formula> is the standard deviation of intrinsic neural noise, represented by a white noise term <inline-formula><mml:math id="inf217"><mml:msub><mml:mi>η</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> (<xref ref-type="bibr" rid="bib39">Knight, 1972</xref>; <xref ref-type="bibr" rid="bib21">Dayan and Abbott, 2001</xref>). For brevity, we will not explicitly indicate the time-dependency of variables. That said, we note that the input signals, <inline-formula><mml:math id="inf218"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM93">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, the voltages, <inline-formula><mml:math id="inf219"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM94">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, and the spike trains, <inline-formula><mml:math id="inf220"><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM95">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, are all time-dependent quantities, whereas the thresholds, <inline-formula><mml:math id="inf221"><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, the leak, <inline-formula><mml:math id="inf222"><mml:mi>λ</mml:mi></mml:math></inline-formula>, and the connection strengths, <inline-formula><mml:math id="inf223"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> and <inline-formula><mml:math id="inf224"><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, are all constants. The feedforward term, <inline-formula><mml:math id="inf225"><mml:mrow><mml:mi>g</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msub id="XM96"><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, is a placeholder for any feedforward input into the networks, but also for slower recurrent synaptic inputs that are not explicitly modeled here, such as the slow synapses in <xref ref-type="bibr" rid="bib11">Boerlin et al. (2013)</xref>. (Indeed, including slower recurrent dynamics does not affect the fast compensatory response of the network.) When a neuron spikes, its membrane potential is reset to the value <inline-formula><mml:math id="inf226"><mml:mrow><mml:mi>V</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>. For ease of presentation, we include this reset in the self-connections <inline-formula><mml:math id="inf227"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, i.e., we assume that the self-connections are negative, <inline-formula><mml:math id="inf228"><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&lt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula>, so that the reset is given by <inline-formula><mml:math id="inf229"><mml:mrow><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula>.</p><p>We assume that this network provides a representation of the input signal <inline-formula><mml:math id="inf230"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:math></inline-formula> using a simple linear decoder, rewritten from <xref ref-type="disp-formula" rid="equ1">Equation 1</xref>,<disp-formula id="equ6"><label>(6)</label><mml:math id="m6"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo>=</mml:mo><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf231"><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:math></inline-formula> is the fixed contribution of neuron <inline-formula><mml:math id="inf232"><mml:mi>k</mml:mi></mml:math></inline-formula> to the signal, and <inline-formula><mml:math id="inf233"><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:math></inline-formula> is the instantaneous firing rate of neuron <inline-formula><mml:math id="inf234"><mml:mi>k</mml:mi></mml:math></inline-formula>. We generally refer to <inline-formula><mml:math id="inf235"><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:math></inline-formula> as the vector of readout or decoding weights. The instantaneous firing rate, <inline-formula><mml:math id="inf236"><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:math></inline-formula>, is a time-dependent quantity that we obtain by filtering the spike train with an exponential filter:<disp-formula id="equ7"><label>(7)</label><mml:math id="m7"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mo>∫</mml:mo><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="normal">∞</mml:mi></mml:mrow></mml:mrow></mml:msubsup><mml:msup><mml:mi>e</mml:mi><mml:mrow><mml:mo>−</mml:mo><mml:msup><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">′</mml:mi></mml:mrow></mml:msup><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>τ</mml:mi></mml:mrow></mml:msup><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>−</mml:mo><mml:msup><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">′</mml:mi></mml:mrow></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mi>d</mml:mi><mml:msup><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">′</mml:mi></mml:mrow></mml:msup><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf237"><mml:mi>τ</mml:mi></mml:math></inline-formula> is the time-scale of the filtering. This firing rate definition is particularly informative because it has the form of a simple model of a postsynaptic potential, which is a biologically important quantity. Note that the units of this firing rate are given by <inline-formula><mml:math id="inf238"><mml:mi>τ</mml:mi></mml:math></inline-formula>, so we must multiply by <inline-formula><mml:math id="inf239"><mml:msup><mml:mi>τ</mml:mi><mml:mrow><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:math></inline-formula>Hz to obtain units of Hz.</p><p>Our goal is to tune all the parameters of this network so that it produces appropriate spike trains at appropriate times to provide an accurate representation of the input <inline-formula><mml:math id="inf240"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:math></inline-formula>, both before and after cell loss (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>; <xref ref-type="bibr" rid="bib12">Bourdoukan et al., 2012</xref>; <xref ref-type="bibr" rid="bib7">Barrett et al., 2013</xref>). We measure the accuracy of the representation with the loss function, rewritten from <xref ref-type="disp-formula" rid="equ2">Equation 2</xref>,<disp-formula id="equ8"><label>(8)</label><mml:math id="m8"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>E</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>with <inline-formula><mml:math id="inf241"><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mo id="XM101">⋅</mml:mo><mml:mo>)</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:math></inline-formula> denoting an inner product, and <inline-formula><mml:math id="inf242"><mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM102" mathvariant="bold">𝐫</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mo largeop="true" symmetric="true">∑</mml:mo><mml:mi>k</mml:mi></mml:msub><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:mrow></mml:math></inline-formula>. We then require our network to obey the following rule: at a given time point <inline-formula><mml:math id="inf243"><mml:mi>t</mml:mi></mml:math></inline-formula>, each neuron only fires a spike whenever a spike reduces the loss function,<disp-formula id="equ9"><label>(9)</label><mml:math id="m9"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>E</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mtext>no</mml:mtext><mml:mspace width="thickmathspace"/><mml:mspace width="thinmathspace"/><mml:mtext>spike</mml:mtext><mml:mo stretchy="false">)</mml:mo><mml:mspace width="thickmathspace"/><mml:mspace width="thickmathspace"/><mml:mo>&gt;</mml:mo><mml:mspace width="thickmathspace"/><mml:mspace width="thickmathspace"/><mml:mi>E</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mtext>with</mml:mtext><mml:mspace width="thickmathspace"/><mml:mspace width="thinmathspace"/><mml:mtext>spike</mml:mtext><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Then, since a spike changes the rate by <inline-formula><mml:math id="inf244"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>→</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mrow></mml:math></inline-formula>, and hence the signal estimate by <inline-formula><mml:math id="inf245"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="normal">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="false">→</mml:mo><mml:mrow><mml:mover><mml:mi mathvariant="normal">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>, we can restate this spiking rule for the <inline-formula><mml:math id="inf246"><mml:mi>i</mml:mi></mml:math></inline-formula>-th neuron as:<disp-formula id="equ10"><label>(10)</label><mml:math id="m10"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mspace width="1em"/><mml:mrow><mml:mo>&gt;</mml:mo></mml:mrow><mml:mspace width="1em"/><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo mathvariant="bold" stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mrow/></mml:mover><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf247"><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> is the Kronecker delta. By expanding the right-hand-side, and canceling equal terms, this spiking rule can be rewritten as<disp-formula id="equ11"><label>(11)</label><mml:math id="m11"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo mathvariant="bold" stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:mi>β</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mtext> </mml:mtext><mml:mo>&gt;</mml:mo><mml:mtext> </mml:mtext><mml:mfrac><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>β</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>This equation describes a rule under which neurons fire to produce spikes that reduce the loss function. Since a neuron <inline-formula><mml:math id="inf248"><mml:mi>i</mml:mi></mml:math></inline-formula> spikes whenever its voltage <inline-formula><mml:math id="inf249"><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> exceeds its threshold <inline-formula><mml:math id="inf250"><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, we can interpret the left-hand-side of this spiking condition (<xref ref-type="disp-formula" rid="equ11">Equation 11</xref>) as the membrane potential of the <inline-formula><mml:math id="inf251"><mml:msup><mml:mi>i</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math></inline-formula> neuron:<disp-formula id="equ12"><label>(12)</label><mml:math id="m12"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>≡</mml:mo><mml:msubsup><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:mi>β</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>and the right-hand-side as the spiking threshold for that neuron:<disp-formula id="equ13"><label>(13)</label><mml:math id="m13"><mml:mrow><mml:mrow><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>≡</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mo>⊤</mml:mo></mml:msubsup><mml:mo>⁢</mml:mo><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mi>β</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:mfrac></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p><p>We can identify the connectivity and the parameters that produce optimal coding spike trains by calculating the derivative of the membrane potential (as interpreted in <xref ref-type="disp-formula" rid="equ12">Equation 12</xref>) and matching the result to the dynamical equations of our integrate-and-fire network (<xref ref-type="disp-formula" rid="equ5">Equation 5</xref>):<disp-formula id="equ14"><label>(14)</label><mml:math id="m14"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>−</mml:mo><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:mi>β</mml:mi><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>From <xref ref-type="disp-formula" rid="equ6">Equation 6</xref>, we obtain <inline-formula><mml:math id="inf252"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>d</mml:mi><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mrow><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mi>d</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula> and from <xref ref-type="disp-formula" rid="equ7">Equation 7</xref> we obtain <inline-formula><mml:math id="inf253"><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo>/</mml:mo><mml:mi>τ</mml:mi></mml:mrow></mml:mrow><mml:mo>+</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula>, which yields a simple differential equation for the readout:<disp-formula id="equ15"><label>(15)</label><mml:math id="m15"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>τ</mml:mi></mml:mfrac><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>By inserting these expressions into <xref ref-type="disp-formula" rid="equ14">Equation 14</xref> we obtain:<disp-formula id="equ16"><label>(16)</label><mml:math id="m16"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>τ</mml:mi></mml:mfrac><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>τ</mml:mi></mml:mfrac><mml:mi>β</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi>β</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Finally, using the voltage definition from <xref ref-type="disp-formula" rid="equ12">Equation 12</xref> to write <inline-formula><mml:math id="inf254"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mi>β</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> we can replace the second term on the right hand side and obtain:<disp-formula id="equ17"><label>(17)</label><mml:math id="m17"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>τ</mml:mi></mml:mfrac><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mi>τ</mml:mi></mml:mfrac></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>This equation describes the voltage dynamics of a neuron that produces spikes to represent signal <inline-formula><mml:math id="inf255"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:math></inline-formula>. If we now compare this equation with our original integrate-and-fire network, <xref ref-type="disp-formula" rid="equ5">Equation 5</xref>, we see that these are equivalent if<disp-formula id="equ18"><mml:math id="m18"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-18_6"><mml:mtext>(18)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mo>−</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-19_6"><mml:mtext>(19)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mo stretchy="false">]</mml:mo><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-20_6"><mml:mtext>(20)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mi>g</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mfrac><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mi>τ</mml:mi></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-21_6"><mml:mtext>(21)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mi>λ</mml:mi></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>τ</mml:mi></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-22_6"><mml:mtext>(22)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mfrac><mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>β</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Here, the notation <inline-formula><mml:math id="inf256"><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mi id="XM121" mathvariant="bold">𝐳</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mi>j</mml:mi></mml:msub></mml:math></inline-formula> refers to the <inline-formula><mml:math id="inf257"><mml:mi>j</mml:mi></mml:math></inline-formula>-th element of the vector <inline-formula><mml:math id="inf258"><mml:mi mathvariant="bold">𝐳</mml:mi></mml:math></inline-formula>. A network of integrate-and-fire neurons with these parameters and connection strengths can produce spike trains that represent the signal <inline-formula><mml:math id="inf259"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:math></inline-formula> to a high degree of accuracy. Elements of this calculation have been produced before (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>), but are reproduced here for the sake of completeness. Also, it has been shown that this connectivity can be learned using simple spike timing-dependent plasticity rules (W. Brendel, R. Bourdoukan, P. Vertechi, et al, unpublished observations; <xref ref-type="bibr" rid="bib12">Bourdoukan et al. (2012)</xref>), so extensive fine-tuning is not required to obtain these spiking networks. We note that the input into the network consists of a combination of the original signal, <inline-formula><mml:math id="inf260"><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math></inline-formula>, and its derivative, <inline-formula><mml:math id="inf261"><mml:mrow><mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:math></inline-formula>. This can be interpreted in several ways. First, we can think of the original signal, <inline-formula><mml:math id="inf262"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM122">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, as a filtered version of the actual input, so that <inline-formula><mml:math id="inf263"><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mi>λ</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM123">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf264"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM124">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> is the actual input (and note that <inline-formula><mml:math id="inf265"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mi>λ</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>). Second, we can think of this as a biophysical computation, in the sense that the neuron receives two types of input, the original signal input, <inline-formula><mml:math id="inf266"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM125">t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, and its derivative, <inline-formula><mml:math id="inf267"><mml:mrow><mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>d</mml:mi></mml:mrow><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:math></inline-formula>. The latter could be computed through a simple circuit that combines direct excitatory signal inputs with delayed inhibitory signal inputs (e.g. through feedforward inhibition).</p><p>Our derivation of network dynamics directly from our loss function allows us to interpret the properties of this network in terms of neural function. Each spike can be interpreted as a greedy error reduction mechanism—it moves <inline-formula><mml:math id="inf268"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> closer to the signal <inline-formula><mml:math id="inf269"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. This error reduction is communicated back to the network through recurrent connectivity, thereby reducing the membrane potential of the other neurons. The membrane potential, in turn, can be interpreted as a representation error—it is determined by a linear projection of <inline-formula><mml:math id="inf270"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> onto the neuron’s decoding weights, <inline-formula><mml:math id="inf271"><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> (<xref ref-type="disp-formula" rid="equ12">Equation 12</xref>). Following this interpretation, whenever the error becomes too big, the voltage becomes too big and it reaches threshold. This produces a spike, which reduces the error, and so on.</p><p>We can also understand these network dynamics in terms of attractor dynamics. This network implements a point attractor—firing rates evolve towards a stable fixed point in N-dimensional firing rate space. The location of this point attractor depends on neural input and network connectivity. When a neuron dies, the point attractor is projected into a subspace given by <inline-formula><mml:math id="inf272"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula>, where neuron <inline-formula><mml:math id="inf273"><mml:mi>k</mml:mi></mml:math></inline-formula> is the neuron that has died.</p><p>Note that in this derivation, we used a quadratic cost. This cost increases the value of the spiking threshold (<xref ref-type="disp-formula" rid="equ13">Equation 13</xref>) and the spiking reset (<xref ref-type="disp-formula" rid="equ18">Equation 18</xref>). We can also derive network parameters for alternative cost term choices. For example, if we use a linear cost, we simply need to drop the second term (<inline-formula><mml:math id="inf274"><mml:mrow><mml:mi>β</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>) in <xref ref-type="disp-formula" rid="equ18">Equation 18</xref>, while keeping all other parameters the same. In other words, we can implement a quadratic cost by increasing the spiking threshold and the spiking reset, and we can implement a linear cost by increasing the spiking threshold without increasing the spiking reset. In this way, the spiking threshold, and the reset determine the cost function. It is conceivable that these variables may be learned, just as network connectivity may be learned. Alternatively, these values may be predetermined for various brain areas, depending on the computational target of each brain area.</p></sec><sec id="s4-2"><title>Derivation of network model with separate excitatory and inhibitory populations</title><p>When these ideas are applied to large and heterogeneous networks, we run into one problem concerning their biological interpretation. Individual neurons in these networks can sometimes target postsynaptic neurons with both excitatory and inhibitory synapses, so that they violate Dale’s law. To avoid this problem, we consider a network that consists of separate pools of excitatory and inhibitory neurons. The external signals feed only into the excitatory population, and the inhibitory population remains purely local. This scenario is captured by the equations,<disp-formula id="equ19"><mml:math id="m19"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-23_3"><mml:mtext>(23)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mi>λ</mml:mi><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mi>g</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mi>σ</mml:mi><mml:mrow><mml:mi>V</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-24_3"><mml:mtext>(24)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mi>λ</mml:mi><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mi>σ</mml:mi><mml:mrow><mml:mi>V</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>The four connectivity matrices, <inline-formula><mml:math id="inf275"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula>, <inline-formula><mml:math id="inf276"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula>, <inline-formula><mml:math id="inf277"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mo>⁢</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula>, <inline-formula><mml:math id="inf278"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mo>⁢</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> are all assumed to have only positive entries, which enforces Dale’s law in this network. The neuron’s self-resets are now explicitly captured in the terms <inline-formula><mml:math id="inf279"><mml:mrow><mml:msubsup><mml:mi>R</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf280"><mml:mrow><mml:msubsup><mml:mi>R</mml:mi><mml:mi>i</mml:mi><mml:mi>I</mml:mi></mml:msubsup><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:mrow></mml:math></inline-formula>, and are no longer part of the connectivity matrices themselves. We will now show how to design the four connectivity matrices such that the resulting network becomes functionally equivalent to the networks in the previous section. To do so, we apply the basic ideas outlined in <xref ref-type="bibr" rid="bib11">Boerlin et al. (2013</xref>), and simplified due to W. Brendel, R. Bourdoukan, P. Vertechi, and the authors (personal communication).</p><p>We start with the network in the previous section, as described in <xref ref-type="disp-formula" rid="equ5">Equation 5</xref>, and split its (non-Dalian) recurrent connectivity matrix, <inline-formula><mml:math id="inf281"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, into self-resets, excitatory connections, and inhibitory connections. The self-resets are simply the diagonal entries of <inline-formula><mml:math id="inf282"><mml:mrow><mml:mo>-</mml:mo><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, see <xref ref-type="disp-formula" rid="equ18">Equation 18</xref>,<disp-formula id="equ20"><label>(25)</label><mml:math id="m20"><mml:mrow><mml:mrow><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mo>⊤</mml:mo></mml:msubsup><mml:mo>⁢</mml:mo><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>β</mml:mi></mml:mpadded></mml:mrow></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>where the choice of signs is dictated by the sign conventions in <xref ref-type="disp-formula" rid="equ19">Equation 23</xref> and <xref ref-type="disp-formula" rid="equ19">Equation 24</xref>. The excitatory connections are the positive entries of <inline-formula><mml:math id="inf283"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, for which we define<disp-formula id="equ21"><label>(26)</label><mml:math id="m21"><mml:mrow><mml:mrow><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:mpadded width="+1.7pt"><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mrow id="XM128"><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mo>⊤</mml:mo></mml:msubsup><mml:mo>⁢</mml:mo><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mi>β</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:msub></mml:mpadded></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>where the notation <inline-formula><mml:math id="inf284"><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mi id="XM129">x</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:msub></mml:math></inline-formula> denotes a threshold-linear function, so that <inline-formula><mml:math id="inf285"><mml:mrow><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mi id="XM130">x</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:msub><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:math></inline-formula> if <inline-formula><mml:math id="inf286"><mml:mrow><mml:mi>x</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf287"><mml:mrow><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mi id="XM131">x</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula> otherwise. The inhibitory connections are the negative, off-diagonal entries of <inline-formula><mml:math id="inf288"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, for which we write<disp-formula id="equ22"><label>(27)</label><mml:math id="m22"><mml:mrow><mml:mrow><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mrow id="XM132"><mml:mrow><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mo>⊤</mml:mo></mml:msubsup><mml:mo>⁢</mml:mo><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:mi>β</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:msub><mml:mo>-</mml:mo><mml:mrow><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>⁢</mml:mo><mml:mpadded width="+1.7pt"><mml:msub><mml:mi>R</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mpadded></mml:mrow></mml:mrow></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p><p>With these three definitions, we can re-express the recurrent connectivity as <inline-formula><mml:math id="inf289"><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>-</mml:mo><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:mrow><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>⁢</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>.</p><p>Using this split of the non-Dalian connectivity matrix, we can trivially rewrite <xref ref-type="disp-formula" rid="equ5">Equation 5</xref> as an equation for an excitatory population,<disp-formula id="equ23"><label>(28)</label><mml:math id="m23"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mi>λ</mml:mi><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mi>g</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>s</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msub><mml:mi>σ</mml:mi><mml:mrow><mml:mi>V</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>which is identical to <xref ref-type="disp-formula" rid="equ19">Equation 23</xref> above, except for the term with the inhibitory synapses, <inline-formula><mml:math id="inf290"><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, on the right-hand-side. Here, the inhibitory synapses are multiplied with <inline-formula><mml:math id="inf291"><mml:msubsup><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:math></inline-formula> rather than <inline-formula><mml:math id="inf292"><mml:msubsup><mml:mi>s</mml:mi><mml:mi>k</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:math></inline-formula>, and their number is identical to the number of excitatory synapses. Accordingly, this term violates Dale’s law, and we need to replace it with a genuine input from the inhibitory population. Since this non-Dalian term consists of a series of delta-functions, we can only replace it approximately, which will suffice for our purposes. We simply require that the genuine inhibitory input approximates the non-Dalian term on the level of the postsynaptic potentials, i.e., the level of filtered spike trains,<disp-formula id="equ24"><label>(29)</label><mml:math id="m24"><mml:mrow><mml:mrow><mml:mrow><mml:munderover><mml:mo largeop="true" movablelimits="false" symmetric="true">∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>E</mml:mi></mml:msup></mml:munderover><mml:mrow><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mrow></mml:mrow><mml:mo>≈</mml:mo><mml:mrow><mml:munderover><mml:mo largeop="true" movablelimits="false" symmetric="true">∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>I</mml:mi></mml:msup></mml:munderover><mml:mrow><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>⁢</mml:mo><mml:mpadded width="+1.7pt"><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:mpadded></mml:mrow></mml:mrow></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p><p>Here the left-hand-side is the given non-Dalian input, and the right-hand-side is the genuine inhibitory input, which we are free to manipulate and design.</p><p>The solution to the remaining design question is simple. In the last section, we showed how to design arbitrary spiking networks such that they track a given set of signals. Following these recipes, we assume that the inhibitory population output optimally tracks the (filtered) spike trains of the excitatory population. More specifically, we assume that we can reconstruct the instantaneous firing rates of the excitatory neurons, <inline-formula><mml:math id="inf293"><mml:msubsup><mml:mi>r</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:math></inline-formula>, by applying a linear readout to the instantaneous firing rates of the inhibitory neurons, <inline-formula><mml:math id="inf294"><mml:msubsup><mml:mi>r</mml:mi><mml:mi>j</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:math></inline-formula>, so that<disp-formula id="equ25"><label>(30)</label><mml:math id="m25"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msup><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Note that all entries of <inline-formula><mml:math id="inf295"><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>j</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:math></inline-formula>, the inhibitory decoding weights, must be positive. If the estimate of the excitatory firing rates closely tracks the real firing rates, then we can fulfil <xref ref-type="disp-formula" rid="equ24">Equation 29</xref>.</p><p>To obtain this relation, we will assume that the inhibitory population minimizes its own loss function,<disp-formula id="equ26"><label>(31)</label><mml:math id="m26"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup><mml:mo>−</mml:mo><mml:msup><mml:mrow><mml:mover><mml:mi mathvariant="bold">r</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msup><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mi>β</mml:mi><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where the first term is the error incurred in reconstructing the excitatory firing rates, and the second term is a cost associated with the firing of the inhibitory neurons. Apart from the replacement of the old input signal, <inline-formula><mml:math id="inf296"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:math></inline-formula>, by the new ‘input signal’, <inline-formula><mml:math id="inf297"><mml:msup><mml:mi mathvariant="bold">𝐫</mml:mi><mml:mi>E</mml:mi></mml:msup></mml:math></inline-formula>, this is exactly the same loss function as in <xref ref-type="disp-formula" rid="equ8">Equation 8</xref>. An important difference is that here the number of input signals, which corresponds to the number of excitatory neurons, may be larger than the number of output spike trains, which corresponds to the number of inhibitory neurons. Our spiking networks will in this case still minimize the mean-square-error above, though the representation could be lossy. Since the effective dimensionality explored by the instantaneous firing rates of the excitatory population is limited by the dimensionality of the input signal space, however, these losses are generally small for our purposes.</p><p>Given the above loss function, we can redo all derivations from the previous section, to obtain the connections, thresholds, and resets for the inhibitory population. Defining the short-hand<disp-formula id="equ27"><label>(32)</label><mml:math id="m27"><mml:mrow><mml:mrow><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mi>I</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:msubsup id="XM136"><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mi>I</mml:mi></mml:msubsup><mml:mo>)</mml:mo></mml:mrow><mml:mo>⊤</mml:mo></mml:msup><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>k</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:msup><mml:mi>β</mml:mi><mml:mi>I</mml:mi></mml:msup><mml:mo>⁢</mml:mo><mml:mpadded width="+1.7pt"><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mpadded></mml:mrow></mml:mrow></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>we find that<disp-formula id="equ28"><mml:math id="m28"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-33_7"><mml:mtext>(33)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>−</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-34_7"><mml:mtext>(34)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mo stretchy="false">]</mml:mo><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-35_7"><mml:mtext>(35)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mfrac><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mn>2</mml:mn></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-36_7"><mml:mtext>(36)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Here the first equation is equivalent to <xref ref-type="disp-formula" rid="equ18">Equation 18</xref>, except for the different sign convention (<inline-formula><mml:math id="inf298"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi><mml:mo>⁢</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> enters negatively in <xref ref-type="disp-formula" rid="equ19">Equation 24</xref>), and for the subtraction of the self-reset term, which is not part of the recurrent connectivity. The second equation is equivalent to <xref ref-type="disp-formula" rid="equ18">Equation 19</xref>. The third equation is equivalent to <xref ref-type="disp-formula" rid="equ18">Equation 22</xref>, and the fourth equation is the self-reset term, containing the diagonal elements of <xref ref-type="disp-formula" rid="equ18">Equation 18</xref>. Note that, due to the positivity of the inhibitory decoding weights, the two connectivity matrices have only positive entries, as presupposed above in <xref ref-type="disp-formula" rid="equ19">Equation 24</xref>. Consequently, the inhibitory subnetwork obeys Dale’s law.</p><p>In a last step, we replace the excitatory spike trains in <xref ref-type="disp-formula" rid="equ23">Equation 28</xref> with their inhibitory approximation. Specifically, we rewrite <xref ref-type="disp-formula" rid="equ24">Equation 29</xref> as<disp-formula id="equ29"><mml:math id="m29"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-37_9"><mml:mtext>(37)</mml:mtext></mml:mtd><mml:mtd><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>E</mml:mi></mml:msup></mml:mrow></mml:munderover><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mtd><mml:mtd><mml:mi/><mml:mo>≈</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>E</mml:mi></mml:msup></mml:mrow></mml:munderover><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msubsup><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mi>k</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-38_5"><mml:mtext>(38)</mml:mtext></mml:mtd><mml:mtd/><mml:mtd><mml:mi/><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>E</mml:mi></mml:msup></mml:mrow></mml:munderover><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>I</mml:mi></mml:msup></mml:mrow></mml:munderover><mml:msub><mml:mi>W</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:msubsup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mi>I</mml:mi></mml:msubsup><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-39_3"><mml:mtext>(39)</mml:mtext></mml:mtd><mml:mtd/><mml:mtd><mml:mi/><mml:mo>≡</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mi>I</mml:mi></mml:msup></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>I</mml:mi></mml:msubsup><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where we used <xref ref-type="disp-formula" rid="equ25">Equation 30</xref> in the approximation step. This approximation generally works very well for larger networks; in smaller networks, finite size effects come into play.</p><p>Finally, when we take into account the results from the previous section, write <inline-formula><mml:math id="inf299"><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:math></inline-formula> for the excitatory decoder weight of the <inline-formula><mml:math id="inf300"><mml:mi>i</mml:mi></mml:math></inline-formula>-th neuron, and introduce the short-hand<disp-formula id="equ30"><label>(40)</label><mml:math id="m30"><mml:mrow><mml:mrow><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mi>E</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:msubsup id="XM139"><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup><mml:mo>)</mml:mo></mml:mrow><mml:mo>⊤</mml:mo></mml:msup><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>k</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:msup><mml:mi>β</mml:mi><mml:mi>E</mml:mi></mml:msup><mml:mo>⁢</mml:mo><mml:mpadded width="+1.7pt"><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mpadded></mml:mrow></mml:mrow></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>then we find that the excitatory subnetwork has the connections, thresholds, and resets (compare <xref ref-type="disp-formula" rid="equ20">Equation 25</xref>–<xref ref-type="disp-formula" rid="equ22">Equation 27</xref>),<disp-formula id="equ31"><mml:math id="m31"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-41_6"><mml:mtext>(41)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mo stretchy="false">]</mml:mo><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-42_6"><mml:mtext>(42)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">Ω</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:mo>−</mml:mo><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-43_6"><mml:mtext>(43)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">Ω</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>I</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:munderover><mml:mrow><mml:mo maxsize="1.623em" minsize="1.623em">(</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>]</mml:mo></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:mo maxsize="1.623em" minsize="1.623em">)</mml:mo></mml:mrow><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-44_6"><mml:mtext>(44)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>≡</mml:mo><mml:mfrac><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mn>2</mml:mn></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-45_6"><mml:mtext>(45)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:msubsup><mml:mi>H</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Importantly, the EI network therefore consists of two populations, one excitatory, one inhibitory, both of which minimize a loss function. As a consequence, the excitatory subnetwork will compensate optimally as long as the inhibitory subnetwork remains fully functional. In this limit, the excitatory subnetwork is essentially identical to the networks discussed in the previous section. The inhibitory subnetwork will also compensate optimally until its recovery boundary is reached. In the following, we will focus on one subnetwork (and one loss function again). For notational simplicity, we will leave out the superscript references ‘<inline-formula><mml:math id="inf301"><mml:mi>E</mml:mi></mml:math></inline-formula>’.</p></sec><sec id="s4-3"><title>Tuning curves and quadratic programming</title><p>For constant input signals, the instantaneous firing rates of the neurons will fluctuate around some mean value. Our goal is to determine this mean value. We will start with the most general case, and rewrite the instantaneous firing rates as <inline-formula><mml:math id="inf302"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>, were <inline-formula><mml:math id="inf303"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> is a zero-mean ’noise’ term that captures the fluctuations of the instantaneous firing rates around its mean value. Note that these fluctuations may depend on the neuron’s mean rate. In turn, neglecting the costs for a moment, we can average the objective function, <xref ref-type="disp-formula" rid="equ8">Equation 8</xref>, over time to obtain<disp-formula id="equ32"><mml:math id="m32"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-46_3"><mml:mtext>(46)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo fence="false" stretchy="false">⟨</mml:mo><mml:mi>E</mml:mi><mml:msub><mml:mo fence="false" stretchy="false">⟩</mml:mo><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mrow><mml:mo maxsize="1.623em" minsize="1.623em">⟨</mml:mo></mml:mrow><mml:mrow><mml:mo maxsize="1.2em" minsize="1.2em">(</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:msup><mml:mrow><mml:mo maxsize="1.2em" minsize="1.2em">)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:msub><mml:mrow><mml:mo maxsize="1.623em" minsize="1.623em">⟩</mml:mo></mml:mrow><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-47_3"><mml:mtext>(47)</mml:mtext></mml:mtd><mml:mtd/><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo fence="false" stretchy="false">⟨</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mo fence="false" stretchy="false">⟩</mml:mo><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo>.</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>For larger networks, we can assume that the spike trains of neurons are only weakly correlated, so that <inline-formula><mml:math id="inf304"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo fence="false" stretchy="false">⟨</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mo fence="false" stretchy="false">⟩</mml:mo><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mtext>Var</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>. Here, <inline-formula><mml:math id="inf305"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtext>Var</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> is the variance of the noise term. We obtain<disp-formula id="equ33"><label>(48)</label><mml:math id="m33"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo fence="false" stretchy="false">⟨</mml:mo><mml:mi>E</mml:mi><mml:msub><mml:mo fence="false" stretchy="false">⟩</mml:mo><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:mo fence="false" stretchy="false">‖</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msup><mml:mo fence="false" stretchy="false">‖</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mtext>Var</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>We furthermore notice that the spike train statistics are often Poisson (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>), in which case we can make the replacement <inline-formula><mml:math id="inf306"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtext>Var</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>η</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>. The loss function then becomes a quadratic function of the mean firing rate, which needs to be minimized under a positivity constraint on the mean firing rate. This type of problem is known as ‘quadratic programming’ in the literature. In this study, we focused on networks for which the contributions of the firing rate fluctuations can be neglected, which is generally the case for sufficiently small readout weights and membrane voltage noise (see <xref ref-type="fig" rid="fig4s3">Figure 4—figure supplement 3</xref>). In this case, we obtain the loss function used in <xref ref-type="disp-formula" rid="equ3">Equation 3</xref>,<disp-formula id="equ34"><label>(49)</label><mml:math id="m34"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo fence="false" stretchy="false">⟨</mml:mo><mml:mi>E</mml:mi><mml:msub><mml:mo fence="false" stretchy="false">⟩</mml:mo><mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">r</mml:mi><mml:mo mathvariant="bold" stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>with the cost term included again.</p><p>In general, quadratic programming is mathematically intractable, so the objective function must be minimized numerically. However, in networks with a small number of neurons, we can solve the problem analytically and gain some insight into the nature of quadratic programming. Here, we do this for the two neuron example (<xref ref-type="fig" rid="fig4">Figure 4A</xref>).</p><p>In this example, we assumed that the first neuron contributes with <inline-formula><mml:math id="inf307"><mml:mrow><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM197">w</mml:mi><mml:mo>,</mml:mo><mml:mi id="XM198">c</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> to the readout, and the second neuron with <inline-formula><mml:math id="inf308"><mml:mrow><mml:msub><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM199"><mml:mo>-</mml:mo><mml:mi>w</mml:mi></mml:mrow><mml:mo>,</mml:mo><mml:mi id="XM200">c</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. Accordingly, the firing rates <inline-formula><mml:math id="inf309"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf310"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> are given by the solution to the following equation:<disp-formula id="equ35"><label>(50)</label><mml:math id="m35"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>arg</mml:mi><mml:mo>⁡</mml:mo><mml:munder><mml:mo form="prefix" movablelimits="true">min</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mspace width="thinmathspace"/><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:munder><mml:mrow><mml:mo>[</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>x</mml:mi><mml:mo>−</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>w</mml:mi><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi>w</mml:mi><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>B</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>]</mml:mo></mml:mrow><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf311"><mml:mi>x</mml:mi></mml:math></inline-formula> is the variable signal, and <inline-formula><mml:math id="inf312"><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:math></inline-formula> is the fixed background signal. The positivity constraint partitions the solution of this equation into three regions, determined by the value of <inline-formula><mml:math id="inf313"><mml:mi>x</mml:mi></mml:math></inline-formula>: region <inline-formula><mml:math id="inf314"><mml:msub><mml:mi class="ltx_font_mathcaligraphic">ℛ</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inline-formula> where <inline-formula><mml:math id="inf315"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf316"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>, region <inline-formula><mml:math id="inf317"><mml:msub><mml:mi class="ltx_font_mathcaligraphic">ℛ</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></inline-formula> where <inline-formula><mml:math id="inf318"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf319"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>, and region <inline-formula><mml:math id="inf320"><mml:msub><mml:mi class="ltx_font_mathcaligraphic">ℛ</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math></inline-formula> where <inline-formula><mml:math id="inf321"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf322"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> (<xref ref-type="fig" rid="fig4s1">Figure 4—figure supplement 1A</xref>). In region 2, we can then easily solve <xref ref-type="disp-formula" rid="equ35">Equation 50</xref> by setting the derivative of our loss function to zero. This gives <inline-formula><mml:math id="inf323"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">r</mml:mi><mml:mo mathvariant="bold" stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msup><mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:mrow><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">c</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">⊤</mml:mi></mml:mrow></mml:msup><mml:mrow><mml:mi mathvariant="bold">c</mml:mi></mml:mrow><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mrow><mml:mn mathvariant="bold">1</mml:mn></mml:mrow><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:mrow><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mrow><mml:mi mathvariant="bold">c</mml:mi></mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>B</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> where <inline-formula><mml:math id="inf324"><mml:mrow><mml:mi mathvariant="bold">𝐰</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM214">w</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM215"><mml:mo>-</mml:mo><mml:mi>w</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, <inline-formula><mml:math id="inf325"><mml:mrow><mml:mi mathvariant="bold">𝐜</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM216">c</mml:mi><mml:mo>,</mml:mo><mml:mi id="XM217">c</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, and <inline-formula><mml:math id="inf326"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mn mathvariant="bold">1</mml:mn></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> is the identity matrix. Looking at this equation, we see that <inline-formula><mml:math id="inf327"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> when <inline-formula><mml:math id="inf328"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>w</mml:mi></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf329"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> when <inline-formula><mml:math id="inf330"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>w</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula>. Therefore, the firing rate solution for region two is valid when <inline-formula><mml:math id="inf331"><mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>w</mml:mi></mml:mrow></mml:mrow><mml:mo>≤</mml:mo><mml:mi>x</mml:mi><mml:mo>≤</mml:mo><mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>w</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula>. For <inline-formula><mml:math id="inf332"><mml:mrow><mml:mi>x</mml:mi><mml:mo>≥</mml:mo><mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:mrow><mml:mo>/</mml:mo><mml:mi>w</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula>, we have <inline-formula><mml:math id="inf333"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> because of the positivity constraint in <xref ref-type="disp-formula" rid="equ35">Equation 50</xref>. This is region 3. We can calculate <inline-formula><mml:math id="inf334"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> by setting <inline-formula><mml:math id="inf335"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> and then minimizing the loss function. This gives <inline-formula><mml:math id="inf336"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mi>w</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mi>c</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mi>w</mml:mi><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>B</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>. Similarly, for <inline-formula><mml:math id="inf337"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>x</mml:mi><mml:mo>≤</mml:mo><mml:mo>−</mml:mo><mml:mi>c</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mi>b</mml:mi></mml:msub><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>w</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula> we have <inline-formula><mml:math id="inf338"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> because of the positivity constraint. This is region one and we obtain <inline-formula><mml:math id="inf339"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mi>w</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mi>c</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mo>−</mml:mo><mml:mi>w</mml:mi><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>B</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>. The firing rates within each region are given by a simple linear projection of <inline-formula><mml:math id="inf340"><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM225">x</mml:mi><mml:mo>,</mml:mo><mml:msub id="XM226"><mml:mi>r</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, although the size and direction of this projection is different in each region. As such, the solution to this quadratic programming problem is a piece-wise linear function of <inline-formula><mml:math id="inf341"><mml:mi>x</mml:mi></mml:math></inline-formula>.</p><p>In networks with larger numbers of neurons, the solution will still be a piece-wise linear function of <inline-formula><mml:math id="inf342"><mml:mi>x</mml:mi></mml:math></inline-formula>, although there will be more regions and the firing rate solutions are more complicated because more neurons are simultaneously active. In contrast, the transformation from firing rates to <inline-formula><mml:math id="inf343"><mml:msup><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>′</mml:mo></mml:msup></mml:math></inline-formula> is very simple (<xref ref-type="disp-formula" rid="equ6">Equation 6</xref>). It is given by a simple linear transformation, and is region independent (<xref ref-type="fig" rid="fig4s1">Figure 4—figure supplement 1B</xref>).</p></sec><sec id="s4-4"><title>Readout weights and cost terms: 1-d and 2-d example</title><p>There are a number of free parameters in our model, such as the cost terms and the readout weights. The choice of these values determine the precise shape of tuning curves. In general, however, the precise values of these terms have little influence on the coding capability of our system, once certain properties have been satisfied, which we will outline here.</p><p>The cost term that we used for the examples in <xref ref-type="fig" rid="fig1">Figures 1</xref>–<xref ref-type="fig" rid="fig6">6</xref> is a quadratic cost, <inline-formula><mml:math id="inf344"><mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM228" mathvariant="bold">𝐫</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mo largeop="true" symmetric="true">∑</mml:mo><mml:mi>k</mml:mi></mml:msub><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:mrow></mml:math></inline-formula>. This cost term encourages the system to find a solution in which all neurons share in the signal representation. (Here, and in the following, we will no longer distinguish <inline-formula><mml:math id="inf345"><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, the instantaneous firing rate used in the spiking network, and <inline-formula><mml:math id="inf346"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>r</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>, the mean firing rates used in quadratic programming. The appropriate notation will be determined by the context.) The cost term for <xref ref-type="fig" rid="fig7">Figures 7</xref>–<xref ref-type="fig" rid="fig9">9</xref>, the V1 model, is a linear cost, <inline-formula><mml:math id="inf347"><mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM229" mathvariant="bold">𝐫</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mo largeop="true" symmetric="true">∑</mml:mo><mml:mi>k</mml:mi></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula>. This cost term limits the overall number of spikes, and generally encourages sparse solutions, in which most neurons contribute very little to the signal representation. Regardless of this choice, our general predictions about optimal compensation are qualitatively similar, as long as the cost term does not dominate the loss function.</p><p>The other important parameters that we must choose are the decoding or readout weights. In <xref ref-type="fig" rid="fig2">Figure 2</xref>, the decoding weights of the excitatory population were drawn from a Gaussian distribution with mean <inline-formula><mml:math id="inf348"><mml:mrow><mml:msub><mml:mi>μ</mml:mi><mml:mi>E</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>, and standard deviation <inline-formula><mml:math id="inf349"><mml:mrow><mml:msub><mml:mi>σ</mml:mi><mml:mi>E</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0.2</mml:mn></mml:mrow></mml:math></inline-formula>. For the inhibitory population, we used a mean <inline-formula><mml:math id="inf350"><mml:mrow><mml:msub><mml:mi>μ</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0.3</mml:mn></mml:mrow></mml:math></inline-formula> and a standard deviation <inline-formula><mml:math id="inf351"><mml:mrow><mml:msub><mml:mi>σ</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mn>0.03</mml:mn></mml:mrow></mml:math></inline-formula>. For the networks in <xref ref-type="fig" rid="fig3">Figures 3</xref>–<xref ref-type="fig" rid="fig6">6</xref>, we have used regularly spaced decoding weights, with the addition of some random noise. The parameter values that we used are plotted in <xref ref-type="fig" rid="fig3">Figure 3D</xref>, <xref ref-type="fig" rid="fig4">Figure 4A–C</xref>, left column, and <xref ref-type="fig" rid="fig5">Figure 5A,E,I</xref>.</p><p>All of our quadratic programming and optimal compensation predictions for tuning curve shapes still hold for alternative choices of readout weights, once the following properties are satisfied. First, it is important that the readout vectors span the space of the signal that we want our network to represent. Otherwise, the system will not be able to represent signals along certain directions, or compensate for neuron loss. Second, it is important to set the scale of the readout, so that the cost does not dominate. There is a natural scaling that we can use to avoid such problems. We require the size of firing rates and the readout to be independent of network size. From <inline-formula><mml:math id="inf352"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi mathvariant="script">𝒪</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula>, it follows that <inline-formula><mml:math id="inf353"><mml:mrow><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM231"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>. As a consequence, the off-diagonal elements of the recurrent connectivity are small <inline-formula><mml:math id="inf354"><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM232"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, for <inline-formula><mml:math id="inf355"><mml:mrow><mml:mi>i</mml:mi><mml:mo>≠</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:math></inline-formula> (<xref ref-type="disp-formula" rid="equ18">Equation 18</xref>), and if we assume that the diagonal elements are on the same order of magnitude, then <inline-formula><mml:math id="inf356"><mml:mrow><mml:mi>β</mml:mi><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM233"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>. This scaling provides a principled basis for parameter choices in our model.</p><p>We may also want to scale our decoder weights without changing the shape of our tuning curve prediction (<xref ref-type="fig" rid="fig4s3">Figure 4—figure supplement 3B</xref>). To do this, the cost parameter <inline-formula><mml:math id="inf357"><mml:mi>β</mml:mi></mml:math></inline-formula> and the membrane potential leak <inline-formula><mml:math id="inf358"><mml:mi>λ</mml:mi></mml:math></inline-formula> must also be scaled together. Specifically, if the readout weights are given by <inline-formula><mml:math id="inf359"><mml:mrow><mml:mo>{</mml:mo><mml:mrow id="XM234"><mml:mi>α</mml:mi><mml:mo>×</mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf360"><mml:mi>α</mml:mi></mml:math></inline-formula> is a scaling parameter that characterizes the size of the decoder weights and <inline-formula><mml:math id="inf361"><mml:mrow><mml:mo>{</mml:mo><mml:msub id="XM235"><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> are fixed decoder weights, then the spiking cost parameter must be set to <inline-formula><mml:math id="inf362"><mml:mrow><mml:msup><mml:mi>α</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>×</mml:mo><mml:mi>β</mml:mi></mml:mrow></mml:math></inline-formula> and the membrane potential leak must be set to <inline-formula><mml:math id="inf363"><mml:mrow><mml:mi>α</mml:mi><mml:mo>×</mml:mo><mml:mi>λ</mml:mi></mml:mrow></mml:math></inline-formula>. We can see that this preserves the shape of tuning curves by looking at the resulting structure of our loss function (<xref ref-type="disp-formula" rid="equ2">Equation 2</xref>):<disp-formula id="equ36"><label>(51)</label><mml:math id="m36"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="left left" columnspacing="1em" rowspacing="4pt"><mml:mtr><mml:mtd><mml:mi>E</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mtd><mml:mtd><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo><mml:mo>⋅</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mi>α</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>β</mml:mi><mml:munderover><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msup><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>As before, the minimum of this loss function gives firing rates in units of the inverse membrane potential leak <inline-formula><mml:math id="inf364"><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM242"><mml:mi>α</mml:mi><mml:mo>⁢</mml:mo><mml:mi>λ</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></inline-formula>. Therefore, we must divide <inline-formula><mml:math id="inf365"><mml:mi mathvariant="bold">𝐫</mml:mi></mml:math></inline-formula> by <inline-formula><mml:math id="inf366"><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM243"><mml:mi>α</mml:mi><mml:mo>⁢</mml:mo><mml:mi>λ</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></inline-formula> to obtain firing rates in units of Hz. Our loss function then becomes:<disp-formula id="equ37"><mml:math id="m37"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-52_1"><mml:mtext>(52)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mi>E</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mi>λ</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo><mml:mo>⋅</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mi>λ</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mi>α</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>β</mml:mi><mml:munder><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msup><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mi>λ</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-53_1"><mml:mtext>(53)</mml:mtext></mml:mtd><mml:mtd/><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mo>⋅</mml:mo><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>λ</mml:mi><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:munder><mml:mo movablelimits="false">∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msup><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mi>λ</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>This loss function is independent of <inline-formula><mml:math id="inf367"><mml:mi>α</mml:mi></mml:math></inline-formula>, and so, using this scaling the optimal tuning curves will have the same shape for all values of <inline-formula><mml:math id="inf368"><mml:mi>α</mml:mi></mml:math></inline-formula>.</p></sec><sec id="s4-5"><title>Readout weights and cost terms: V1 example</title><p>There are many possible choices of decoder weights <inline-formula><mml:math id="inf369"><mml:mrow><mml:mo>{</mml:mo><mml:msub id="XM266"><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> that provide a faithful representation of a signal. In positive sparse coding, we choose the decoder weights that provide the most efficient signal representation, for a sparse cost term (<inline-formula><mml:math id="inf370"><mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM267" mathvariant="bold">𝐫</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mo largeop="true" symmetric="true">∑</mml:mo><mml:mi>k</mml:mi></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula>), under the constraint that firing rates must be positive. Here, we describe how we calculate these positive sparse coding weights, which we will use in several of our figures (<xref ref-type="fig" rid="fig7">Figures 7</xref>–<xref ref-type="fig" rid="fig9">9</xref> and <xref ref-type="fig" rid="fig9s1">Figure 9—figure supplement 1</xref>–2).</p><p>We use the signal vector <inline-formula><mml:math id="inf371"><mml:mrow><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msub id="XM268"><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi id="XM269" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:msub id="XM270"><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi id="XM271" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:msub id="XM272"><mml:mi>x</mml:mi><mml:mi>M</mml:mi></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> to denote an image patch, where each element <inline-formula><mml:math id="inf372"><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math></inline-formula> represents a pixel from the image patch (<xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>). We quantify the efficiency of a sparse representation using the following loss function:<disp-formula id="equ38"><label>(54)</label><mml:math id="m38"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>E</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>⟨</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mo>⟩</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>β</mml:mi><mml:mrow><mml:mo>⟨</mml:mo><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>⟩</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf373"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mo>⟨</mml:mo><mml:mrow><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo></mml:mrow><mml:mo>⟩</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> denotes an average across image patches. This is simply <xref ref-type="disp-formula" rid="equ2">Equation 2</xref> with a sparse cost term, averaged over image patches. The first term in this loss function is the image representation error. The second term quantifies the sparsity of the representation. The decoding filters that minimize this loss function will be the positive sparse coding filters for natural images.</p><p>We assume that the decoding filters are optimized to represent natural images, such as forest scenes, flowers, sky, water and other images from nature. Natural images are chosen because they are representative of the images that surround animals throughout evolution. We randomly select 2000 image patches of size <inline-formula><mml:math id="inf374"><mml:mrow><mml:mn>12</mml:mn><mml:mo>×</mml:mo><mml:mn>12</mml:mn></mml:mrow></mml:math></inline-formula> from eight natural images taken from Van Hateren’s Natural Image Database (<xref ref-type="bibr" rid="bib62">van Hateren and van der Schaaf, 1998</xref>). These images are preprocessed by removing low-order statistics, so that our sparse coding algorithm can more easily learn the higher-order statistical structure of natural images. First of all, images are centered so as to remove first order statistics:<disp-formula id="equ39"><label>(55)</label><mml:math id="m39"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">→</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mo>⟨</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>⟩</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Next, images are whitened, so as to remove second-order statistics:<disp-formula id="equ40"><label>(56)</label><mml:math id="m40"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">𝐱</mml:mi><mml:mo>→</mml:mo><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝐌</mml:mi><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:mrow></mml:msup><mml:mo>⁢</mml:mo><mml:mpadded width="+1.7pt"><mml:mi mathvariant="bold">𝐱</mml:mi></mml:mpadded></mml:mrow></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf375"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">M</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>⟨</mml:mo><mml:mrow><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:msup><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msup></mml:mrow><mml:mo>⟩</mml:mo></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula> is a decorrelating matrix.</p><p>We calculate sparse coding filters by minimizing the loss function (<xref ref-type="disp-formula" rid="equ38">Equation 54</xref>) using a two step procedure. First, for each image patch in a subset of 50 image patches, we calculate the firing rates that minimize the loss function under the constraint that firing rates must be positive:<disp-formula id="equ41"><label>(57)</label><mml:math id="m41"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mi mathvariant="bold">r</mml:mi></mml:mrow><mml:mo>=</mml:mo><mml:mi>arg</mml:mi><mml:mo>⁡</mml:mo><mml:munder><mml:mo form="prefix" movablelimits="true">min</mml:mo><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn><mml:mspace width="thickmathspace"/><mml:mi mathvariant="normal">∀</mml:mi><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:mi>E</mml:mi><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>The positivity constraint reduces the representational power of the neural population, so, to counteract this, we use a large population containing twice as many neurons as signal dimensions, <inline-formula><mml:math id="inf376"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mn>2</mml:mn><mml:mo>⁢</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula> and we initialize our decoder matrix to <inline-formula><mml:math id="inf377"><mml:mrow><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi id="XM280">j</mml:mi><mml:mo>,</mml:mo><mml:mi id="XM281">k</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mi>δ</mml:mi><mml:mrow><mml:mi id="XM282">j</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM283"><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:mrow></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula> to ensure that our neural population can easily span the signal space throughout the sparse coding calculation.</p><p>Next, we update our decoding vectors by stochastic gradient descent on the loss function, using the optimal firing rates calculated in the previous step:<disp-formula id="equ42"><label>(58)</label><mml:math id="m42"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">→</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi>ϵ</mml:mi><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">D</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi>ϵ</mml:mi><mml:mn>2</mml:mn><mml:mrow><mml:mo>⟨</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>−</mml:mo><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="false">)</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>⟩</mml:mo></mml:mrow><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>Decoding weights are normalized for each neuron, so that they do not become arbitrarily large. This calculation is similar to sparse coding calculations performed before (<xref ref-type="bibr" rid="bib51">Olshausen and Field, 1996</xref>), except that we enforce the additional requirement that firing rates must be positive. This constraint was used before for sparse non-negative matrix factorization (<xref ref-type="bibr" rid="bib34">Hoyer, 2003</xref>, <xref ref-type="bibr" rid="bib33">2004</xref>). However, this method requires an additional constraint that decoding weights be strictly positive, so that the non-negative matrix factorization method can be applied. This additional constraint will reduce the efficiency of the representation, because it precludes solutions that may be more efficient, but violate the additional constraint.</p><p>To compare the properties of optimal compensation in this positive sparse coding model to experiment, we calculate the direction tuning of neurons in our model using a protocol similar to that used in the experimental work (<xref ref-type="bibr" rid="bib17">Crook and Eysel, 1992</xref>). Specifically, we drive our model using a directed, edge-like stimulus. These stimuli are Gabor filters, with a profile similar to the sparse coding filters. We calculate the firing rate response of each neuron using <xref ref-type="disp-formula" rid="equ41">Equation 57</xref> for 16 different stimulus directions. For each direction, the Gabor filter is positioned at regularly spaced locations along a line perpendicular to the Gabor filter orientation and the maximum firing rate of each neuron along this line is taken as the firing rate response of that neuron at that direction. These firing rate responses form the direction tuning curves that we can compare to experimental recordings.</p></sec><sec id="s4-6"><title>The impact of neuron loss</title><p>We investigate the impact of neuron loss in our spiking model by simulating the network both before and after neuron loss (<xref ref-type="fig" rid="fig2">Figure 2</xref> and <xref ref-type="fig" rid="fig3">Figure 3</xref>). Specifically, we use the Euler method to iterate the dynamics described by <xref ref-type="disp-formula" rid="equ17">Equation 17</xref> or <xref ref-type="disp-formula" rid="equ19">Equation 23</xref>, <xref ref-type="disp-formula" rid="equ19">Equation 24</xref>, and we measure the readout <inline-formula><mml:math id="inf378"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mover><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>, the spike trains <inline-formula><mml:math id="inf379"><mml:mi mathvariant="bold">𝐬</mml:mi></mml:math></inline-formula>, and the membrane potentials <inline-formula><mml:math id="inf380"><mml:mi mathvariant="bold">𝐕</mml:mi></mml:math></inline-formula>. We simulate the loss of a neuron by setting all the connections to and from that neuron to zero. This is equivalent to silencing a neuron. We continue to measure the network activity and the readout after neuron loss.</p><p>We also calculate the impact of neuron loss on tuning curves with and without optimal compensation (<xref ref-type="fig" rid="fig5">Figure 5</xref>). To calculate tuning curves without compensation we solve <xref ref-type="disp-formula" rid="equ3">Equation 3</xref> in the intact state. We then constrain the firing rates of neurons selected for loss to zero and calculate the impact of this on our signal representation. To calculate the impact of neuron loss with optimal compensation, we solve <xref ref-type="disp-formula" rid="equ4">Equation 4</xref>.</p><p>The integrate-and-fire model that we have described can produce spikes at arbitrarily large firing rates. This can be a problem, especially when neurons die and the remaining neurons compensate with extremely high, unrealistic firing rates. To avoid this, we can include a form of adaptation in our spiking model. Specifically, we can extend our spiking rule so that a neuron <inline-formula><mml:math id="inf381"><mml:mi>i</mml:mi></mml:math></inline-formula> will only spike if its firing rate <inline-formula><mml:math id="inf382"><mml:msub><mml:mi>f</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> is lower than a maximum <inline-formula><mml:math id="inf383"><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mo>⁢</mml:mo><mml:mi>a</mml:mi><mml:mo>⁢</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>. Here, the firing rate <inline-formula><mml:math id="inf384"><mml:mi mathvariant="bold">𝐟</mml:mi></mml:math></inline-formula> is given by the following differential equation:<disp-formula id="equ43"><label>(59)</label><mml:math id="m43"><mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:mi mathvariant="bold">𝐟</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mi mathvariant="bold">𝐟</mml:mi><mml:mo>/</mml:mo><mml:msub><mml:mi>τ</mml:mi><mml:mi>A</mml:mi></mml:msub></mml:mrow></mml:mrow><mml:mo>+</mml:mo><mml:mpadded width="+1.7pt"><mml:mi mathvariant="bold">𝐬</mml:mi></mml:mpadded></mml:mrow></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>and <inline-formula><mml:math id="inf385"><mml:msub><mml:mi>τ</mml:mi><mml:mi>A</mml:mi></mml:msub></mml:math></inline-formula> is the time scale of adaptation. This time scale is much slower than the time scale of the spiking dynamics <inline-formula><mml:math id="inf386"><mml:mi>τ</mml:mi></mml:math></inline-formula>. We use this extended neural model to calculate the recovery boundary in <xref ref-type="fig" rid="fig3">Figure 3J,K</xref>, where we kill neurons in random order.</p><p>In turn, we can compute the firing rates and recovery boundary of this extended integrate-and-fire model using quadratic programming (data not shown). Specifically, the firing rates of this network are given by the solution of the following optimization problem:<disp-formula id="equ44"><label>(60)</label><mml:math id="m44"><mml:mrow><mml:mrow><mml:mrow><mml:mi mathvariant="bold">𝐫</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM287" mathvariant="bold">𝐱</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:mi>arg</mml:mi><mml:mo>⁡</mml:mo><mml:mrow><mml:munder><mml:mi>min</mml:mi><mml:mi>R</mml:mi></mml:munder><mml:mo>⁡</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:mrow><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM288" mathvariant="bold">𝐱</mml:mi><mml:mo rspace="4.2pt">)</mml:mo></mml:mrow></mml:mrow></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf387"><mml:mi>R</mml:mi></mml:math></inline-formula> denotes the set of constraints that the firing rates must satisfy:<disp-formula id="equ45"><label>(61)</label><mml:math id="m45"><mml:mrow><mml:mi>R</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mo>⁢</mml:mo><mml:mi>a</mml:mi><mml:mo>⁢</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>≥</mml:mo><mml:mpadded width="+1.7pt"><mml:mn>0</mml:mn></mml:mpadded><mml:mo rspace="4.2pt">∀</mml:mo><mml:mi>i</mml:mi><mml:mo>;</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mpadded width="+1.7pt"><mml:mn>0</mml:mn></mml:mpadded><mml:mo>∀</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>j</mml:mi></mml:mpadded><mml:mo>∈</mml:mo><mml:mi>X</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:mrow></mml:math></disp-formula></p><p>and where <inline-formula><mml:math id="inf388"><mml:mi>X</mml:mi></mml:math></inline-formula> is the set of all dead (or silenced) neurons.</p><p>To study the effects of redundancy (or overcompleteness) in the V1 model (<xref ref-type="fig" rid="fig9s2">Figure 9—figure supplement 2A</xref>), we define an over-completeness factor, <inline-formula><mml:math id="inf389"><mml:mi>K</mml:mi></mml:math></inline-formula>, given by <inline-formula><mml:math id="inf390"><mml:mrow><mml:mi>K</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mi>N</mml:mi><mml:mo>/</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf391"><mml:mi>N</mml:mi></mml:math></inline-formula> is the number of neurons in the representation and <inline-formula><mml:math id="inf392"><mml:mi>M</mml:mi></mml:math></inline-formula> is the signal dimension. In the sparse coding calculation above, we had <inline-formula><mml:math id="inf393"><mml:mrow><mml:mi>K</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>. To increase the redundancy or overcompleteness of the representation, we generated a new set of readout vectors by two methods. In method one, we randomly drew <inline-formula><mml:math id="inf394"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mi>K</mml:mi><mml:mo>⁢</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula> decoding vectors <inline-formula><mml:math id="inf395"><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM289">K</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:math></inline-formula> from the V1 model and then added multiplicative noise, in order to avoid parallel readout weights. Specifically, the new readout vectors <inline-formula><mml:math id="inf396"><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM290">K</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:math></inline-formula> were obtained from the old readout vectors, <inline-formula><mml:math id="inf397"><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn id="XM291">2</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup></mml:math></inline-formula>, using <inline-formula><mml:math id="inf398"><mml:mrow><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi id="XM292">K</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mrow><mml:msubsup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn id="XM293">2</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:msubsup><mml:mo>⋅</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM294"><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msub><mml:mi mathvariant="bold-italic">𝝃</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mi>a</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM295"><mml:mi>K</mml:mi><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf399"><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM296">1</mml:mn><mml:mo>,</mml:mo><mml:mi id="XM297" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM298"><mml:mn>2</mml:mn><mml:mo>⁢</mml:mo><mml:mi>M</mml:mi></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, <inline-formula><mml:math id="inf400"><mml:mrow><mml:msub><mml:mi>ξ</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒩</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mn id="XM299">0</mml:mn><mml:mo>,</mml:mo><mml:mn id="XM300">0.1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, <inline-formula><mml:math id="inf401"><mml:mrow><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mn>2</mml:mn><mml:mo>⁢</mml:mo><mml:mi>M</mml:mi><mml:mo>⁢</mml:mo><mml:mi>m</mml:mi></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf402"><mml:mrow><mml:mi>m</mml:mi><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM301">0</mml:mn><mml:mo>,</mml:mo><mml:mi id="XM302" mathvariant="normal">…</mml:mi><mml:mo>,</mml:mo><mml:mrow id="XM303"><mml:mrow><mml:mi>K</mml:mi><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. In method two, we also randomly drew decoding vectors from the V1 model, but then shifted the corresponding <inline-formula><mml:math id="inf403"><mml:mrow><mml:mn>12</mml:mn><mml:mo>×</mml:mo><mml:mn>12</mml:mn></mml:mrow></mml:math></inline-formula> image patch randomly in space. Both methods yielded similar results. We used these methods to calculate readout weights for over-complete representations because the sparse coding calculation becomes computationally prohibitive for large values of <inline-formula><mml:math id="inf404"><mml:mi>M</mml:mi></mml:math></inline-formula>.</p></sec><sec id="s4-7"><title>Tight balance of excitation and inhibition</title><p>In simulations of our spiking model, we see that optimal coding generally coincides with a balance of excitatory and inhibitory currents into each neuron (<xref ref-type="fig" rid="fig2">Figure 2G</xref> and <xref ref-type="fig" rid="fig3">Figure 3H,I</xref>). To characterize this balance, we define three currents for each excitatory neuron. First, we define the excitation <inline-formula><mml:math id="inf405"><mml:msub><mml:mi>E</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> as the total input current received through excitatory synapses. Second, we define the inhibition <inline-formula><mml:math id="inf406"><mml:msub><mml:mi>I</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula> as the total input current received through inhibitory synapses. Third, we define the reset current <inline-formula><mml:math id="inf407"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula> as the total current caused by a neuron’s self-reset after an action potential. Since our idealized neuron model uses delta-functions to capture the synaptic currents evoked by single spikes, we smooth the delta-functions in order to obtain more realistic synaptic currents. For simplicity, we use the same filter as in the computation of the instantaneous firing rates, although other filters could be used as well. In the EI network, <xref ref-type="disp-formula" rid="equ19">Equation 23</xref> and <xref ref-type="disp-formula" rid="equ19">Equation 24</xref>, the three currents into the <inline-formula><mml:math id="inf408"><mml:mi>i</mml:mi></mml:math></inline-formula>-th excitatory neuron are then given by<disp-formula id="equ46"><mml:math id="m46"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" displaystyle="true" rowspacing="3pt"><mml:mlabeledtr><mml:mtd id="mjx-eqn-62_4"><mml:mtext>(62)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:munderover><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-63_4"><mml:mtext>(63)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:munderover><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:munderover><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr><mml:mlabeledtr><mml:mtd id="mjx-eqn-64_4"><mml:mtext>(64)</mml:mtext></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mo>=</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="thinmathspace"/><mml:mo>,</mml:mo></mml:mstyle></mml:mtd><mml:mtd/></mml:mlabeledtr></mml:mtable></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>where <inline-formula><mml:math id="inf409"><mml:mrow><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mi>E</mml:mi></mml:msubsup><mml:mo>≡</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> if <inline-formula><mml:math id="inf410"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> (and <inline-formula><mml:math id="inf411"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mi>E</mml:mi></mml:msubsup><mml:mo>≡</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> otherwise), and <inline-formula><mml:math id="inf412"><mml:mrow><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mi>I</mml:mi></mml:msubsup><mml:mo>≡</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> if <inline-formula><mml:math id="inf413"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>x</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>&lt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> (and <inline-formula><mml:math id="inf414"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mi>I</mml:mi></mml:msubsup><mml:mo>≡</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula> otherwise). When the inhibitory subpopulation is not explicitly simulated, we simply set <inline-formula><mml:math id="inf415"><mml:mrow><mml:mrow><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mrow><mml:mo>≡</mml:mo><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula> unless <inline-formula><mml:math id="inf416"><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>&lt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf417"><mml:mrow><mml:mrow><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi><mml:mo>⁢</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msubsup><mml:mo>⁢</mml:mo><mml:msubsup><mml:mi>r</mml:mi><mml:mi>k</mml:mi><mml:mi>I</mml:mi></mml:msubsup></mml:mrow><mml:mo>≡</mml:mo><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>⁢</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:mrow></mml:math></inline-formula> unless <inline-formula><mml:math id="inf418"><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula>.</p><p>Using the above definitions of currents, we can integrate <xref ref-type="disp-formula" rid="equ19">Equation 23</xref> to re-express the voltage of an excitatory neuron as <inline-formula><mml:math id="inf419"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msubsup><mml:mi>V</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>. This voltage is trivially bounded from above by a neuron’s threshold, <inline-formula><mml:math id="inf420"><mml:mrow><mml:msubsup><mml:mi>V</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup><mml:mo>&lt;</mml:mo><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>. Due to the design properties of the network, the voltage is also bounded from below: since the voltage reflects a representation error, neurons with decoding vectors opposite to those of neuron <inline-formula><mml:math id="inf421"><mml:mi>i</mml:mi></mml:math></inline-formula> will keep negative errors in check. If we neglect cost terms, we obtain <inline-formula><mml:math id="inf422"><mml:mrow><mml:msubsup><mml:mi>V</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup><mml:mo>&gt;</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mi>i</mml:mi><mml:mi>E</mml:mi></mml:msubsup></mml:mrow></mml:math></inline-formula>. (Otherwise the bound is lower). Re-expressed for the EI ratio, we obtain the following bounds<disp-formula id="equ47"><label>(65)</label><mml:math id="m47"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfrac><mml:mtext> </mml:mtext><mml:mo>&lt;</mml:mo><mml:mtext> </mml:mtext><mml:mfrac><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfrac><mml:mtext> </mml:mtext><mml:mo>&lt;</mml:mo><mml:mtext> </mml:mtext><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>The EI ratio will therefore approach one (perfect balance) if the inhibitory synaptic currents are much larger than the self-reset currents and voltage thresholds, or, if excitatory currents are cancelled by inhibitory currents rather than by a neuron’s spikes and subsequent self-resets.</p><p>The network does not reach this balanced regime under two conditions. First, if a network has a small redundancy, i.e., the number of neurons, <inline-formula><mml:math id="inf423"><mml:mi>N</mml:mi></mml:math></inline-formula>, is not much larger than the number of input signals, <inline-formula><mml:math id="inf424"><mml:mi>M</mml:mi></mml:math></inline-formula>, then each neuron carries a large load of the representation, and the reset currents become similar in magnitude to the synaptic currents. This is the case for the cricket cercal system, for instance, for which <inline-formula><mml:math id="inf425"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf426"><mml:mrow><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>. Second, if a system approaches the recovery boundary, the representational burden of some neurons also increases a lot, leading to a similar effect. This is the case for the green neuron in <xref ref-type="fig" rid="fig3">Figure 3I</xref>, even after the first k.o, and leads to a more regular firing pattern. In other words, neurons that compensate for neuron loss can sometimes experience excessive excitatory currents, even if the compensation is successful.</p><p>To capture the mechanistic difference between compensation and recovery boundary more clearly, we therefore also defined the ratio of positive to negative currents, <inline-formula><mml:math id="inf427"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>/</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> (<xref ref-type="fig" rid="fig3">Figure 3H</xref>). This ratio is bounded by<disp-formula id="equ48"><label>(66)</label><mml:math id="m48"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:msubsup><mml:mi>R</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msubsup><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>&lt;</mml:mo><mml:mspace width="thinmathspace"/><mml:mfrac><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>&lt;</mml:mo><mml:mspace width="thinmathspace"/><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mfrac><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mspace width="thinmathspace"/><mml:mo>.</mml:mo></mml:mrow></mml:mstyle></mml:math></disp-formula></p><p>and remains close to one as long as there are sufficiently large negative currents, or, if excitatory currents are cancelled by either recurrent inhibition or by spiking. As long as the network is fully functional, the latter will always be the case. Once the recovery boundary is hit, however, the lower bound on the voltages of some neurons disappears, and so will the lower bound on the above ratio of positive to negative currents (as well as the EI ratio), which is the effect we observe in <xref ref-type="fig" rid="fig3">Figure 3HI</xref>.</p><p>Traditionally, balance is often understood in the limit of very large networks (<xref ref-type="bibr" rid="bib63">van Vreeswijk and Sompolinsky, 1996</xref>, <xref ref-type="bibr" rid="bib64">1998</xref>), and these classical scaling arguments can also be applied to our networks (<xref ref-type="bibr" rid="bib11">Boerlin et al., 2013</xref>). Neglecting Dale’s law once more for simplicity, we can increase the network size, while keeping the relative size and number of the input signals and the neuron’s firing rates constant. Since <inline-formula><mml:math id="inf428"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi mathvariant="script">𝒪</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></inline-formula> and <inline-formula><mml:math id="inf429"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mn id="XM306">1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, we find that <inline-formula><mml:math id="inf430"><mml:mrow><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM307"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf431"><mml:mrow><mml:mi>β</mml:mi><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM308"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>. As a consequence of <xref ref-type="disp-formula" rid="equ18">Equation 18</xref> and <xref ref-type="disp-formula" rid="equ13">Equation 13</xref>, we observe that both the recurrent connection strengths and the spiking thresholds are small, so that <inline-formula><mml:math id="inf432"><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM309"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf433"><mml:mrow><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM310"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>. Now, because recurrent input is summed across the entire population of <inline-formula><mml:math id="inf434"><mml:mi>N</mml:mi></mml:math></inline-formula> neurons, we find that <inline-formula><mml:math id="inf435"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM311"><mml:mi>N</mml:mi><mml:mo>/</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>∼</mml:mo><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM312"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula>, and similar observations hold for <inline-formula><mml:math id="inf436"><mml:msub><mml:mi>I</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, <inline-formula><mml:math id="inf437"><mml:msub><mml:mi>E</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, and <inline-formula><mml:math id="inf438"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mover><mml:mi>R</mml:mi><mml:mo stretchy="false">¯</mml:mo></mml:mover></mml:mrow></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mstyle></mml:math></inline-formula>. Hence, these currents are <inline-formula><mml:math id="inf439"><mml:mi>N</mml:mi></mml:math></inline-formula> times larger than the spiking threshold, <inline-formula><mml:math id="inf440"><mml:msub><mml:mi>T</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>, or the reset, <inline-formula><mml:math id="inf441"><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inline-formula>. The EI ratio in <xref ref-type="disp-formula" rid="equ47">Equation 65</xref> then approaches one, and excitatory and inhibitory currents cancel precisely. We note that this balance of excitation and inhibition is much tighter than in balanced networks with random connectivity (<xref ref-type="bibr" rid="bib63">van Vreeswijk and Sompolinsky, 1996</xref>, <xref ref-type="bibr" rid="bib64">1998</xref>). In randomly connected networks the balance between excitation and inhibition is of order <inline-formula><mml:math id="inf442"><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM313"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> (<xref ref-type="bibr" rid="bib64">van Vreeswijk and Sompolinsky, 1998</xref>), whereas here these fluctuations are <inline-formula><mml:math id="inf443"><mml:mrow><mml:mi class="ltx_font_mathcaligraphic">𝒪</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM314"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. We note that these observations only hold when the number of input signals, <inline-formula><mml:math id="inf444"><mml:mi>M</mml:mi></mml:math></inline-formula>, is kept constant; if that number grows with <inline-formula><mml:math id="inf445"><mml:mi>N</mml:mi></mml:math></inline-formula>, then the scaling is different. The conceptual differences between loose and tight balance were recently highlighted in a review (<xref ref-type="bibr" rid="bib22">Denève and Machens, 2016</xref>).</p></sec><sec id="s4-8"><title>Optimal compensation proof</title><p>The spiking network that we use is capable of rapidly implementing optimal compensation, without requiring any synaptic plasticity mechanisms. We can prove this by showing that an optimal network of <inline-formula><mml:math id="inf446"><mml:mrow><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> neurons is equivalent to an optimal network of <inline-formula><mml:math id="inf447"><mml:mi>N</mml:mi></mml:math></inline-formula> neurons after the loss of one neuron. For the EI network, the argument applies separately to the excitatory and inhibitory subnetworks.</p><p>For the sake of argument, we suppose that the <inline-formula><mml:math id="inf448"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:mstyle></mml:math></inline-formula> neuron dies. At a mechanistic level, the loss of this neuron is equivalent to cutting all the connections to and from the dead neuron and from the dead neuron to the readout <inline-formula><mml:math id="inf449"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mrow><mml:mrow><mml:mrow><mml:mover><mml:mi mathvariant="bold">x</mml:mi><mml:mo mathvariant="bold" stretchy="false">^</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:mrow></mml:mrow></mml:mstyle></mml:math></inline-formula>. Therefore, a network where the <inline-formula><mml:math id="inf450"><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math></inline-formula> neuron has died is equivalent to a network with <inline-formula><mml:math id="inf451"><mml:mrow><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> neurons with readout matrix <inline-formula><mml:math id="inf452"><mml:mrow><mml:msubsup><mml:mi>D</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mpadded width="+1.7pt"><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mpadded><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>∀</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>j</mml:mi></mml:mpadded></mml:mrow></mml:mrow><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM315">1</mml:mn><mml:mo>,</mml:mo><mml:mrow id="XM316"><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf453"><mml:mrow><mml:mrow><mml:mo>∀</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>i</mml:mi></mml:mpadded></mml:mrow><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM317">1</mml:mn><mml:mo>,</mml:mo><mml:mi id="XM318">M</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, with feedforward connectivity <inline-formula><mml:math id="inf454"><mml:mrow><mml:msubsup><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mpadded width="+1.7pt"><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mpadded><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>∀</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>i</mml:mi></mml:mpadded></mml:mrow></mml:mrow><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM319">1</mml:mn><mml:mo>,</mml:mo><mml:mrow id="XM320"><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf455"><mml:mrow><mml:mrow><mml:mo>∀</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>j</mml:mi></mml:mpadded></mml:mrow><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM321">1</mml:mn><mml:mo>,</mml:mo><mml:mi id="XM322">M</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, with recurrent connectivity <inline-formula><mml:math id="inf456"><mml:mrow><mml:mrow id="XM325"><mml:msubsup><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mpadded width="+1.7pt"><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mpadded><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>∀</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:mrow></mml:mrow><mml:mo>,</mml:mo><mml:mrow id="XM326"><mml:mpadded width="+1.7pt"><mml:mi>k</mml:mi></mml:mpadded><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM323">1</mml:mn><mml:mo>,</mml:mo><mml:mrow id="XM324"><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:math></inline-formula> and with spiking thresholds <inline-formula><mml:math id="inf457"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mi>i</mml:mi><mml:mo>*</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mo>-</mml:mo><mml:mrow><mml:mrow><mml:msub><mml:mi mathvariant="normal">Ω</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:mpadded width="+1.7pt"><mml:mn>2</mml:mn></mml:mpadded></mml:mrow><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>∀</mml:mo><mml:mpadded width="+1.7pt"><mml:mi>i</mml:mi></mml:mpadded></mml:mrow></mml:mrow></mml:mrow><mml:mo>∈</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:mn id="XM327">1</mml:mn><mml:mo>,</mml:mo><mml:mrow id="XM328"><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>.</p><p>Now, we compare this damaged network to an optimal network consisting of <inline-formula><mml:math id="inf458"><mml:mrow><mml:mi>N</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> neurons. To make a fair comparison, we assume that this network has the same readout matrix <inline-formula><mml:math id="inf459"><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>≡</mml:mo><mml:msup><mml:mi mathvariant="bold">𝐃</mml:mi><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> as the reduced damaged network. Then, the recurrent connectivity for this network is given by <inline-formula><mml:math id="inf460"><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝛀</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:msup><mml:mi mathvariant="bold">𝛀</mml:mi><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>, the feedforward connectivity is given by <inline-formula><mml:math id="inf461"><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝐅</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>≡</mml:mo><mml:msup><mml:mi mathvariant="bold">𝐅</mml:mi><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula> and the spiking thresholds are given by <inline-formula><mml:math id="inf462"><mml:mrow><mml:msup><mml:mi mathvariant="bold">𝐓</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>≡</mml:mo><mml:msup><mml:mi mathvariant="bold">𝐓</mml:mi><mml:mo>*</mml:mo></mml:msup></mml:mrow></mml:math></inline-formula>. This configuration is equivalent to the reduced damaged network. Therefore, a spiking neural network whose neurons are individually tuned to represent a signal optimally before cell loss will perform optimal compensation and provide an optimal signal representation after cell loss.</p></sec></sec></body><back><ack id="ack"><title>Acknowledgements</title><p>We thank Tony Movshon, Pedro Gonçalves, and Wieland Brendel for stimulating discussions and Alfonso Renart, Claudia Feierstein, Joe Paton, and Michael Orger for helpful comments on the manuscript. S.D. acknowledges the James McDonnell Foundation Award and EU grants BACS FP6-IST-027140, BIND MECT-CT-20095–024831, and ERC FP7-PREDSPIKE. C.K.M. acknowledges an Emmy-Noether grant of the Deutsche Forschungsgemeinschaft and a Chaire d’excellence of the Agence National de la Recherche.</p></ack><sec id="s5" sec-type="additional-information"><title>Additional information</title><fn-group content-type="competing-interest"><title>Competing interests</title><fn fn-type="conflict" id="conf1"><p>The authors declare that no competing interests exist.</p></fn></fn-group><fn-group content-type="author-contribution"><title>Author contributions</title><fn fn-type="con" id="con1"><p>DGTB, Designed the study, Performed the analysis, Wrote the manuscript</p></fn><fn fn-type="con" id="con2"><p>SD, Designed the study</p></fn><fn fn-type="con" id="con3"><p>CKM, Designed the study, Performed the analysis, Wrote the manuscript</p></fn></fn-group></sec><ref-list><title>References</title><ref id="bib1"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abbott</surname><given-names>LF</given-names></name></person-group><year iso-8601-date="2008">2008</year><article-title>Theoretical neuroscience rising</article-title><source>Neuron</source><volume>60</volume><fpage>489</fpage><lpage>495</lpage><pub-id pub-id-type="doi">10.1016/j.neuron.2008.10.019</pub-id><pub-id pub-id-type="pmid">18995824</pub-id></element-citation></ref><ref id="bib2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Aksay</surname><given-names>E</given-names></name><name><surname>Baker</surname><given-names>R</given-names></name><name><surname>Seung</surname><given-names>HS</given-names></name><name><surname>Tank</surname><given-names>DW</given-names></name></person-group><year iso-8601-date="2000">2000</year><article-title>Anatomy and discharge properties of pre-motor neurons in the goldfish medulla that have eye-position signals during fixations</article-title><source>Journal of Neurophysiology</source><volume>84</volume><fpage>1035</fpage><lpage>1049</lpage><pub-id pub-id-type="pmid">10938326</pub-id></element-citation></ref><ref id="bib3"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Aksay</surname><given-names>E</given-names></name><name><surname>Olasagasti</surname><given-names>I</given-names></name><name><surname>Mensh</surname><given-names>BD</given-names></name><name><surname>Baker</surname><given-names>R</given-names></name><name><surname>Goldman</surname><given-names>MS</given-names></name><name><surname>Tank</surname><given-names>DW</given-names></name></person-group><year iso-8601-date="2007">2007</year><article-title>Functional dissection of circuitry in a neural integrator</article-title><source>Nature Neuroscience</source><volume>10</volume><fpage>494</fpage><lpage>504</lpage><pub-id pub-id-type="doi">10.1038/nn1877</pub-id></element-citation></ref><ref id="bib4"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Amit</surname><given-names>DJ</given-names></name><name><surname>Brunel</surname><given-names>N</given-names></name></person-group><year iso-8601-date="1997">1997</year><article-title>Model of global spontaneous activity and local structured activity during delay periods in the cerebral cortex</article-title><source>Cerebral Cortex</source><volume>7</volume><fpage>237</fpage><lpage>252</lpage><pub-id pub-id-type="doi">10.1093/cercor/7.3.237</pub-id><pub-id pub-id-type="pmid">9143444</pub-id></element-citation></ref><ref id="bib5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Atick</surname><given-names>JJ</given-names></name></person-group><year iso-8601-date="1992">1992</year><article-title>Could information theory provide an ecological theory of sensory processing?</article-title><source>Network: Computation in Neural Systems</source><volume>3</volume><fpage>213</fpage><lpage>251</lpage><pub-id pub-id-type="doi">10.1088/0954-898X_3_2_009</pub-id></element-citation></ref><ref id="bib6"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Barlow</surname><given-names>H</given-names></name></person-group><year iso-8601-date="1961">1961</year><chapter-title>Possible principles underlying the transformation of sensory messages</chapter-title><person-group person-group-type="editor"><name><surname>Rosenblith</surname> <given-names>W. A</given-names></name></person-group><source>Sensory Communication</source><fpage>217</fpage><lpage>234</lpage></element-citation></ref><ref id="bib7"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Barrett</surname><given-names>DGT</given-names></name><name><surname>Denève</surname><given-names>S</given-names></name><name><surname>Machens</surname><given-names>CK</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Firing rate predictions in optimal balanced networks</article-title><conf-name><italic>Advances in Neural Information Processing Systems 26</italic></conf-name><fpage>1538</fpage><lpage>1546</lpage></element-citation></ref><ref id="bib8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bell</surname><given-names>AJ</given-names></name><name><surname>Sejnowski</surname><given-names>TJ</given-names></name></person-group><year iso-8601-date="1997">1997</year><article-title>The &quot;independent components&quot; of natural scenes are edge filters</article-title><source>Vision Research</source><volume>37</volume><fpage>3327</fpage><lpage>3338</lpage><pub-id pub-id-type="doi">10.1016/S0042-6989(97)00121-1</pub-id><pub-id pub-id-type="pmid">9425547</pub-id></element-citation></ref><ref id="bib9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ben-Yishai</surname><given-names>R</given-names></name><name><surname>Bar-Or</surname><given-names>RL</given-names></name><name><surname>Sompolinsky</surname><given-names>H</given-names></name></person-group><year iso-8601-date="1995">1995</year><article-title>Theory of orientation tuning in visual cortex</article-title><source>PNAS</source><volume>92</volume><fpage>3844</fpage><lpage>3848</lpage><pub-id pub-id-type="doi">10.1073/pnas.92.9.3844</pub-id><pub-id pub-id-type="pmid">7731993</pub-id></element-citation></ref><ref id="bib10"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Boerlin</surname><given-names>M</given-names></name><name><surname>Denève</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>Spike-based population coding and working memory</article-title><source>PLoS Computational Biology</source><volume>7</volume><elocation-id>e1001080</elocation-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1001080</pub-id><pub-id pub-id-type="pmid">21379319</pub-id></element-citation></ref><ref id="bib11"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Boerlin</surname><given-names>M</given-names></name><name><surname>Machens</surname><given-names>CK</given-names></name><name><surname>Denève</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Predictive coding of dynamical variables in balanced spiking networks</article-title><source>PLoS Computational Biology</source><volume>9</volume><elocation-id>e1003258</elocation-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1003258</pub-id><pub-id pub-id-type="pmid">24244113</pub-id></element-citation></ref><ref id="bib12"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Bourdoukan</surname><given-names>R</given-names></name><name><surname>Barrett</surname><given-names>DGT</given-names></name><name><surname>Machens</surname><given-names>CK</given-names></name><name><surname>Denève</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>Learning optimal spike-based representations</article-title><conf-name><italic>Advances in Neural Information Processing 25</italic></conf-name><fpage>2294</fpage><lpage>2302</lpage></element-citation></ref><ref id="bib13"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Braun</surname><given-names>DA</given-names></name><name><surname>Aertsen</surname><given-names>A</given-names></name><name><surname>Wolpert</surname><given-names>DM</given-names></name><name><surname>Mehring</surname><given-names>C</given-names></name></person-group><year iso-8601-date="2009">2009</year><article-title>Learning optimal adaptation strategies in unpredictable motor tasks</article-title><source>Journal of Neuroscience</source><volume>29</volume><fpage>6472</fpage><lpage>6478</lpage><pub-id pub-id-type="doi">10.1523/JNEUROSCI.3075-08.2009</pub-id><pub-id pub-id-type="pmid">19458218</pub-id></element-citation></ref><ref id="bib14"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bredesen</surname><given-names>DE</given-names></name><name><surname>Rao</surname><given-names>RV</given-names></name><name><surname>Mehlen</surname><given-names>P</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>Cell death in the nervous system</article-title><source>Nature</source><volume>443</volume><fpage>796</fpage><lpage>802</lpage><pub-id pub-id-type="doi">10.1038/nature05293</pub-id><pub-id pub-id-type="pmid">17051206</pub-id></element-citation></ref><ref id="bib15"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Bromfield</surname><given-names>EB</given-names></name></person-group><year iso-8601-date="2006">2006</year><source>An introduction to epilepsy</source><publisher-name>American Epilepsy Society</publisher-name></element-citation></ref><ref id="bib16"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Charles</surname><given-names>AS</given-names></name><name><surname>Garrigues</surname><given-names>P</given-names></name><name><surname>Rozell</surname><given-names>CJ</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>A common network architecture efficiently implements a variety of Sparsity-Based inference problems</article-title><source>Neural Computation</source><volume>24</volume><fpage>3317</fpage><lpage>3339</lpage><pub-id pub-id-type="doi">10.1162/NECO_a_00372</pub-id></element-citation></ref><ref id="bib17"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Crook</surname><given-names>JM</given-names></name><name><surname>Eysel</surname><given-names>UT</given-names></name></person-group><year iso-8601-date="1992">1992</year><article-title>GABA-induced inactivation of functionally characterized sites in cat visual cortex (area 18): effects on orientation tuning</article-title><source>Journal of Neuroscience</source><volume>12</volume><fpage>1816</fpage><lpage>1825</lpage><pub-id pub-id-type="pmid">1578272</pub-id></element-citation></ref><ref id="bib18"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Crook</surname><given-names>JM</given-names></name><name><surname>Kisvárday</surname><given-names>ZF</given-names></name><name><surname>Eysel</surname><given-names>UT</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>GABA-induced inactivation of functionally characterized sites in cat visual cortex (area 18): effects on direction selectivity</article-title><source>Journal of Neurophysiology</source><volume>75</volume><fpage>2071</fpage><lpage>2088</lpage><pub-id pub-id-type="pmid">8734604</pub-id></element-citation></ref><ref id="bib19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Crook</surname><given-names>JM</given-names></name><name><surname>Kisvárday</surname><given-names>ZF</given-names></name><name><surname>Eysel</surname><given-names>UT</given-names></name></person-group><year iso-8601-date="1997">1997</year><article-title>GABA-induced inactivation of functionally characterized sites in cat striate cortex: effects on orientation tuning and direction selectivity</article-title><source>Visual Neuroscience</source><volume>14</volume><fpage>141</fpage><lpage>158</lpage><pub-id pub-id-type="doi">10.1017/S095252380000883X</pub-id><pub-id pub-id-type="pmid">9057276</pub-id></element-citation></ref><ref id="bib20"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Crook</surname><given-names>JM</given-names></name><name><surname>Kisvárday</surname><given-names>ZF</given-names></name><name><surname>Eysel</surname><given-names>UT</given-names></name></person-group><year iso-8601-date="1998">1998</year><article-title>Evidence for a contribution of lateral inhibition to orientation tuning and direction selectivity in cat visual cortex: reversible inactivation of functionally characterized sites combined with neuroanatomical tracing techniques</article-title><source>European Journal of Neuroscience</source><volume>10</volume><fpage>2056</fpage><lpage>2075</lpage><pub-id pub-id-type="doi">10.1046/j.1460-9568.1998.00218.x</pub-id><pub-id pub-id-type="pmid">9753093</pub-id></element-citation></ref><ref id="bib21"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Dayan</surname><given-names>P</given-names></name><name><surname>Abbott</surname><given-names>L</given-names></name></person-group><year iso-8601-date="2001">2001</year><source>Theoretical Neuroscience: Computational and Mathematical Modeling of Neural Systems</source><publisher-loc>Cambridge, Massachusetts</publisher-loc><publisher-name>MIT Press</publisher-name></element-citation></ref><ref id="bib22"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Denève</surname><given-names>S</given-names></name><name><surname>Machens</surname><given-names>CK</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Efficient codes and balanced networks</article-title><source>Nature Neuroscience</source><volume>19</volume><fpage>375</fpage><lpage>382</lpage><pub-id pub-id-type="doi">10.1038/nn.4243</pub-id><pub-id pub-id-type="pmid">26906504</pub-id></element-citation></ref><ref id="bib23"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Druckmann</surname><given-names>S</given-names></name><name><surname>Chklovskii</surname><given-names>DB</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>Neuronal circuits underlying persistent representations despite time varying activity</article-title><source>Current Biology</source><volume>22</volume><fpage>2095</fpage><lpage>2103</lpage><pub-id pub-id-type="doi">10.1016/j.cub.2012.08.058</pub-id><pub-id pub-id-type="pmid">23084992</pub-id></element-citation></ref><ref id="bib24"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fairhall</surname><given-names>AL</given-names></name><name><surname>Lewen</surname><given-names>GD</given-names></name><name><surname>Bialek</surname><given-names>W</given-names></name><name><surname>de Ruyter Van Steveninck</surname><given-names>RR</given-names></name></person-group><year iso-8601-date="2001">2001</year><article-title>Efficiency and ambiguity in an adaptive neural code</article-title><source>Nature</source><volume>412</volume><fpage>787</fpage><lpage>792</lpage><pub-id pub-id-type="doi">10.1038/35090500</pub-id><pub-id pub-id-type="pmid">11518957</pub-id></element-citation></ref><ref id="bib25"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fenno</surname><given-names>L</given-names></name><name><surname>Yizhar</surname><given-names>O</given-names></name><name><surname>Deisseroth</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>The development and application of optogenetics</article-title><source>Annual Review of Neuroscience</source><volume>34</volume><fpage>389</fpage><lpage>412</lpage><pub-id pub-id-type="doi">10.1146/annurev-neuro-061010-113817</pub-id><pub-id pub-id-type="pmid">21692661</pub-id></element-citation></ref><ref id="bib26"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fuchs</surname><given-names>AF</given-names></name><name><surname>Scudder</surname><given-names>CA</given-names></name><name><surname>Kaneko</surname><given-names>CR</given-names></name></person-group><year iso-8601-date="1988">1988</year><article-title>Discharge patterns and recruitment order of identified motoneurons and internuclear neurons in the monkey abducens nucleus</article-title><source>Journal of Neurophysiology</source><volume>60</volume><fpage>1874</fpage><lpage>1895</lpage><pub-id pub-id-type="pmid">2466962</pub-id></element-citation></ref><ref id="bib27"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gonçalves</surname><given-names>PJ</given-names></name><name><surname>Arrenberg</surname><given-names>AB</given-names></name><name><surname>Hablitzel</surname><given-names>B</given-names></name><name><surname>Baier</surname><given-names>H</given-names></name><name><surname>Machens</surname><given-names>CK</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Optogenetic perturbations reveal the dynamics of an oculomotor integrator</article-title><source>Frontiers in Neural Circuits</source><volume>8</volume><elocation-id>10</elocation-id><pub-id pub-id-type="doi">10.3389/fncir.2014.00010</pub-id><pub-id pub-id-type="pmid">24616666</pub-id></element-citation></ref><ref id="bib28"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Greene</surname><given-names>G</given-names></name><name><surname>Barrett</surname><given-names>DGT</given-names></name><name><surname>Sen</surname><given-names>K</given-names></name><name><surname>Houghton</surname><given-names>C</given-names></name></person-group><year iso-8601-date="2009">2009</year><article-title>Sparse coding of birdsong and receptive field structure in songbirds</article-title><source>Network: Computation in Neural Systems</source><volume>20</volume><fpage>162</fpage><lpage>177</lpage><pub-id pub-id-type="doi">10.1080/09548980903108267</pub-id><pub-id pub-id-type="pmid">19731147</pub-id></element-citation></ref><ref id="bib29"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Haas</surname><given-names>JS</given-names></name><name><surname>Nowotny</surname><given-names>T</given-names></name><name><surname>Abarbanel</surname><given-names>HD</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>Spike-timing-dependent plasticity of inhibitory synapses in the entorhinal cortex</article-title><source>Journal of Neurophysiology</source><volume>96</volume><fpage>3305</fpage><lpage>3313</lpage><pub-id pub-id-type="doi">10.1152/jn.00551.2006</pub-id><pub-id pub-id-type="pmid">16928795</pub-id></element-citation></ref><ref id="bib30"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hennequin</surname><given-names>G</given-names></name><name><surname>Vogels</surname><given-names>TP</given-names></name><name><surname>Gerstner</surname><given-names>W</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Optimal control of transient dynamics in balanced networks supports generation of complex movements</article-title><source>Neuron</source><volume>82</volume><fpage>1394</fpage><lpage>1406</lpage><pub-id pub-id-type="doi">10.1016/j.neuron.2014.04.045</pub-id><pub-id pub-id-type="pmid">24945778</pub-id></element-citation></ref><ref id="bib31"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hopfield</surname><given-names>JJ</given-names></name></person-group><year iso-8601-date="1984">1984</year><article-title>Neurons with graded response have collective computational properties like those of two-state neurons</article-title><source>PNAS</source><volume>81</volume><fpage>3088</fpage><lpage>3092</lpage><pub-id pub-id-type="doi">10.1073/pnas.81.10.3088</pub-id></element-citation></ref><ref id="bib32"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Horn</surname><given-names>D</given-names></name><name><surname>Levy</surname><given-names>N</given-names></name><name><surname>Ruppin</surname><given-names>E</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>Neuronal-based synaptic compensation: a computational study in Alzheimer's disease</article-title><source>Neural Computation</source><volume>8</volume><fpage>1227</fpage><lpage>1243</lpage><pub-id pub-id-type="doi">10.1162/neco.1996.8.6.1227</pub-id><pub-id pub-id-type="pmid">8768393</pub-id></element-citation></ref><ref id="bib33"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hoyer</surname> <given-names>P</given-names></name></person-group><year iso-8601-date="2004">2004</year><article-title>Non-negative matrix factorization with sparseness constraints</article-title><source>The Journal of Machine Learning Research</source><volume>5</volume><fpage>1457</fpage><lpage>1469</lpage></element-citation></ref><ref id="bib34"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hoyer</surname><given-names>PO</given-names></name></person-group><year iso-8601-date="2003">2003</year><article-title>Modeling receptive fields with non-negative sparse coding</article-title><source>Neurocomputing</source><volume>52-54</volume><fpage>547</fpage><lpage>552</lpage><pub-id pub-id-type="doi">10.1016/S0925-2312(02)00782-8</pub-id></element-citation></ref><ref id="bib35"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hu</surname><given-names>T</given-names></name><name><surname>Genkin</surname><given-names>A</given-names></name><name><surname>Chklovskii</surname><given-names>DB</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>A network of spiking neurons for computing sparse representations in an energy-efficient way</article-title><source>Neural Computation</source><volume>24</volume><fpage>2852</fpage><lpage>2872</lpage><pub-id pub-id-type="doi">10.1162/NECO_a_00353</pub-id><pub-id pub-id-type="pmid">22920853</pub-id></element-citation></ref><ref id="bib36"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hubel</surname><given-names>DH</given-names></name><name><surname>Wiesel</surname><given-names>TN</given-names></name></person-group><year iso-8601-date="1962">1962</year><article-title>Receptive fields, binocular interaction and functional architecture in the cat's visual cortex</article-title><source>The Journal of Physiology</source><volume>160</volume><fpage>106</fpage><lpage>154</lpage><pub-id pub-id-type="doi">10.1113/jphysiol.1962.sp006837</pub-id><pub-id pub-id-type="pmid">14449617</pub-id></element-citation></ref><ref id="bib37"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Keck</surname><given-names>T</given-names></name><name><surname>Mrsic-Flogel</surname><given-names>TD</given-names></name><name><surname>Vaz Afonso</surname><given-names>M</given-names></name><name><surname>Eysel</surname><given-names>UT</given-names></name><name><surname>Bonhoeffer</surname><given-names>T</given-names></name><name><surname>Hübener</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2008">2008</year><article-title>Massive restructuring of neuronal circuits during functional reorganization of adult visual cortex</article-title><source>Nature Neuroscience</source><volume>11</volume><fpage>1162</fpage><lpage>1167</lpage><pub-id pub-id-type="doi">10.1038/nn.2181</pub-id><pub-id pub-id-type="pmid">18758460</pub-id></element-citation></ref><ref id="bib38"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>King</surname><given-names>PD</given-names></name><name><surname>Zylberberg</surname><given-names>J</given-names></name><name><surname>DeWeese</surname><given-names>MR</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Inhibitory interneurons decorrelate excitatory cells to drive sparse code formation in a spiking model of V1</article-title><source>Journal of Neuroscience</source><volume>33</volume><fpage>5475</fpage><lpage>5485</lpage><pub-id pub-id-type="doi">10.1523/JNEUROSCI.4188-12.2013</pub-id><pub-id pub-id-type="pmid">23536063</pub-id></element-citation></ref><ref id="bib39"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Knight</surname><given-names>BW</given-names></name></person-group><year iso-8601-date="1972">1972</year><article-title>Dynamics of encoding in a population of neurons</article-title><source>The Journal of General Physiology</source><volume>59</volume><fpage>734</fpage><lpage>766</lpage><pub-id pub-id-type="doi">10.1085/jgp.59.6.734</pub-id></element-citation></ref><ref id="bib40"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kording</surname><given-names>KP</given-names></name><name><surname>Tenenbaum</surname><given-names>JB</given-names></name><name><surname>Shadmehr</surname><given-names>R</given-names></name></person-group><year iso-8601-date="2007">2007</year><article-title>The dynamics of memory as a consequence of optimal adaptation to a changing body</article-title><source>Nature Neuroscience</source><volume>10</volume><fpage>779</fpage><lpage>786</lpage><pub-id pub-id-type="doi">10.1038/nn1901</pub-id><pub-id pub-id-type="pmid">17496891</pub-id></element-citation></ref><ref id="bib41"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Leary</surname><given-names>MC</given-names></name><name><surname>Saver</surname><given-names>JL</given-names></name></person-group><year iso-8601-date="2003">2003</year><article-title>Annual incidence of first silent stroke in the united States: a preliminary estimate</article-title><source>Cerebrovascular Diseases</source><volume>16</volume><fpage>280</fpage><lpage>285</lpage><pub-id pub-id-type="doi">10.1159/000071128</pub-id><pub-id pub-id-type="pmid">12865617</pub-id></element-citation></ref><ref id="bib42"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lee</surname><given-names>DD</given-names></name><name><surname>Seung</surname><given-names>HS</given-names></name></person-group><year iso-8601-date="1999">1999</year><article-title>Learning the parts of objects by non-negative matrix factorization</article-title><source>Nature</source><volume>401</volume><fpage>788</fpage><lpage>791</lpage><pub-id pub-id-type="doi">10.1038/44565</pub-id><pub-id pub-id-type="pmid">10548103</pub-id></element-citation></ref><ref id="bib43"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>N</given-names></name><name><surname>Daie</surname><given-names>K</given-names></name><name><surname>Svoboda</surname><given-names>K</given-names></name><name><surname>Druckmann</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Robust neuronal dynamics in premotor cortex during motor planning</article-title><source>Nature</source><volume>532</volume><fpage>459</fpage><lpage>464</lpage><pub-id pub-id-type="doi">10.1038/nature17643</pub-id><pub-id pub-id-type="pmid">27074502</pub-id></element-citation></ref><ref id="bib44"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Libersat</surname><given-names>F</given-names></name><name><surname>Mizrahi</surname><given-names>A</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>In situ visualization and photoablation of individual neurons using a low cost fiber optic based system</article-title><source>Journal of Neuroscience Methods</source><volume>67</volume><fpage>157</fpage><lpage>162</lpage><pub-id pub-id-type="doi">10.1016/0165-0270(96)00043-X</pub-id><pub-id pub-id-type="pmid">8872881</pub-id></element-citation></ref><ref id="bib45"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lim</surname><given-names>S</given-names></name><name><surname>Goldman</surname><given-names>MS</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Balanced cortical microcircuitry for maintaining information in working memory</article-title><source>Nature Neuroscience</source><volume>16</volume><fpage>1306</fpage><lpage>1314</lpage><pub-id pub-id-type="doi">10.1038/nn.3492</pub-id><pub-id pub-id-type="pmid">23955560</pub-id></element-citation></ref><ref id="bib46"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Luz</surname><given-names>Y</given-names></name><name><surname>Shamir</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>Balancing feed-forward excitation and inhibition via hebbian inhibitory synaptic plasticity</article-title><source>PLoS Computational Biology</source><volume>8</volume><fpage>e1002334</fpage><pub-id pub-id-type="doi">10.1371/journal.pcbi.1002334</pub-id><pub-id pub-id-type="pmid">22291583</pub-id></element-citation></ref><ref id="bib47"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Machens</surname><given-names>CK</given-names></name><name><surname>Gollisch</surname><given-names>T</given-names></name><name><surname>Kolesnikova</surname><given-names>O</given-names></name><name><surname>Herz</surname><given-names>AV</given-names></name></person-group><year iso-8601-date="2005">2005</year><article-title>Testing the efficiency of sensory coding with optimal stimulus ensembles</article-title><source>Neuron</source><volume>47</volume><fpage>447</fpage><lpage>456</lpage><pub-id pub-id-type="doi">10.1016/j.neuron.2005.06.015</pub-id><pub-id pub-id-type="pmid">16055067</pub-id></element-citation></ref><ref id="bib48"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mizrahi</surname><given-names>A</given-names></name><name><surname>Libersat</surname><given-names>F</given-names></name></person-group><year iso-8601-date="1997">1997</year><article-title>Independent coding of wind direction in cockroach giant interneurons</article-title><source>Journal of Neurophysiology</source><volume>78</volume><fpage>2655</fpage><lpage>2661</lpage><pub-id pub-id-type="pmid">9356415</pub-id></element-citation></ref><ref id="bib49"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Montague</surname><given-names>PR</given-names></name><name><surname>Dolan</surname><given-names>RJ</given-names></name><name><surname>Friston</surname><given-names>KJ</given-names></name><name><surname>Dayan</surname><given-names>P</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>Computational psychiatry</article-title><source>Trends in Cognitive Sciences</source><volume>16</volume><fpage>72</fpage><lpage>80</lpage><pub-id pub-id-type="doi">10.1016/j.tics.2011.11.018</pub-id><pub-id pub-id-type="pmid">22177032</pub-id></element-citation></ref><ref id="bib50"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Morrison</surname><given-names>JH</given-names></name><name><surname>Hof</surname><given-names>PR</given-names></name></person-group><year iso-8601-date="1997">1997</year><article-title>Life and death of neurons in the aging brain</article-title><source>Science</source><volume>278</volume><fpage>412</fpage><lpage>419</lpage><pub-id pub-id-type="doi">10.1126/science.278.5337.412</pub-id><pub-id pub-id-type="pmid">9334292</pub-id></element-citation></ref><ref id="bib51"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Olshausen</surname><given-names>BA</given-names></name><name><surname>Field</surname><given-names>DJ</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>Emergence of simple-cell receptive field properties by learning a sparse code for natural images</article-title><source>Nature</source><volume>381</volume><fpage>607</fpage><lpage>609</lpage><pub-id pub-id-type="doi">10.1038/381607a0</pub-id><pub-id pub-id-type="pmid">8637596</pub-id></element-citation></ref><ref id="bib52"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Palop</surname><given-names>JJ</given-names></name><name><surname>Chin</surname><given-names>J</given-names></name><name><surname>Mucke</surname><given-names>L</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>A network dysfunction perspective on neurodegenerative diseases</article-title><source>Nature</source><volume>443</volume><fpage>768</fpage><lpage>773</lpage><pub-id pub-id-type="doi">10.1038/nature05289</pub-id><pub-id pub-id-type="pmid">17051202</pub-id></element-citation></ref><ref id="bib53"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pastor</surname><given-names>AM</given-names></name><name><surname>Gonzalez-Forero</surname><given-names>D</given-names></name></person-group><year iso-8601-date="2003">2003</year><article-title>Recruitment order of cat abducens motoneurons and internuclear neurons</article-title><source>Journal of Neurophysiology</source><volume>90</volume><fpage>2240</fpage><lpage>2252</lpage><pub-id pub-id-type="doi">10.1152/jn.00402.2003</pub-id><pub-id pub-id-type="pmid">12801900</pub-id></element-citation></ref><ref id="bib54"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Renart</surname><given-names>A</given-names></name><name><surname>de la Rocha</surname><given-names>J</given-names></name><name><surname>Bartho</surname><given-names>P</given-names></name><name><surname>Hollender</surname><given-names>L</given-names></name><name><surname>Parga</surname><given-names>N</given-names></name><name><surname>Reyes</surname><given-names>A</given-names></name><name><surname>Harris</surname><given-names>KD</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>The asynchronous state in cortical circuits</article-title><source>Science</source><volume>327</volume><fpage>587</fpage><lpage>590</lpage><pub-id pub-id-type="doi">10.1126/science.1179850</pub-id></element-citation></ref><ref id="bib55"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Rieke</surname><given-names>F</given-names></name><name><surname>Warland</surname><given-names>D</given-names></name><name><surname>Steveninck</surname><given-names>deRvan RR</given-names></name><name><surname>Bialek</surname><given-names>W</given-names></name></person-group><year iso-8601-date="1997">1997</year><source>Spikes - Exploring the Neural Code</source><publisher-loc>Cambridge, Massachusetts</publisher-loc><publisher-name>MIT Press</publisher-name></element-citation></ref><ref id="bib56"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rozell</surname><given-names>CJ</given-names></name><name><surname>Johnson</surname><given-names>DH</given-names></name><name><surname>Baraniuk</surname><given-names>RG</given-names></name><name><surname>Olshausen</surname><given-names>BA</given-names></name></person-group><year iso-8601-date="2008">2008</year><article-title>Sparse coding via thresholding and local competition in neural circuits</article-title><source>Neural Computation</source><volume>20</volume><fpage>2526</fpage><lpage>2563</lpage><pub-id pub-id-type="doi">10.1162/neco.2008.03-07-486</pub-id><pub-id pub-id-type="pmid">18439138</pub-id></element-citation></ref><ref id="bib57"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Salinas</surname><given-names>E</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>How behavioral constraints may determine optimal sensory representations</article-title><source>PLoS Biology</source><volume>4</volume><elocation-id>e387</elocation-id><pub-id pub-id-type="doi">10.1371/journal.pbio.0040387</pub-id><pub-id pub-id-type="pmid">17132045</pub-id></element-citation></ref><ref id="bib58"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shadmehr</surname><given-names>R</given-names></name><name><surname>Smith</surname><given-names>MA</given-names></name><name><surname>Krakauer</surname><given-names>JW</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Error correction, sensory prediction, and adaptation in motor control</article-title><source>Annual Review of Neuroscience</source><volume>33</volume><fpage>89</fpage><lpage>108</lpage><pub-id pub-id-type="doi">10.1146/annurev-neuro-060909-153135</pub-id><pub-id pub-id-type="pmid">20367317</pub-id></element-citation></ref><ref id="bib59"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Simoncelli</surname><given-names>EP</given-names></name><name><surname>Olshausen</surname><given-names>BA</given-names></name></person-group><year iso-8601-date="2001">2001</year><article-title>Natural image statistics and neural representation</article-title><source>Annual review of neuroscience</source><volume>24</volume><fpage>1193</fpage><lpage>1216</lpage><pub-id pub-id-type="doi">10.1146/annurev.neuro.24.1.1193</pub-id><pub-id pub-id-type="pmid">11520932</pub-id></element-citation></ref><ref id="bib60"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>EC</given-names></name><name><surname>Lewicki</surname><given-names>MS</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>Efficient auditory coding</article-title><source>Nature</source><volume>439</volume><fpage>978</fpage><lpage>982</lpage><pub-id pub-id-type="doi">10.1038/nature04485</pub-id><pub-id pub-id-type="pmid">16495999</pub-id></element-citation></ref><ref id="bib61"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Theunissen</surname><given-names>FE</given-names></name><name><surname>Miller</surname><given-names>JP</given-names></name></person-group><year iso-8601-date="1991">1991</year><article-title>Representation of sensory information in the cricket cercal sensory system. II. information theoretic calculation of system accuracy and optimal tuning-curve widths of four primary interneurons</article-title><source>Journal of neurophysiology</source><volume>66</volume><fpage>1690</fpage><lpage>1703</lpage><pub-id pub-id-type="pmid">1765802</pub-id></element-citation></ref><ref id="bib62"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>van Hateren</surname><given-names>JH</given-names></name><name><surname>van der Schaaf</surname><given-names>A</given-names></name></person-group><year iso-8601-date="1998">1998</year><article-title>Independent component filters of natural images compared with simple cells in primary visual cortex</article-title><source>Proceedings of the Royal Society B: Biological Sciences</source><volume>265</volume><fpage>359</fpage><lpage>366</lpage><pub-id pub-id-type="doi">10.1098/rspb.1998.0303</pub-id><pub-id pub-id-type="pmid">9523437</pub-id></element-citation></ref><ref id="bib63"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>van Vreeswijk</surname><given-names>C</given-names></name><name><surname>Sompolinsky</surname><given-names>H</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>Chaos in neuronal networks with balanced excitatory and inhibitory activity</article-title><source>Science</source><volume>274</volume><fpage>1724</fpage><lpage>1726</lpage><pub-id pub-id-type="doi">10.1126/science.274.5293.1724</pub-id><pub-id pub-id-type="pmid">8939866</pub-id></element-citation></ref><ref id="bib64"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>van Vreeswijk</surname><given-names>C</given-names></name><name><surname>Sompolinsky</surname><given-names>H</given-names></name></person-group><year iso-8601-date="1998">1998</year><article-title>Chaotic balanced state in a model of cortical circuits</article-title><source>Neural Computation</source><volume>10</volume><fpage>1321</fpage><lpage>1371</lpage><pub-id pub-id-type="doi">10.1162/089976698300017214</pub-id><pub-id pub-id-type="pmid">9698348</pub-id></element-citation></ref><ref id="bib65"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Vogels</surname><given-names>TP</given-names></name><name><surname>Sprekeler</surname><given-names>H</given-names></name><name><surname>Zenke</surname><given-names>F</given-names></name><name><surname>Clopath</surname><given-names>C</given-names></name><name><surname>Gerstner</surname><given-names>W</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>Inhibitory plasticity balances excitation and inhibition in sensory pathways and memory networks</article-title><source>Science</source><volume>334</volume><fpage>1569</fpage><lpage>1573</lpage><pub-id pub-id-type="doi">10.1126/science.1211095</pub-id><pub-id pub-id-type="pmid">22075724</pub-id></element-citation></ref><ref id="bib66"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wainwright</surname><given-names>MJ</given-names></name></person-group><year iso-8601-date="1999">1999</year><article-title>Visual adaptation as optimal information transmission</article-title><source>Vision Research</source><volume>39</volume><fpage>3960</fpage><lpage>3974</lpage><pub-id pub-id-type="doi">10.1016/S0042-6989(99)00101-7</pub-id><pub-id pub-id-type="pmid">10748928</pub-id></element-citation></ref><ref id="bib67"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yizhar</surname><given-names>O</given-names></name><name><surname>Fenno</surname><given-names>LE</given-names></name><name><surname>Prigge</surname><given-names>M</given-names></name><name><surname>Schneider</surname><given-names>F</given-names></name><name><surname>Davidson</surname><given-names>TJ</given-names></name><name><surname>O'Shea</surname><given-names>DJ</given-names></name><name><surname>Sohal</surname><given-names>VS</given-names></name><name><surname>Goshen</surname><given-names>I</given-names></name><name><surname>Finkelstein</surname><given-names>J</given-names></name><name><surname>Paz</surname><given-names>JT</given-names></name><name><surname>Stehfest</surname><given-names>K</given-names></name><name><surname>Fudim</surname><given-names>R</given-names></name><name><surname>Ramakrishnan</surname><given-names>C</given-names></name><name><surname>Huguenard</surname><given-names>JR</given-names></name><name><surname>Hegemann</surname><given-names>P</given-names></name><name><surname>Deisseroth</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>Neocortical excitation/inhibition balance in information processing and social dysfunction</article-title><source>Nature</source><volume>477</volume><fpage>171</fpage><lpage>178</lpage><pub-id pub-id-type="doi">10.1038/nature10360</pub-id><pub-id pub-id-type="pmid">21796121</pub-id></element-citation></ref><ref id="bib68"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zylberberg</surname><given-names>J</given-names></name><name><surname>Murphy</surname><given-names>JT</given-names></name><name><surname>DeWeese</surname><given-names>MR</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>A sparse coding model with synaptically local plasticity and spiking neurons can account for the diverse shapes of V1 simple cell receptive fields</article-title><source>PLoS Computational Biology</source><volume>7</volume><elocation-id>e1002250</elocation-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1002250</pub-id><pub-id pub-id-type="pmid">22046123</pub-id></element-citation></ref></ref-list></back><sub-article article-type="article-commentary" id="SA1"><front-stub><article-id pub-id-type="doi">10.7554/eLife.12454.016</article-id><title-group><article-title>Decision letter</article-title></title-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Skinner</surname><given-names>Frances K</given-names></name><role>Reviewing editor</role><aff id="aff4"><institution>University Health Network</institution>, <country>Canada</country></aff></contrib></contrib-group></front-stub><body><boxed-text><p>In the interests of transparency, eLife includes the editorial decision letter and accompanying author responses. A lightly edited version of the letter sent to the authors after peer review is shown, indicating the most substantive concerns; minor comments are not usually included.</p></boxed-text><p>Thank you for submitting your work entitled &quot;Optimal compensation for neuron death&quot; for consideration by <italic>eLife</italic>. Your article has been favorably evaluated by Eve Marder (Senior Editor) and three reviewers, one of whom is a member of our Board of Reviewing Editors.</p><p>The reviewers have discussed the reviews with one another and the Reviewing Editor has drafted this decision to help you prepare a revised submission.</p><p>All of the reviewers felt that the submitted theoretical work on compensating for cell death was novel and interesting. However, it was also felt that many specifics were unclear or buried in other places, making biological interpretation difficult (e.g., excitatory, inhibitory cell types). The reviewers encourage the authors to consider the five following points, and at least the first four should be addressed in a revised submission. Additional points raised by the reviewers are detailed below, and should also be addressed.</p><p>1) State clearly that the network is non-Dalian and explain the reasoning for this choice.</p><p>2) State clearly what the recovery boundaries are, and plot figures that show which variables affect the recovery boundary for a given network with a given task. In general, spend a bit more time on the general mechanism before going into the additional models, or alternatively, explain in detail the additional models, like e.g. <xref ref-type="fig" rid="fig7">Figure 7</xref>, which is devoid of explanatory power.</p><p>3) An example of a Dalian network, independently of whether it works (same boundary?) or not (why does it not work?) should be added.</p><p>4) Show the compensatory mechanisms at play more carefully in figures, i.e. show how balance is changing and finally breaking at the recovery boundary.</p><p>5) Consider building a reservoir network model as in Sussillo &amp; Abbott trained to perform a task. Delete neurons, and check whether it is able to self-balance. If it doesn't, address whether this is related with the complexity of the task.</p><p>We are including the original reviews as they provide context for the revision points shown above.</p><p><italic>Reviewer #1:</italic> </p><p>In this clearly written model theory paper, the authors propose that neural circuits compensate for neuronal death immediately, and show this using firing rate network models and several experiments. Although overall I found the work compelling, in general, I felt that the authors need to better describe 'biological correlates' for their models and to 'fill in the blanks' in various places to help the reader relate and better appreciate the work.</p><p>Specifically:</p><p>1) 'quadratic programming algorithm' and 'loss function' – could the authors provide suggestions of biological correlates of this. Presumably it would relate to excitatory-inhibitory balances in some way?</p><p>2) While spiking rate models are used, differences between excitatory and inhibitory cells are not apparent to me. Given this, then the suggestion in the Discussion that 'these predictions could be tested using neuronal ablations or optogenetic silencing' would seem to suggest that cell type (at least as far as excitatory or inhibitory) does not matter, but this is clearly not true (one of many examples would be epilepsy work by Soltesz group – Krook-Magnuson et al. 2013 Nature Communications). For the reader to better appreciate what is intended by the various discussion suggestions, the authors should 'fill in the blanks' between their theoretical model and experimental suggestions being made.</p><p>In the Methods it is stated that &quot;To be biologically more plausible, however, the derivative could be computed through a simple circuit that combines direct excitatory signal inputs with delayed inhibitory signal inputs (e.g. through feedforward inhibition).&quot;</p><p>So, could the authors provide description/interpretation of excitatory/inhibitory cells/circuits in terms of their results/predictions? (i.e., biological plausibility).</p><p>3) The authors use only positive firing rates (unlike other theoretical studies with positive and negative etc.), and this is a critical difference in what they achieve. While it is clear that negative firing rates may not make sense, the biological correlate of the authors' model is not clear – see 2.</p><p><italic>Reviewer #2:</italic> </p><p>Barret et al. investigate a question rarely addressed in theoretical neuroscience: how do neural circuits compensate the death of neurons? They provide an elegant model showing that neurons in the balanced networks can dynamically adjust their rates so as to minimize the impact neuron death. They show how to theoretically compute the optimal tuning curves of neurons in a network encoding a multi-dimensional variable x as a quadratic minimization problem with only constraint that firing rates must be positive. They continue to show that the method presented in their previous work (Boerling et al. 2013) in which they build an integrate-and-fire network optimized to minimize a cost function quantifying the estimation error of an input signal can in fact implement these optimal tuning curves almost exactly. They investigate how the tuning curves change when a fraction of the neurons are silenced and validate some of the predictions derived from the model with three data sets: the goldfish oculomotor system, the cercal system of crickets/cockroaches, V1 orientation tuned neurons. The paper nicely connects two distinct approaches in theoretical neuroscience, network dynamics and efficient coding, and obtains some very general results showing how constraints such as neuronal silencing or more simply, the rectification of the rate, affect the efficient encoding of external variables in a network of spiking neurons. The methodology and the findings presented can potentially have a substantial impact in our understanding of the properties of balanced networks and population encoding. There are however some aspects that the authors need to address in order to present the limitations of the model and the comparison with the data more clearly (see Comments below).</p><p>Comments:</p><p>Dale's law and the explanation of the EI balance breakdown. In <xref ref-type="fig" rid="fig2">Figure 2</xref>, the authors illustrate how when a fraction of the neurons below the recovery boundary is inactivated, the network dynamically compensates and keeps encoding x(t): the remaining neurons change their firing rate and the EI balance is maintained. Then they show that when all neurons with positive readout weight are removed, the balance can no longer be maintained because &quot;there are no longer enough inhibitory cells to balance excitation (or enough excitatory cells to balance inhibition)&quot;. This is a very misleading statement given that in this network there are no excitatory or inhibitory neurons (i.e. does not respect Dale's principle). I was very confused when I read this example thinking that neurons in the Figure should have been organized according to whether they are E or I, and not according to the sign of their readout weight. I had to go to the Methods section to later find out that there are no E and I cells in this network. This is in my opinion a main drawback given that (1) Dale's law seems to be true in cortical circuits and (2) the authors are presenting their work as an extension of classical work describing EI networks in which E and I populations are distinct. In their previous manuscript (Boerling et al. 2013) they address this question and propose potential solutions. All of it should be explicitly mentioned and discussed. Moreover, when describing <xref ref-type="fig" rid="fig2">Figure 2</xref> it should be explained why cells with positive readout weights (w+) can naively be viewed as excitatory cells when they provide both excitation and inhibition? Without this most readers will be misled to interpret that w+ neurons are Excitatory and w- neurons are inhibitory.</p><p>Biased cost. The authors use a biased quadratic cost function containing a second term which tries to maintain a particular read-out of the rates (coefs c<sub>k</sub>) equal to a constant that they call the background rate. The authors describe in much detailed the implication of this bias in the intercept of the tuning curves (<xref ref-type="fig" rid="fig3">Figure 3C</xref> and Figure 3—figure supplement 2B-C). The motivation for this choice is however very succinct. Is there any benefit on having a non-zero intercept regarding the estimation error? I ask this because it is a fairly common observation that cortical circuits seem to maintain the overall average population firing rate constant when dynamically encoding different variables (see e.g. <xref ref-type="fig" rid="fig2">Figure 2B</xref> Fujisawa et al., Nat Neuroscience 11 (7), 2008). This observation seems to be obtained to the network in which there is a non-zero r<sub>B</sub> and non-zero uniform c<sub>k</sub>'s which seems interesting. However, the implications of this additional bias regarding the encoding ability of the circuit (estimation error of x(t)), its plausibility regarding the available data, etc. and not discussed.</p><p>The prediction on the changes in tuning for V1 neurons is only shown in three units (<xref ref-type="fig" rid="fig8">Figure 8B</xref>). In Figure 8—figure supplement 1, the full population of neurons is examined but the changes are only reported in response to the &quot;preferred stimulus orientations&quot;. Thus, evaluating the prediction that there should be an increase of firing rate on the non-silenced neurons in response to the &quot;preferred orientation of the silenced cells&quot; is not possible. Either a different population analysis is performed or the statement about the outcome of the prediction at the population level (Results, last paragraph) should be modified.</p><p>Results on the comparison with data should be brought forward. Since the paper is quite long as it is now, and the most novel and most interesting part is the comparison of the model predictions with data from three systems (<xref ref-type="fig" rid="fig5">Figures 5</xref>–<xref ref-type="fig" rid="fig8">8</xref>), I suggest moving the mechanistic part of how to implement the optimal solution using a spiking network (e.g. <xref ref-type="fig" rid="fig1">Figures 1</xref>–<xref ref-type="fig" rid="fig2">2</xref>) to an Appendix box or some sort of &quot;side note figure&quot;. This mechanistic part is an important aspect but, once it has been shown that it works, which has somehow already been covered in Boerling et al. 2013, it is no longer required to make the comparison with data (<xref ref-type="fig" rid="fig5">Figures 5</xref>–<xref ref-type="fig" rid="fig8">8</xref>, which are all derived by numerically solving Eqs. 4-5). Doing so, the reader will be able to quickly reach the most novel aspects without the need to go over the network implementation details.</p><p>In the Discussion, the authors state that the strongest prediction of the model is that &quot;neurons with similar tuning to the dead neurons increase their firing rates and neurons with dissimilar tuning decrease their firing rates (unless they are already silent).&quot; The second part of this statement seems at odds to what is shown in <xref ref-type="fig" rid="fig6">Figures 6I</xref>, <xref ref-type="fig" rid="fig8">Figure 8A</xref> (top) and <xref ref-type="fig" rid="fig8">Figure 8C</xref> where dissimilar neurons either don't change much (e.g. Df is always &gt;=0 in <xref ref-type="fig" rid="fig8">Figure 8C</xref>) or tend to increase their rate in response to the preferred orientation of the dead cells (<xref ref-type="fig" rid="fig8">Figure 8A</xref> top). This rate decrease in dissimilar neurons seems to occur in the network shown in <xref ref-type="fig" rid="fig4">Figure 4B</xref> with monotonically increasing tuning curves. The details about the changes predicted and the generality of these changes in different systems (bell-shaped vs. monotonic tuning curves) need to be clarified.</p><p>At the end of the Methods, the authors provide an explanation of the Tight balance between excitation and inhibition and a scaling argument that concludes that in the network consider here, the cancellation between the mean excitatory and inhibitory drives occurs with precision 1/N. They compare this cancellation with the classical balanced network presented in van Vreeswijk and Sompolinsky (1998) where the cancellation occurs up to order 1/sqrt(N). This comparison is interesting but in order to make it the authors should provide some more information about the behavior of the network in the large N limit: if x is constant and independent of N, do the firing rates converge to a constant value as N increases? This seems hard to visualize as, even when counting on the cancellation of the mean E and I inputs, the magnitude of the total input current fluctuations σ will grow with respect to the threshold (σ~1/N^2/3 whereas threshold is 1/N^2). This is a reflection of the fact that the rate of incoming spikes grows with N whereas the size of each PSP is always of the order of the threshold (i.e. 1/N^2). I don't see how this network can asymptotically converge to non-zero rates in this large N limit.</p><p>A final comment: the authors present as an advantage the speed of the compensation mechanism which they say is &quot;faster than the timescale of neural spiking&quot;. To me this comment remarks the mismatch of time-scales between the two processes: (1) neural death, an infrequent event, relative to the time scale of neurons, and (2) balanced dynamics, almost instantaneous. More than a bonus I see it as an indication that there are probably other slower processes at work when compensating for such an irreversible damage that happens in such long time-scales. Presented as a prediction for manipulation experiments, the compensation can be viewed as the signature mechanism of balanced dynamics, as done here in the comparison with the experimental data. Additionally, there might be circumstances in which groups of neurons become transiently and frequently inactive (e.g. local DOWN state). The fast compensation described here would seem more tuned to address those fast inactivation events instead of neural death.</p><p><italic>Reviewer #3:</italic> </p><p>The manuscript at hand describes a phenomenon that is a routine occurrence for any living nervous system, namely the loss of some of its neurons through cell death. Even in the most severe cases of diseases like presumably Alzheimer's, such neuronal losses often go unnoticed for prolonged periods of time, presumably because they are A) tolerable in a system that relies on massively redundant population code, or B) the system can quickly compensate for the loss of neurons as they fall silent. Due to the lack of cortical plausible, mechanistically implementable computations, the modelling community has not approached this interesting research topic with much vigour.</p><p>Here, Barret et al. pick up from the well-described recurrently balanced neural network literature and study how balanced networks of various sizes compensate for neuron loss. They set out with two simple assumptions, i.e. that (1) outside stimuli can be described by combinations of quasi-steady-state firing rates of all neurons in the network and that (2) these firing rates are bounded by a cost function that prevents combinatorial codes in which the majority of neurons are silent in favour of a few active ones. With these two simple ingredients the authors show that the total number of spikes remains constant in the face of dramatic cell losses, as long as a tight balance of excitation and inhibition in the remaining neurons can be maintained. In fact, it is this balance that, when disturbed by cell loss, increases or decreases the firing rates in the remaining neurons to maintain faithful cumulative signal representation. The authors go on to show that this simple feature of balanced networks can account for compensatory behaviour in more complicated models such as Ben Yishai and Sompolinsky's (1995) bump attractor model (that is unfortunately not cited) and even more laborious models of sparse coding in V1. The results evoke vacillating responses in this reviewer of alleging outrageous triviality (anyone modelling balanced systems intuitively knows that this compensation happens) and respecting the originality of the thought process behind the sequence of presented results. After some deliberation, I agree with the authors fully in that optimal compensation by means of shifting, detailed balance has not been proposed before and is a worthwhile idea to entertain.</p><p>To show the link of shifting balanced dynamics in response to cell death, I would like to ask the authors to include better explanations and figures panels for all models that exhaustively show the mechanistic origins of the phenomenon they showcase, and not just its effects, i.e. the final tuning curves before and after. Additionally, I would wish for a better graphical way to discern between the two cases of cell loss on either side of the recovery boundary. In my opinion, <xref ref-type="fig" rid="fig3">Figures 3</xref>, <xref ref-type="fig" rid="fig4">4</xref>, <xref ref-type="fig" rid="fig5">5</xref> could be integrated into <xref ref-type="fig" rid="fig2">Figure 2</xref> or outsourced to supplementary materials and give way for the interesting cases of <xref ref-type="fig" rid="fig6">Figure 6</xref>–<xref ref-type="fig" rid="fig8">8</xref> without much loss of detail. Lastly, I would like to ask the authors to discuss clearly what experimental results could discriminate the initially mentioned scenarios A and B (redundancy and compensation, respectively), and what they would expect in the case of temporally varying neuronal representations such as the en vogue neuronal dynamics of Churchland and Shennoy (2012).</p><p>[Editors' note: further revisions were requested prior to acceptance, as described below.]</p><p>Thank you for resubmitting your work entitled &quot;Optimal compensation for neuron loss&quot; for further consideration at <italic>eLife</italic>. Your revised article has been favorably evaluated by Eve Marder (Senior Editor) and two reviewers, one of whom is a member of our Board of Reviewing Editors.</p><p>The authors have addressed four of the five suggestions we made in the first round of reviews, and the paper has improved. However, the fundamental logic of the paper is still not quite clear and needs to be made transparent. Specifically, the Methods section is hard to follow, and there seem to be some discrepancies in updating (e.g., it refers to a <xref ref-type="fig" rid="fig2">Figure 2I</xref> that does not exist, and <xref ref-type="fig" rid="fig2">Figure 2E</xref> is not referred to in the text). The derivation and translation into Dalian spiking networks is far from clear. Further, please note the following four points:</p><p>1) They create what they call &quot;tightly balanced&quot; networks, i.e. networks with very fast, precise / detailed inhibition by means of mathematical derivation and go on to say that the networks they built are much more balanced than vanVreesvijk models. We cannot assess this, because they don't show any reference simulations, or measures of balance. It is surprising that their technique works so well, as there are publications that claim the opposite, i.e. not easy to create such balance in networks.</p><p>2) What's more, they present &quot;tight balance&quot; as if it exists in a vacuum, (&quot;Also, it has been shown that this connectivity can be learned using simple spike timing-dependent plasticity rules (W. Brendel, R. Bourdoukan, P. Vertechi, et al., unpublished observations; Bourdoukan et al. (2012)), so extensive fine-tuning is not required to obtain these spiking networks.&quot;) but there are at least four other published methods of creating &quot;tight&quot; / detailed / precise&quot; balance in recurrent networks: Haas et al., JNeurophys. 2006, Vogels et al., Science, 2011, Luz &amp; Shamir, PlosCB, 2012 and Hennequin et al., Neuron, 2015. It's pretty powerful that the authors can just derive their architecture as they should be. To make this more interesting (and clear), the authors need to discuss and compare their result to these other studies. What are the crucial differences of &quot;tight balance&quot; to these other balances?</p><p>3) Another issue is the seemingly carefully calibrated &quot;spike reset threshold&quot;, that makes sure that the inhibitory activity is equal to x^? How does that work, and why is this a plausible assumption, or is this just a trick to make sure the inhibitory input is equal to the desired output? Please explain.</p><p>4) Finally, they write &quot;To be biologically more plausible, however, the derivative could be computed through a simple circuit that combines direct excitatory signal inputs with delayed inhibitory signal inputs (e.g. through feedforward inhibition).&quot; It is not clear that FF inhibition would do this, because it crucially misses the translation of the dynamics to be ==x^. In previous work, it has been shown that deleting cells out of a FF network has immediate effects on the dynamics of the read out (Vogels, NN09, <xref ref-type="fig" rid="fig4">Figure 4</xref>). This may be a different scenario, but it is far from clear in the Methods, and if this constraint is crucial, it needs to be carefully discussed to avoid the impression that the paper at hand is inherently circular.</p></body></sub-article><sub-article article-type="reply" id="SA2"><front-stub><article-id pub-id-type="doi">10.7554/eLife.12454.017</article-id><title-group><article-title>Author response</article-title></title-group></front-stub><body><p><italic>All of the reviewers felt that the submitted theoretical work on compensating for cell death was novel and interesting. However, it was also felt that many specifics were unclear or buried in other places, making biological interpretation difficult (e.g., excitatory, inhibitory cell types). The reviewers encourage the authors to consider the five following points, and at least the first four should be addressed in a revised submission. Additional points raised by the reviewers are detailed below, and should also be addressed.</italic> </p><p><italic>1) State clearly that the network is non-Dalian and explain the reasoning for this choice.</italic> </p><p>The reviewers point out a fundamental omission in our original work: the difference between excitatory and inhibitory neurons, and their (potentially) contrasting effects on a network’s response to neuron loss. We have addressed this problem in the following way:</p><p>First, we have added a Dalian network to our work, following the recipe of Boerlin et al. (2013), and use this model now as a starting point. Second, we now clearly state when we use non-Dalian networks. Third, we explain the reason for using non-Dalian networks. In a nutshell, using non-Dalian networks does not change our predictions, but makes life simpler. More specifically, whether we take the Dalian (E/I) network proposed in Boerlin et al. 2013, or we take a non-Dalian network, the essential predictions about optimal compensation and recovery boundary remain the same. The key reason is that both networks in effect minimize the same objective function, and, since compensation effects are guided by the objective function, both networks show the same compensatory responses. This is now clearly explained in the Results and Methods sections – see also point 3 below. Given this equivalence, we use the simpler non-Dalian network because it removes one layer of complexity, which we hope aids the reader in understanding (or simulating) the networks.</p><p><italic>2) State clearly what the recovery boundaries are, and plot figures that show which variables affect the recovery boundary for a given network with a given task. In general, spend a bit more time on the general mechanism before going into the additional models, or alternatively, explain in detail the additional models, like e.g. <xref ref-type="fig" rid="fig7">Figure 7</xref>, which is devoid of explanatory power.</italic> </p><p>We now explain the recovery boundary in greater detail. Specifically, we changed these items:</p><p>A) We now explain both the general compensatory mechanisms and the recovery boundary in greater detail by splitting them into two separate figures (<xref ref-type="fig" rid="fig2">Figure 2</xref> and <xref ref-type="fig" rid="fig3">3</xref>). <xref ref-type="fig" rid="fig2">Figure 2</xref>, which now contains a Dalian network, explains compensation in the simplest possible case (one input signal in a network of 100 neurons). <xref ref-type="fig" rid="fig3">Figure 3</xref> explains compensation and the recovery boundary in greater detail, and specifically shows (1) the interplay of neural tuning, neuron loss, and compensation, and (2) the breakdown in E/I balance in part of the population as a function of input signals and neural tuning. The latter part highlights that at the recovery boundary, balance will generally break down in only part of a population, and for only part of the input signals.</p><p>B) We clearly explain the recovery boundary for both the network with monotonic tuning curves and the networks with bell-shaped tuning curves. Both networks have been condensed to a single figure (now <xref ref-type="fig" rid="fig5">Figure 5</xref>).</p><p>We also included a mechanistic subtlety we did not address in the previous manuscript, namely the difference between two definitions of E/I balance: a standard definition in terms of synaptic inputs, and a non-standard definition in which a neuron’s self-reset is considered part of the inhibitory inputs. In large and massively redundant networks, the difference can be neglected. In smaller networks, or large networks with limited redundancy (defined as number of input signals over number of neurons), the difference is important, and the non-classical definition more clearly captures what we call re-balancing or a break-down in balance.</p><p><italic>3) An example of a Dalian network, independently of whether it works (same boundary?) or not (why does it not work?) should be added.</italic> </p><p>As stated above, using a Dalian network does not change the results. In a nutshell, the Dalian network has the same recovery boundary. To show that, and to be clearer about our use of non-Dalian networks, we now changed the order of the text, and we start with a Dalian network (new <xref ref-type="fig" rid="fig2">Figure 2</xref>). We furthermore added a section in the methods that explicitly explains how to construct Dalian networks that minimize an objective function, and that explains the equivalence, in terms of compensation effects and recovery boundaries, of Dalian and non-Dalian networks.</p><p>In short, here’s how we solve the problem of Dale’s law. First, we consider that all neurons simulated in the non-Dalian networks are excitatory, except that they have direct inhibitory connections with each other. In the Dalian network, these direct inhibitory connections are then re-routed through a separate population of inhibitory neurons. This population simply seeks to represent the firing of the excitatory neurons as faithfully as possible, using the same principle of efficient coding used in the excitatory population. As long as the inhibitory population is fully functional, it acts essentially identical to the direct inhibitory connections, and the compensatory properties of the excitatory neurons in the Dalian and non-Dalian networks are therefore the same. (‘Essentially’, because there can be minor quantitative differences due to approximation errors in smaller networks; as the network size grows, they become exactly the same.) The inhibitory population can similarly compensate for the loss of its neurons (up to a recovery boundary), and its compensatory properties are similar.</p><p><italic>4) Show the compensatory mechanisms at play more carefully in figures, i.e. show how balance is changing and finally breaking at the recovery boundary.</italic> </p><p>As stated above, we have expanded the mechanistic explanations in the first figures (<xref ref-type="fig" rid="fig2">Figures 2</xref> and <xref ref-type="fig" rid="fig3">3</xref>). We note that EI balance – when defined to include a neuron’s self reset – is not changing as long as the system can compensate for the loss of neurons. Once it is no longer able to compensate for certain signal dimensions, balance in all neurons coding for those signal dimensions breaks down. Importantly, the only measurable signature of successful compensation are therefore changes in firing rates. That is also one of the main reasons why the figures (now <xref ref-type="fig" rid="fig5">Figures 5</xref>–<xref ref-type="fig" rid="fig8">8</xref>) that discuss various implementations of the framework for different neural systems focus mostly on firing rate changes.</p><p><italic>5) Consider building a reservoir network model as in Sussillo &amp; Abbott trained to perform a task. Delete neurons, and check whether it is able to self-balance. If it doesn't, address whether this is related with the complexity of the task.</italic> </p><p>This is an interesting suggestion, and we believe it is indeed important to evaluate how different types of network models respond to neural damage. We have opted not to include this in this paper for two reasons. First, we feel that our paper, as it stands, is already quite full with materials, and we did not want to overburden the reader any further. Second, we think this point really deserves a wider investigation, i.e., should include models beyond the Susillo &amp; Abbott model, to study their ability to compensate for neuron loss. A graduate student is currently actively working on this larger problem, and we intend to publish these results elsewhere.</p><p>Additional changes:Besides these major changes, we point out a few other changes in the main manuscript:</p><p>A) Based on a comment of reviewer #2, we found that our over-emphasis of ‘neuron death’ may mislead readers, so we now prefer to opt for the slightly more neutral term ‘neuron loss’. Accordingly, we changed the title from ‘Optimal compensation for neuron death’ to ‘Optimal compensation for neuron loss’.</p><p>B) The manuscript changed substantially, so we opted not to provide a version in which changes are tracked because that version looked too messy.</p><p><italic>We are including the original reviews as they provide context for the revision points shown above.</italic> </p><p><italic>Reviewer #1:</italic> </p><p><italic>In this clearly written model theory paper, the authors propose that neural circuits compensate for neuronal death immediately, and show this using firing rate network models and several experiments. Although overall I found the work compelling, in general, I felt that the authors need to better describe 'biological correlates' for their models and to 'fill in the blanks' in various places to help the reader relate and better appreciate the work.</italic> </p><p><italic>Specifically:</italic> </p><p><italic>1) 'quadratic programming algorithm' and 'loss function' – could the authors provide suggestions of biological correlates of this. Presumably it would relate to excitatory-inhibitory balances in some way?</italic> </p><p>Throughout the manuscript, we have tried to de-emphasize mathematical concepts (e.g. quadratic programming and loss function) in favor of biological concepts. We have also expanded and rewritten the beginning of the Results section to explain these concepts more carefully.</p><p>In a nutshell, the key idea is the following: the patterns of spikes emitted by our networks ‘self-organize’ such that downstream readouts can extract the input signals from a highly efficient code. This self- organization is coordinated by the networks’ own internal dynamics and corresponds, mathematically speaking, to the minimization of an objective or loss function (which measures the quality of the population code). This idea of minimizing an objective with a network is quite similar in spirit to e.g. the Hopfield model. However, in our network we can actually identify a simple biological correlate of the loss function since each neuron’s membrane voltage measures a part of the coding error. Hence, information about the loss function is hidden away in the (subthreshold) membrane voltages, excitatory inputs cause increases in coding errors, and inhibitory inputs cause decreases in coding errors. If excitation and inhibition are balanced in every single neuron, then all coding errors are kept in check.</p><p><italic>2) While spiking rate models are used, differences between excitatory and inhibitory cells are not apparent to me. Given this, then the suggestion in the Discussion that 'these predictions could be tested using neuronal ablations or optogenetic silencing' would seem to suggest that cell type (at least as far as excitatory or inhibitory) does not matter, but this is clearly not true (one of many examples would be epilepsy work by Soltesz group – Krook-Magnuson et al. 2013 Nature Communications). For the reader to better appreciate what is intended by the various discussion suggestions, the authors should 'fill in the blanks' between their theoretical model and experimental suggestions being made.</italic> </p><p><italic>In the Methods it is stated that &quot;To be biologically more plausible, however, the derivative could be computed through a simple circuit that combines direct excitatory signal inputs with delayed inhibitory signal inputs (e.g. through feedforward inhibition).&quot;</italic> </p><p><italic>So, could the authors provide description/interpretation of excitatory/inhibitory cells/circuits in terms of their results/predictions? (i.e., biological plausibility).</italic> </p><p>Thanks for pointing out this fundamental omission. It was certainly not our intention to suggest that cell types are irrelevant. To address this point, we now start with a network that explicitly distinguishes excitatory and inhibitory neurons. We show that for each of these populations similar compensatory effects apply. We explain the resulting compensatory boundaries, and then move to networks that leave out the inhibitory subpopulations for simplicity. We discuss the recovery boundary for the excitatory population, but we do not explicitly discuss what happens in our networks when the inhibitory population can no longer compensate neuron loss (the result is an explosion of activity, whose exact nature we did not investigate).</p><p>The work by the Soltesz group is really interesting, but we are not sure that it directly applies to our case. Rather than moving from an intact to a pathological case, Krook-Magnuson et al. move from the pathological to the intact state (through inhibiting a subset of cells) Our framework makes clear predictions for what should happen when a system compensates for neuron loss; once a system moves beyond the recovery boundary, we essentially only know that the representation has to partially break down, and we can predict the immediate nature of the errors. However, it is much harder to predict (and likely problem-specific) how these immediate errors will affect the subsequent dynamics of the system.</p><p><italic>3) The authors use only positive firing rates (unlike other theoretical studies with positive and negative etc.), and this is a critical difference in what they achieve. While it is clear that negative firing rates may not make sense, the biological correlate of the authors' model is not clear – see 2.</italic> </p><p>The biological correlate is always a balanced, excitatory-inhibitory network, and we now explain this in greater detail at the beginning of the Results. To understand what is happening in these quite complex networks, we make two simplification steps. We first eliminate the inhibitory population and replace it by direct inhibitory connections between the excitatory neurons. We then show how one can understand the firing rates of the resulting networks via a mathematical optimization procedure (quadratic programming) that provides additional insights. Importantly, these are only mathematical simplifications, but not biological simplifications. In other words, all the results we obtain for the simplified networks or the firing rate calculations still apply to the general excitatory-inhibitory network. We now explain this latter bit in the Methods section.</p><p><italic>Reviewer #2:</italic> </p><p><italic>[…] There are however some aspects that the authors need to address in order to present the limitations of the model and the comparison with the data more clearly (see Comments below).</italic> </p><p><italic>Comments:</italic> </p><p><italic>Dale's law and the explanation of the EI balance breakdown. In <xref ref-type="fig" rid="fig2">Figure 2</xref>, the authors illustrate how when a fraction of the neurons below the recovery boundary is inactivated, the network dynamically compensates and keeps encoding x(t): the remaining neurons change their firing rate and the EI balance is maintained. Then they show that when all neurons with positive readout weight are removed, the balance can no longer be maintained because &quot;there are no longer enough inhibitory cells to balance excitation (or enough excitatory cells to balance inhibition)&quot;. This is a very misleading statement given that in this network there are no excitatory or inhibitory neurons (i.e. does not respect Dale's principle). I was very confused when I read this example thinking that neurons in the Figure should have been organized according to whether they are E or I, and not according to the sign of their readout weight. I had to go to the Methods section to later find out that there are no E and I cells in this network. This is in my opinion a main drawback given that (</italic>1<italic>) Dale's law seems to be true in cortical circuits and (</italic>2<italic>) the authors are presenting their work as an extension of classical work describing EI networks in which E and I populations are distinct. In their previous manuscript (Boerling et al. 2013) they address this question and propose potential solutions. All of it should be explicitly mentioned and discussed.</italic> </p><p>The reviewer raises a valid and important point which we did not address in the original manuscript. We have now corrected this omission. Specifically, we now start the Results with a general EI network, following the core ideas of Boerlin et al., 2013, and we separately consider the compensatory properties of the excitatory and inhibitory populations. We then move on towards the non-Dalian networks, a step that is done purely for mathematical convenience, since it removes one layer of complexity (separate inhibitory neurons) without changing the results. Importantly, the compensatory mechanisms are the same for these EI networks compared to the simpler non-Dalian networks. We explain the equivalence of the Dalian and non-Dalian networks in the Methods section.</p><p>Concerning the unfortunate confusion resulting from the sign of the readout weights in the old <xref ref-type="fig" rid="fig2">Figure 2</xref>: we have now opted to eliminate this additional complexity from the figure, so that readers will not confuse the sign of the readout weights with excitation vs. inhibition.</p><p><italic>Moreover, when describing <xref ref-type="fig" rid="fig2">Figure 2</xref> it should be explained why cells with positive readout weights (w+) can naively be viewed as excitatory cells when they provide both excitation and inhibition? Without this most readers will be misled to interpret that w+ neurons are Excitatory and w- neurons are inhibitory.</italic> </p><p>Our description of these cells was indeed misleading, and we apologize for the resulting confusion. We have now replaced <xref ref-type="fig" rid="fig2">Figure 2</xref> with a simulation of an EI network, and we no longer consider +/- neurons in order to simplify the explanations.</p><p><italic>Biased cost. The authors use a biased quadratic cost function containing a second term which tries to maintain a particular read-out of the rates (coefs c<sub>k</sub>) equal to a constant that they call the background rate. The authors describe in much detailed the implication of this bias in the intercept of the tuning curves (<xref ref-type="fig" rid="fig3">Figure 3C</xref> and Figure 3—figure supplement 2B-C). The motivation for this choice is however very succinct. Is there any benefit on having a non-zero intercept regarding the estimation error?</italic> </p><p>The introduction of the biased cost is indeed unfortunate. We now eliminated the term ‘biased cost’ and provide a different explanation for it. Briefly, we assume that the respective systems represent two signals, one that is variable, and one that is constant, which we now call ‘background signal.’</p><p>Of course, these changes are cosmetic and do not explain why we include such a background signal in the first place. Our explanation is two-fold. The first reason is pedagogical. Without the background signal, the tuning curves of one-dimensional systems are not particularly interesting, so we need a second signal to obtain more interesting tuning curves. In some sense, this is the simplest system that has interesting (piecewise linear) tuning curves. The second reason is the oculomotor integrator. We re-interpret this system in the following way. Rather than assuming that the system represents eye position per se, we now assume that it seeks to represent the two muscle activities that steer (horizontal) eye movements. These two muscles are antagonists, meaning that they contract and relax in opposition to each other. Assuming that we call the muscle activations <italic>m<sub>L</sub> </italic>and <italic>m<sub>R</sub></italic>, then the eye position is, to first approximation, given by the difference in muscle activation, <italic>x</italic> = <italic>m<sub>R</sub> − m<sub>L</sub></italic>. At the same time, the sum of the two muscle activations, <italic>y</italic> = <italic>m<sub>R</sub> </italic>+ <italic>m<sub>L</sub> </italic>will remain somewhat constant, again to first approximation. This is obviously a simplification, but we think a mild one. This second variable, <italic>y</italic>, is then mathematically identical to the constant, ‘biased cost’ from the previous manuscript.</p><p><italic>I ask this because it is a fairly common observation that cortical circuits seem to maintain the overall average population firing rate constant when dynamically encoding different variables (see e.g. <xref ref-type="fig" rid="fig2">Figure 2B</xref> Fujisawa et al., Nat Neuroscience 11 (<xref ref-type="bibr" rid="bib7">7</xref>), 2008). This observation seems to be obtained to the network in which there is a non-zero r<sub>B</sub> and non-zero uniform c<sub>k</sub>'s which seems interesting. However, the implications of this additional bias regarding the encoding ability of the circuit (estimation error of x(t)), its plausibility regarding the available data, etc. and not discussed.</italic> </p><p>The link to cortex is indeed quite interesting. However, our rewording of the oculomotor system in terms of muscle activities (as opposed to a biased cost) weakens that link a bit. There may still be a common underlying principle, but we don’t have a clear-cut, solid answer for what that would be.</p><p><italic>The prediction on the changes in tuning for V1 neurons is only shown in three units (<xref ref-type="fig" rid="fig8">Figure 8B</xref>). In Figure 8—figure supplement 1, the full population of neurons is examined but the changes are only reported in response to the &quot;preferred stimulus orientations&quot;. Thus, evaluating the prediction that there should be an increase of firing rate on the non-silenced neurons in response to the &quot;preferred orientation of the silenced cells&quot; is not possible. Either a different population analysis is performed or the statement about the outcome of the prediction at the population level (Results, last paragraph) should be modified.</italic> </p><p>We now plot the tuning curves of the full population in the new <xref ref-type="fig" rid="fig8">Figure 8A</xref>, and we show all changes in firing rates in the new <xref ref-type="fig" rid="fig8">Figure 8B</xref>. The plots illustrate that many (but not all) neurons change their firing rates in response to the preferred orientations of the silenced cells.</p><p>Our initial choice of showing a few examples was largely motivated by comparing our results with the original experimental papers (by Crook and colleagues). This series of papers is based on describing the firing rate changes in single neurons, and has few summary statistics. We therefore kept the single neuron examples that we compare to the data, and moved them into the new <xref ref-type="fig" rid="fig9">Figure 9</xref>.</p><p><italic>Results on the comparison with data should be brought forward. Since the paper is quite long as it is now, and the most novel and most interesting part is the comparison of the model predictions with data from three systems (<xref ref-type="fig" rid="fig5">Figures 5</xref>–<xref ref-type="fig" rid="fig8">8</xref>), I suggest moving the mechanistic part of how to implement the optimal solution using a spiking network (e.g. <xref ref-type="fig" rid="fig1">Figures 1</xref>–<xref ref-type="fig" rid="fig2">2</xref>) to an Appendix box or some sort of &quot;side note figure&quot;. This mechanistic part is an important aspect but, once it has been shown that it works, which has somehow already been covered in Boerling et al. 2013, it is no longer required to make the comparison with data (<xref ref-type="fig" rid="fig5">Figures 5</xref>–<xref ref-type="fig" rid="fig8">8</xref>, which are all derived by numerically solving Eqs. 4-5). Doing so, the reader will be able to quickly reach the most novel aspects without the need to go over the network implementation details.</italic> </p><p>We would ideally like the paper to be self-contained and oriented towards biologists. While we agree that readers that have read and digested the paper by Boerlin et al. will find the mechanistic explanations potentially repetitive, we do not want to re-direct the more biological readership to the Boerlin paper. We therefore chose to keep the mechanistic explanations, but we sought to focus better on the compensation vs recovery boundary predictions of the model, and we also now explain an EI network. However, we did shorten the mid-section of the paper which concerned the computations of firing rates, and we provided additional simulations for the V1 model.</p><p>In terms of comparison with the data, we provide a more detailed account of the data in the main text. We emphasize that the original series of studies by Crook and Eysel is largely based on analyzing single neurons one by one, so we did not change our plots. Our V1 model captures the core qualitative aspects of the data (namely, that firing rates across the population change in the direction of the silenced neurons), but not every single aspect of it, which we now also explain in the Results section.</p><p><italic>In the Discussion, the authors state that the strongest prediction of the model is that &quot;neurons with similar tuning to the dead neurons increase their firing rates and neurons with dissimilar tuning decrease their firing rates (unless they are already silent).&quot; The second part of this statement seems at odds to what is shown in <xref ref-type="fig" rid="fig6">Figures 6I</xref>, <xref ref-type="fig" rid="fig8">Figure 8A</xref> (top) and <xref ref-type="fig" rid="fig8">Figure 8C</xref> where dissimilar neurons either don't change much (e.g. Df is always &gt;=0 in <xref ref-type="fig" rid="fig8">Figure 8C</xref>) or tend to increase their rate in response to the preferred orientation of the dead cells (<xref ref-type="fig" rid="fig8">Figure 8A</xref> top). This rate decrease in dissimilar neurons seems to occur in the network shown in <xref ref-type="fig" rid="fig4">Figure 4B</xref> with monotonically increasing tuning curves. The details about the changes predicted and the generality of these changes in different systems (bell-shaped vs. monotonic tuning curves) need to be clarified.</italic> </p><p>This is an excellent point, and has allowed us to uncover some mistakes and conceptual imprecisions in our previous version.</p><p>First a mistake: in the previous version, we used the word ‘orientation tuning’ (which goes from 0<italic>−</italic>180<sup><italic>◦</italic></sup>), where we should have used the word ‘direction tuning’ (which goes from 0 <italic>−</italic> 360<sup><italic>◦</italic></sup>). Indeed, the experiments by Crook and Eysel knock out sets of neurons with specific direction tuning (not orientation tuning). While we had done exactly that, it was not clear from the main text. This is now corrected.</p><p>Second, the conceptual problems: We had indeed written similar and dissimilar tuning, in order to emphasize a straight line of thought from the simple 1d and 2d models. However, this was simply not the right way to think about compensation in a high-dimensional system. The key problem is that ‘similar’ or ‘dissimilar’ tuning will usually be assessed with respect to a few parameters (such as the direction of a moving grating, e.g.). However, to understand compensation one has to assess tuning in the original, high-dimensional space, and compare the relative directions of the decoding weights of the knocked-out neurons with the direction of the stimulus, and the direction of the remaining neurons.</p><p>The core reason why neural firing rates increase to both the preferred and anti-preferred direction in the V1 model can therefore only be understood in this high-dimensional space. Briefly, most neurons are only weakly direction-tuned. Consequently, when we knock out a set of neurons with a given preferred direction, the network model experiences a strong representational deficit for stimuli of this preferred direction, and a weaker representational deficit for stimuli of the anti-preferred direction. Since none of the neurons are likely to directly point in the correct directions in the high-dimensional space, the representational deficit is most easily fixed by increasing the firing rates of a combination of the other neurons. While decreases in firing rates are also possible, they generally tend to have less of an impact.</p><p>We have reworded the complete V1 section in order to clarify these points. We have also added a schematic (new <xref ref-type="fig" rid="fig8">Figure 8F</xref>) to illustrate graphically how compensation works in high-dimensional spaces.</p><p><italic>At the end of the Methods, the authors provide an explanation of the Tight balance between excitation and inhibition and a scaling argument that concludes that in the network consider here, the cancellation between the mean excitatory and inhibitory drives occurs with precision 1/N. They compare this cancellation with the classical balanced network presented in van Vreeswijk and Sompolinsky (1998) where the cancellation occurs up to order 1/sqrt(N). This comparison is interesting but in order to make it the authors should provide some more information about the behavior of the network in the large N limit: if x is constant and independent of N, do the firing rates converge to a constant value as N increases? This seems hard to visualize as, even when counting on the cancellation of the mean E and I inputs, the magnitude of the total input current fluctuations σ will grow with respect to the threshold (σ~1/N^2/3 whereas threshold is 1/N^2). This is a reflection of the fact that the rate of incoming spikes grows with N whereas the size of each PSP is always of the order of the threshold (i.e. 1/N^2). I don't see how this network can asymptotically converge to non-zero rates in this large N limit.</italic> </p><p>The section on scaling at the end of the Methods was indeed quite brief, and we have now added more details. Concerning the reviewer’s question, we note that a crucial point in scaling up net- works is which variables change and which remain constant. When we scale up our networks, we keep two quantities fixed. First, we assume that the readout (<italic>x</italic>ˆ) stays the same. Second, we assume that the average firing rates of the neurons (<italic>ri</italic>) stay the same. In other words, the firing rates converge to constant values more or less by definition, or by our choice of scaling. Given that the signal and the firing rates remain constant, everything else has to scale. So it follows that the decoders <italic>Di</italic> have to scale with 1<italic>/N</italic></p><p>(since <italic>x</italic>ˆ = ∑<italic><sub>i</sub> D<sub>i</sub>r<sub>i</sub></italic>), and from that follows the scaling of the connectivities and currents etc. This is now more clearly explained in the Methods.</p><p><italic>A final comment: the authors present as an advantage the speed of the compensation mechanism which they say is &quot;faster than the timescale of neural spiking&quot;. To me this comment remarks the mismatch of time-scales between the two processes: (1) neural death, an infrequent event, relative to the time scale of neurons, and (2) balanced dynamics, almost instantaneous. More than a bonus I see it as an indication that there are probably other slower processes at work when compensating for such an irreversible damage that happens in such long time-scales. Presented as a prediction for manipulation experiments, the compensation can be viewed as the signature mechanism of balanced dynamics, as done here in the comparison with the experimental data. Additionally, there might be circumstances in which groups of neurons become transiently and frequently inactive (e.g. local DOWN state). The fast compensation described here would seem more tuned to address those fast inactivation events instead of neural death.</italic> </p><p>That’s an excellent observation and we totally agree. Indeed, there are likely many compensation mechanisms, and the slower ones that have to do with adapation, learning, plasticity etc. are certainly much better investigated. We briefly mention this at the beginning of the Discussion. However, the reviewer’s observation has also helped us to note more clearly the mismatch between the title (‘neuron death’), the inactivation experiments we describe, and the instantaneous compensation we advocate. With hindsight, we believe that the emphasis on ‘neuron death’ may in fact be misleading for potential readers. Hence, we decided to change the title and wording to a slightly more neutral term: ‘neuron loss’.</p><p><italic>Reviewer #3: […] Here, Barret et al. pick up from the well-described recurrently balanced neural network literature and study how balanced networks of various sizes compensate for neuron loss. They set out with two simple assumptions, i.e. that (1) outside stimuli can be described by combinations of quasi-steady-state firing rates of all neurons in the network and that (2) these firing rates are bounded by a cost function that prevents combinatorial codes in which the majority of neurons are silent in favour of a few active ones. With these two simple ingredients the authors show that the total number of spikes remains constant in the face of dramatic cell losses, as long as a tight balance of excitation and inhibition in the remaining neurons can be maintained. In fact, it is this balance that, when disturbed by cell loss, increases or decreases the firing rates in the remaining neurons to maintain faithful cumulative signal representation. The authors go on to show that this simple feature of balanced networks can account for compensatory behaviour in more complicated models such as Ben Yishai and Sompolinsky's (1995) bump attractor model (that is unfortunately not cited) and even more laborious models of sparse coding in V1. The results evoke vacillating responses in this reviewer of alleging outrageous triviality (anyone modelling balanced systems intuitively knows that this compensation happens) and respecting the originality of the thought process behind the sequence of presented results. After some deliberation, I agree with the authors fully in that optimal compensation by means of shifting, detailed balance has not been proposed before and is a worthwhile idea to entertain.</italic> </p><p>We thank the reviewer for the helpful and honest comments. We totally agree that the rebalancing of balanced networks is, in many respects, a trivial property, and we now emphasize this a bit more in the Discussion, and seek to contrast this purely dynamical property of balanced networks with the notion of compensation, which implies a specific function. We also added a citation to the bump attractor model – thanks for pointing out this omission.</p><p><italic>To show the link of shifting balanced dynamics in response to cell death, I would like to ask the authors to include better explanations and figures panels for all models that exhaustively show the mechanistic origins of the phenomenon they showcase, and not just its effects, i.e. the final tuning curves before and after. Additionally, I would wish for a better graphical way to discern between the two cases of cell loss on either side of the recovery boundary.</italic> </p><p>We agree with the reviewer’s suggestion. We have now expanded the Results section in order to explain the compensatory mechanism and its breakdown better. Specifically, we now included an EI model (new <xref ref-type="fig" rid="fig2">Figure 2</xref>), and we included a bell-shaped tuning curve model (<xref ref-type="fig" rid="fig3">Figure 3</xref>) in which we explain in detail the compensatory mechanisms before and after the recovery boundary has been hit. We emphasize that the main experimental signature of successful compensation is a change in firing rate with EI balance remaining intact and essentially unchanged, whereas the main experimental signature of a failure to compensate is a breakdown in balance. We now explain that this breakdown in balance is signal-dependent and only occurs in part of the population.</p><p><italic>In my opinion, <xref ref-type="fig" rid="fig3">Figures 3</xref>, <xref ref-type="fig" rid="fig4">4</xref>, <xref ref-type="fig" rid="fig5">5</xref> could be integrated into <xref ref-type="fig" rid="fig2">Figure 2</xref> or outsourced to supplementary materials and give way for the interesting cases of <xref ref-type="fig" rid="fig6">Figure 6 – 8</xref> without much loss of detail.</italic> </p><p>We have streamlined the presentation around <xref ref-type="fig" rid="fig3">Figures 3</xref>–<xref ref-type="fig" rid="fig5">5</xref>. Specifically, we have condensed and integrated the old <xref ref-type="fig" rid="fig3">Figures 3</xref> and <xref ref-type="fig" rid="fig6">6</xref> into the new <xref ref-type="fig" rid="fig5">Figure 5</xref>. In turn, we have expanded the beginning in order to emphasize the mechanistic origin of the compensatory effects, and we have expanded the section around the experimental results, and specifically the V1 model, which is now explained in much more depth.</p><p><italic>Lastly, I would like to ask the authors to discuss clearly what experimental results could discriminate the initially mentioned scenarios A and B (redundancy and compensation, respectively), and what they would expect in the case of temporally varying neuronal representations such as the en vogue neuronal dynamics of Churchland and Shennoy (2012).</italic> </p><p>We emphasize that some redundancy is always necessary to compensate for neuron loss – without any redundancy, there can be no compensation. However, redundancy by itself is not sufficient.</p><p>Scenario A is redundancy without compensation. In this case, there would be degradation of performance, essentially proportional to the number of neurons lost. In real systems, one may expect that plasticity mechanisms in turn correct for that degradation, albeit on a slower time scale than the instantaneous correction proposed in our work.</p><p>Scenario B is (at least some) redundancy with compensation, meaning that firing rates in the remaining neurons actively adjust in order to compensate for the lost neurons. In this case, there should be no degradation whatsoever – until the recovery boundary is hit. <xref ref-type="fig" rid="fig9">Figure 9F</xref> now provides additional graphical intuition about what optimal compensation does.</p><p>In short, the best test would be an instantaneous (e.g. optogenetic) knock-out of a significant fraction of a network’s population. If the firing rates of the neurons adjust immediately so as to restore a (previously determined) readout, then some form of optimal compensation is at work. If the firing rates do not adjust, then the readout will be compromised to some extent, in which case we are just witnessing redundancy. Of course, the firing rates could also change in a way that is detrimental to a given readout, which could be a scenario C, a system that is not at all prepared to deal with neuron loss. Classical (non-robust) models of line attractors would probably fall in this latter category.</p><p>Concerning temporally varying representations, such as those of Churchland and Shenoy, our predictions would remain the same. A smaller fraction of knocked-out neurons could be compensated for, and a time-varying representation would remain intact. (In fact, this is exactly what happens when we take the slow connectivities from the Boerlin 2013 paper back into account.) Once the recovery boundary is hit, the representation would fail. In a dynamical system with time-varying representations, the resulting errors could then potentially build up, but studying the precise build-up of those initial representation errors would depend on the specifics of the underlying network architecture. (We are currently investigating some of these scenarios in detail, in order to better account for forthcoming experimental data; we chose not to include these results here, given that the current study is already quite lengthy.)</p><p>We discuss several possible experimental tests of our theory in the Results section. However, the key test is the one explained above: measure the instantaneous firing rate changes after partial knock-down of a neural population, and verify that these changes restore a (previously established) linear readout.</p><p>[Editors' note: further revisions were requested prior to acceptance, as described below.]</p><p><italic>The authors have addressed four of the five suggestions we made in the first round of reviews, and the paper has improved. However, the fundamental logic of the paper is still not quite clear and needs to be made transparent. Specifically, the Methods section is hard to follow, and there seem to be some discrepancies in updating (e.g., it refers to a <xref ref-type="fig" rid="fig2">Figure 2I</xref> that does not exist, and <xref ref-type="fig" rid="fig2">Figure 2E</xref> is not referred to in the text). The derivation and translation into Dalian spiking networks is far from clear.</italic> </p><p>We thank the reviewers for their comments. Here is what we did to address them:</p><p>Methods: We now explain the derivation of the Dalian spiking network in much more detail, and we have eliminated some inconsistencies in the notation that may have caused confusion. Furthermore, we rewrote the section about our definition of EI balance.</p><p>Results: We have similarly rewritten the parts concerned with the Dalian networks and the explanation of EI balance, i.e., the text around <xref ref-type="fig" rid="fig2">Figures 2</xref> and <xref ref-type="fig" rid="fig3">3</xref>.</p><p>Figure References: We have systematically checked all figure references, and eliminated a few typos and inconsistencies, including those mentioned.</p><p>Code: We have included the MATLAB code for all figures in this revision, which will allow both the referees and future readers to replicate and modify the simulations that we show.</p><p><italic>Further, please note the following four points:</italic> </p><p><italic>1) They create what they call &quot;tightly balanced&quot; networks, i.e. networks with very fast, precise / detailed inhibition by means of mathematical derivation and go on to say that the networks they built are much more balanced than vanVreesvijk models. We cannot assess this, because they don't show any reference simulations, or measures of balance. It is surprising that their technique works so well, as there are publications that claim the opposite, i.e. not easy to create such balance in networks.</italic> </p><p>We agree that we did not give a detailed comparison of balance in our networks compared with those of van Vreeswijk &amp; Sompolinsky. Briefly, when increasing network size, balance scales with</p><p>1<italic>/N</italic> in our networks, rather than <inline-formula><mml:math id="inf463"><mml:mrow><mml:mn>1</mml:mn><mml:msqrt><mml:mi>N</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> as in the networks of van Vreeswijk &amp; Sompolinsky. Hence, for larger networks, our networks are much more tightly balanced.</p><p>We did not provide a detailed comparison for two reasons. First, we had previously published the scaling arguments (Boerlin, Machens, Deneve, 2013, PLOS CB), and we believe that the brief recap in the Methods section is therefore sufficient. Second, we recently wrote a review (Deneve &amp; Machens, 2016, Nature Neuroscience) that explains many of those differences on a more conceptual level. However, we agree that those articles were not properly referenced, and we now explicitly included references to tight/loose balance in the method section (‘Tight balance of excitation and inhibition’).</p><p>While we did not explicitly study or simulate other balanced networks, we do show measures of EI balance in our networks in <xref ref-type="fig" rid="fig2">Figures 2G</xref> and <xref ref-type="fig" rid="fig3">3I</xref>. To better explain these measures, we have expanded and rewritten the section ‘Tight balance of excitation and inhibition’ in the Methods.</p><p>We are not entirely sure who argued that it should be difficult to create such a tight balance in networks. To show that doing so is rather straightforward and does indeed work well, and to allow readers to easily replicate our simulations and manipulate them, we included the complete simulation code (in MATLAB) for all figures.</p><p><italic>2) What's more, they present &quot;tight balance&quot; as if it exists in a vacuum, (&quot;Also, it has been shown that this connectivity can be learned using simple spike timing-dependent plasticity rules (W. Brendel, R. Bourdoukan, P. Vertechi, et al., unpublished observations; Bourdoukan et al. (2012)), so extensive fine-tuning is not required to obtain these spiking networks.&quot;) but there are at least four other published methods of creating &quot;tight&quot; / detailed / precise&quot; balance in recurrent networks: Haas et al., JNeurophys. 2006, Vogels et al., Science, 2011, Luz &amp; Shamir, PlosCB, 2012 and Hennequin et al., Neuron, 2015. It's pretty powerful that the authors can just derive their architecture as they should be. To make this more interesting (and clear), the authors need to discuss and compare their result to these other studies. What are the crucial differences of &quot;tight balance&quot; to these other balances?</italic> </p><p>It was certainly not our intention to slight the literature here, and pretend that we are the first to generate tightly balanced networks. We added a paragraph in the Discussion about ‘tightly balanced networks’ and included the mentioned references.</p><p>To address the specific point raised, we note that not all tightly balanced networks are the same. Apart from different assumptions about the underlying neuron models, and different definitions of balance, the network models also have quite different connectivities. We included a reference to an (as of yet) unpublished paper only because we wanted to address a reader’s potential worry that the connectivity in our networks is essentially designed (and not random as in most balanced networks).</p><p>More generally speaking, and referring back to point (1) as well, we absolutely agree that the commonalities and differences between our balanced networks and other balanced networks need to be worked out in greater detail. In fact, we are currently working on this (together in collaboration with Alfonso Renart – who has developed yet another tightly balanced networks). However, working out precisely which differences are important and which are unimportant is essentially a full scientific study in itself. While we appreciate and share the reviewer’s concern about understanding better how other types of networks relate to our framework, or how they may respond to neuron loss, we think that these topics are beyond the boundaries of the current paper, whose main focus is compensation for neuron loss, and its effect on neurons’ tuning.</p><p><italic>3) Another issue is the seemingly carefully calibrated &quot;spike reset threshold&quot;, that makes sure that the inhibitory activity is equal to x^? How does that work, and why is this a plausible assumption, or is this just a trick to make sure the inhibitory input is equal to the desired output? Please explain.</italic> </p><p>At first sight, it may seem that each neuron has a precisely tuned threshold and reset, which are coupled to the connectivity via the decoder weights. However, there is no fine tuning or careful calibration necessary. To see that, we first note that we can set all thresholds to the same value by redefining the voltages of the neurons (see e.g. Boerlin et al. 2013, PLOS CB, where this exercise is carried out in the subsection ‘Scaling and Physical Units’, Eq. (12)-(14)). After rescaling, the voltage reset is simply given by the equation</p><p>reset = −threshold − cost.</p><p>Accordingly, the reset does not need to match the (negative) threshold. Rather, any mismatch between the two can be interpreted as a cost term in the loss function. Such cost terms – as long as they are not excessive – will change the population spike patterns, but not the function of the system. Accordingly, we do not need to calibrate threshold and reset, rather, any mismatch will simply change the cost. Changing the cost, in turn, does change the precise spiking pattern of the system, but not its functionality and not its robustness to neuron loss.</p><p><italic>4) Finally, they write &quot;To be biologically more plausible, however, the derivative could be computed through a simple circuit that combines direct excitatory signal inputs with delayed inhibitory signal inputs (e.g. through feedforward inhibition).&quot; It is not clear that FF inhibition would do this, because it crucially misses the translation of the dynamics to be ==x^. In previous work, it has been shown that deleting cells out of a FF network has immediate effects on the dynamics of the read out (Vogels, NN09, <xref ref-type="fig" rid="fig4">Figure 4</xref>). This may be a different scenario, but it is far from clear in the Methods, and if this constraint is crucial, it needs to be carefully discussed to avoid the impression that the paper at hand is inherently circular.</italic> </p><p>We believe that this is a misunderstanding. This section is simply about the biophysical interpretation of the external inputs into the recurrent network. The section does not contain any additional constraints or assumptions about the network model.</p><p>To clarify, we note that each neuron receives external inputs of the general form ‘<italic>x</italic> + <italic>dx/dt</italic>’, i.e., a combination of the original signal, <italic>x <sub>j</sub></italic>, and its derivative, <italic>dx<sub>j</sub>/dt</italic>. There are two ways in which we can interpret this external input biophysically. First, we can simply think of this as a single external current input <italic>c(t</italic>) with <italic>c</italic> = <italic>x</italic> + <italic>dx/dt</italic>. In this case, the signal <italic>x(t</italic>), which we use throughout the paper, is simply a filtered version of an actual external input signal <italic>c(t</italic>). Second, we can think of this as a biophysical computation that operates on the signal <italic>x(t</italic>). In this case, each neuron receives two types of external inputs, the original signal input, <italic>x <sub>j</sub> (t</italic>), and its derivative, <italic>dx<sub>j</sub>/dt</italic>. The latter could be computed through a combination of direct excitatory signal inputs with delayed inhibitory signal inputs – and this is what we were referring to.</p><p>We have rewritten this section to explain the logic better and avoid any confusion.</p></body></sub-article></article>