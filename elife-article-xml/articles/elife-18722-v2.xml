<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1d3 20150301//EN"  "JATS-archivearticle1.dtd"><article article-type="research-article" dtd-version="1.1d3" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><front><journal-meta><journal-id journal-id-type="nlm-ta">elife</journal-id><journal-id journal-id-type="hwp">eLife</journal-id><journal-id journal-id-type="publisher-id">eLife</journal-id><journal-title-group><journal-title>eLife</journal-title></journal-title-group><issn pub-type="epub" publication-format="electronic">2050-084X</issn><publisher><publisher-name>eLife Sciences Publications, Ltd</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">18722</article-id><article-id pub-id-type="doi">10.7554/eLife.18722</article-id><article-categories><subj-group subj-group-type="heading"><subject>Structural Biology and Molecular Biophysics</subject></subj-group><subj-group subj-group-type="display-channel"><subject>Tools and Resources</subject></subj-group></article-categories><title-group><article-title>Accelerated cryo-EM structure determination with parallelisation using GPUs in RELION-2</article-title></title-group><contrib-group><contrib contrib-type="author" equal-contrib="yes" id="author-60380"><name><surname>Kimanius</surname><given-names>Dari</given-names></name><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="fn" rid="equal-contrib">†</xref><xref ref-type="fn" rid="con1"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" equal-contrib="yes" id="author-60381"><name><surname>Forsberg</surname><given-names>Björn O</given-names></name><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="fn" rid="equal-contrib">†</xref><xref ref-type="fn" rid="con2"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" corresp="yes" id="author-3361"><name><surname>Scheres</surname><given-names>Sjors HW</given-names></name><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0462-6540</contrib-id><xref ref-type="aff" rid="aff2">2</xref><xref ref-type="corresp" rid="cor1">*</xref><xref ref-type="other" rid="par-1"/><xref ref-type="fn" rid="con3"/><xref ref-type="fn" rid="conf2"/></contrib><contrib contrib-type="author" corresp="yes" id="author-59848"><name><surname>Lindahl</surname><given-names>Erik</given-names></name><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2734-2794</contrib-id><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="aff" rid="aff3">3</xref><xref ref-type="corresp" rid="cor2">*</xref><xref ref-type="other" rid="par-2"/><xref ref-type="other" rid="par-3"/><xref ref-type="other" rid="par-4"/><xref ref-type="other" rid="par-5"/><xref ref-type="fn" rid="con4"/><xref ref-type="fn" rid="conf1"/></contrib><aff id="aff1"><label>1</label><institution content-type="dept">Department of Biochemistry and Biophysics, Science for Life Laboratory</institution>, <institution>Stockholm University</institution>, <addr-line><named-content content-type="city">Stockholm</named-content></addr-line>, <country>Sweden</country></aff><aff id="aff2"><label>2</label><institution>MRC Laboratory of Molecular Biology</institution>, <addr-line><named-content content-type="city">Cambridge</named-content></addr-line>, <country>United Kingdom</country></aff><aff id="aff3"><label>3</label><institution>Swedish e-Science Research Center, KTH Royal Institute of Technology</institution>, <addr-line><named-content content-type="city">Stockholm</named-content></addr-line>, <country>Sweden</country></aff></contrib-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Subramaniam</surname><given-names>Sriram</given-names></name><role>Reviewing editor</role><aff id="aff4"><institution>National Cancer Institute</institution>, <country>United States</country></aff></contrib></contrib-group><author-notes><corresp id="cor1"><email>scheres@mrc-lmb.cam.ac.uk</email> (SHWS);</corresp><corresp id="cor2"><email>erik.lindahl@dbb.su.se</email> (EL)</corresp><fn fn-type="con" id="equal-contrib"><label>†</label><p>These authors contributed equally to this work</p></fn></author-notes><pub-date date-type="pub" publication-format="electronic"><day>15</day><month>11</month><year>2016</year></pub-date><pub-date pub-type="collection"><year>2016</year></pub-date><volume>5</volume><elocation-id>e18722</elocation-id><history><date date-type="received"><day>11</day><month>06</month><year>2016</year></date><date date-type="accepted"><day>14</day><month>11</month><year>2016</year></date></history><permissions><copyright-statement>© 2016, Kimanius et al</copyright-statement><copyright-year>2016</copyright-year><copyright-holder>Kimanius et al</copyright-holder><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="elife-18722-v2.pdf"/><abstract><object-id pub-id-type="doi">10.7554/eLife.18722.001</object-id><p>By reaching near-atomic resolution for a wide range of specimens, single-particle cryo-EM structure determination is transforming structural biology. However, the necessary calculations come at large computational costs, which has introduced a bottleneck that is currently limiting throughput and the development of new methods. Here, we present an implementation of the RELION image processing software that uses graphics processors (GPUs) to address the most computationally intensive steps of its cryo-EM structure determination workflow. Both image classification and high-resolution refinement have been accelerated more than an order-of-magnitude, and template-based particle selection has been accelerated well over two orders-of-magnitude on desktop hardware. Memory requirements on GPUs have been reduced to fit widely available hardware, and we show that the use of single precision arithmetic does not adversely affect results. This enables high-resolution cryo-EM structure determination in a matter of days on a single workstation.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.001">http://dx.doi.org/10.7554/eLife.18722.001</ext-link></p></abstract><kwd-group kwd-group-type="author-keywords"><title>Author Keywords</title><kwd>cryo-EM</kwd><kwd>image reconstruction</kwd><kwd>GPU</kwd><kwd>refinement</kwd><kwd>classification</kwd><kwd>micrograph</kwd></kwd-group><kwd-group kwd-group-type="research-organism"><title>Research Organism</title><kwd>None</kwd></kwd-group><funding-group><award-group id="par-1"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000265</institution-id><institution>Medical Research Council</institution></institution-wrap></funding-source><award-id>MC UP A025 1013</award-id><principal-award-recipient><name><surname>Scheres</surname><given-names>Sjors HW</given-names></name></principal-award-recipient></award-group><award-group id="par-2"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100004359</institution-id><institution>Vetenskapsrådet</institution></institution-wrap></funding-source><award-id>2013-5901</award-id><principal-award-recipient><name><surname>Lindahl</surname><given-names>Erik</given-names></name></principal-award-recipient></award-group><award-group id="par-3"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100007601</institution-id><institution>Horizon 2020</institution></institution-wrap></funding-source><award-id>EINFRA-2015-1-675728</award-id><principal-award-recipient><name><surname>Lindahl</surname><given-names>Erik</given-names></name></principal-award-recipient></award-group><award-group id="par-4"><funding-source><institution-wrap><institution>Swedish e-Science Research Centre</institution></institution-wrap></funding-source><principal-award-recipient><name><surname>Lindahl</surname><given-names>Erik</given-names></name></principal-award-recipient></award-group><award-group id="par-5"><funding-source><institution-wrap><institution>Swedish National Infrastructure for Computing</institution></institution-wrap></funding-source><award-id>2015/16-45</award-id><principal-award-recipient><name><surname>Lindahl</surname><given-names>Erik</given-names></name></principal-award-recipient></award-group><funding-statement>The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.</funding-statement></funding-group><custom-meta-group><custom-meta><meta-name>elife-xml-version</meta-name><meta-value>2.5</meta-value></custom-meta><custom-meta specific-use="meta-only"><meta-name>Author impact statement</meta-name><meta-value>Using GPUs for the costly computations in cryo-EM enables structure determination in mere days on a single workstation.</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="s1" sec-type="intro"><title>Introduction</title><p>With the advent of direct-electron detectors and advanced methods of image processing, structural characterisation of macromolecular complexes to near-atomic resolution is now feasible using single-particle electron cryo-microscopy (cryo-EM) (<xref ref-type="bibr" rid="bib7">Cheng, 2015</xref>; <xref ref-type="bibr" rid="bib12">Fernandez-Leiro and Scheres, 2016b</xref>). Although this has caused a rapid gain in its popularity, two technological factors still limit wide applicability of cryo-EM as a standard tool for structural biology.</p><p>First, partly due to the steep increase in demand, access to high-end microscopes is limited. This is being addressed with acquisition of new equipment in a large number of departments worldwide, as well as the establishment of shared infrastructures (<xref ref-type="bibr" rid="bib29">Saibil et al., 2015</xref>). Second, processing the large amounts of data produced by these microscopes requires computational hardware that is not directly accessible to many labs. Even at larger centres the computational requirements are so high that cryo-EM now suffers from a computational bottleneck. The work presented here addresses this second problem, to the end of drastically reducing the computational time and investment necessary for cryo-EM structure determination.</p><p>A typical cryo-EM data set may constitute hundreds or thousands of images (called micrographs) of a thin layer of vitreous ice in which multiple individual macromolecular complexes (called particles) are imaged. Because radiation damage imposes strict limitations on the electron exposure, micrographs are extremely noisy. Thus, to extract fine structural details, one needs to average over multiple images of identical complexes to cancel noise sufficiently. This is achieved by isolating two-dimensional particle-projections in the micrographs, which can then be recombined into a three-dimensional structure (<xref ref-type="bibr" rid="bib6">Cheng et al., 2015</xref>). The latter requires the estimation of the relative orientations of all particles, which can be done by a wide range of different image processing programs, such as SPIDER (<xref ref-type="bibr" rid="bib15">Frank et al., 1981</xref>, <xref ref-type="bibr" rid="bib14">1996</xref>), IMAGIC (<xref ref-type="bibr" rid="bib39">van Heel et al., 1996</xref>), BSOFT (<xref ref-type="bibr" rid="bib18">Heymann and Belnap, 2007</xref>), EMAN2 (<xref ref-type="bibr" rid="bib37">Tang et al., 2007</xref>), SPARX (<xref ref-type="bibr" rid="bib20">Hohn et al., 2007</xref>), FREALIGN (<xref ref-type="bibr" rid="bib17">Grigorieff, 2007</xref>), XMIPP (<xref ref-type="bibr" rid="bib31">Scheres et al., 2008</xref>), RELION (<xref ref-type="bibr" rid="bib33">Scheres, 2012a</xref>), or SIMPLE (<xref ref-type="bibr" rid="bib10">Elmlund and Elmlund, 2012</xref>).</p><p>These programs also need to tackle the problem that any one data set typically comprises images of multiple different structures; purified protein samples are e.g. rarely free from all contaminants. Multiple conformations, non-stoichiometric complex formation, or sample degradation are all possible sources of additional data heterogeneity. The classification of heterogeneous data into homogeneous subsets has therefore proven critical for high-resolution structure determination and provides a tool for structural analysis of dynamic systems. However, identifying structurally homogeneous subsets in the data by image classification algorithms adds computational complexity, and often increases the computational load dramatically.</p><p>An increasingly popular choice for processing cryo-EM data is an empirical Bayesian approach to single-particle analysis (<xref ref-type="bibr" rid="bib32">Scheres, 2012b</xref>) implemented in the computer program RELION (<xref ref-type="bibr" rid="bib33">Scheres, 2012a</xref>). In the underlying regularised likelihood optimisation algorithm, optimal weights for the contribution of different Fourier components to the determination of orientations, as well as to the three-dimensional reconstruction(s), are learnt from the data in an iterative manner, thereby reducing the need for user input. In addition, RELION has proven highly effective in classifying a wide range of structural variation, such as conformational dynamics within protein domains (<xref ref-type="bibr" rid="bib2">Bai et al., 2015</xref>), or of very small sub-populations in large data-sets (<xref ref-type="bibr" rid="bib13">Fernández et al., 2013</xref>). Unfortunately, the regularised likelihood optimisation algorithm that underlies these calculations is computationally demanding. We estimate that a recent 3.7 Å structure of a yeast spliceosomal complex (<xref ref-type="bibr" rid="bib27">Nguyen et al., 2016</xref>) required more than half a million CPU hours of classification and high-resolution refinement. Computations of this magnitude require the use of high-performance computing clusters with dedicated staff, and restrict the exploration of new image processing schemes.</p><p>The introduction of hardware accelerators, such as graphics processors (GPUs), has recently transformed other scientific fields where computation was a bottleneck. To exploit this type of hardware, substantial redesigns of algorithms are required to make many independent tasks simultaneously available for computation, which is known as exposing (low-level) parallelism. However, the possible gain is equally substantial; together with commodity hardware it has been a revolution e.g. for molecular dynamics simulations (<xref ref-type="bibr" rid="bib30">Salomon-Ferrer et al., 2013</xref>; <xref ref-type="bibr" rid="bib1">Abraham et al., 2015</xref>), quantum chemistry (<xref ref-type="bibr" rid="bib38">Ufimtsev and Martínez, 2008</xref>), and machine learning (<xref ref-type="bibr" rid="bib22">Jia et al., 2014</xref>).</p><p>GPU acceleration of computationally expensive algorithms has also been performed in other cryo-EM software, with varying success and subsequent impact in the field. Many attempts have achieved significant improvement in performance through acceleration of only a few subroutines (<xref ref-type="bibr" rid="bib24">Li et al., 2010</xref>; <xref ref-type="bibr" rid="bib36">Tagare et al., 2010</xref>; <xref ref-type="bibr" rid="bib25">Li et al., 2013</xref>; <xref ref-type="bibr" rid="bib19">Hoang et al., 2013</xref>), relieving major bottlenecks. The overall software architecture and data structures were however not modified to better suit the hardware. In contrast, other tools were designed or fundamentally reformulated with a particular hardware in mind (<xref ref-type="bibr" rid="bib26">Li et al., 2015</xref>; <xref ref-type="bibr" rid="bib41">Zhang, 2016</xref>); this tends to lead to more substantial long-term performance benefits, and for some steps the accelerated implementations have fully replaced CPU codes. Historically, RELION (like most alternatives) has scaled to the large resources it needs by using higher-level parallelism, where computational tasks are divided into subsets of particle images in each iterative refinement step. However, lower-level core computations on individual particle images in RELION have remained serialised since its introduction more than four years ago.</p><p>Here, we describe a new implementation of the regularised likelihood optimisation algorithm in RELION that uses GPUs to address its computational bottlenecks. We have chosen to implement our increased parallelism in CUDA, a programming language provided by NVIDIA. The CUDA language currently dominates the GPU computing market, and provides a stable programming environment with a rich C++ interface. We also utilise a number of libraries provided within the CUDA framework, such as cuFFT for fast Fourier transforms (FFTs), and CUB/thrust for sorting and other standard functions. In addition to high-end professional cards there is wide availability of cheap consumer hardware that supports CUDA, which provides outstanding value for many research groups. However, the acceleration and parallelisation approaches are general and should be possible to port to other architectures in the future.</p><p>The present acceleration of relion addresses the most computationally intensive steps in a typical image processing workflow. This includes classification of data into structurally homogeneous subsets (2D or 3D classification) and high-resolution refinement of each homogeneous such set of particles (3D auto-refine). In addition, we describe an improved algorithm for semi-automated selection of particles from micrographs (<xref ref-type="bibr" rid="bib35">Scheres, 2015</xref>), this too targeting GPUs. Memory requirements have been reduced to fit widely available consumer graphics cards, and we show that the current adaptation to use single precision floating-point arithmetic does not cause loss of resolvable detail in the final structures. These developments enable high-resolution cryo-EM structure determination in a matter of days on individual workstations rather than relying on large clusters.</p></sec><sec id="s2" sec-type="methods"><title>Methods</title><sec id="s2-1"><title>Regularised likelihood optimisation</title><p>The regularised likelihood optimisation in relion uses an Expectation-Maximization algorithm (<xref ref-type="bibr" rid="bib8">Dempster et al., 1977</xref>) to find the most likely 3D density map for a large set of 2D particles images with unknown orientations, under the prior expectation that the 3D map has limited power in the Fourier domain. This iterative algorithm involves two fundamental steps at every iteration. In the expectation, or E-step, one calculates probability distributions for the relative orientations of all particles based on the current estimate of the 3D map. In the subsequent maximization, or M-step, one updates the estimate for the 3D map. Intuitively, these two steps represent alignment of the particles with respect to a common 3D reference, and reconstruction of a new reference map, respectively. The algorithm is typically started from an initial 3D reference map at low resolution, and is guaranteed to increase the likelihood of the 3D map given the data and the prior at every iteration, until converging onto the nearest local minimum. In the presence of structural variability in the data set, multiple 3D reference maps, or 3D classes, can be refined simultaneously. In this case, the class assignments of the particles are not known either. RELION also allows the refinement of multiple 2D references, or 2D classes. In that case, only in-plane orientations are sampled.</p><p>Within a single iteration, the E-step requires four major computational stages (<xref ref-type="fig" rid="fig1">Figure 1</xref>): (i) The current 3D reference map is projected along many orientations; (ii) the difference between these reference projections and every particle image is calculated for each orientation and for each sampled translation; (iii) all these differences are converted to probability-weights; and (iv) those weights are used to update a running sum of the back-projected particle images in 3D Fourier space. In practice, to limit the number of operations, stages (i) and (ii) are performed twice for every particle. A first pass examines all orientations using a relatively coarse orientational sampling, and a second pass re-examines the regions of orientational space with significant probabilities at an increased sampling density. Still, millions of orientations and translations are typically compared for each particle at every iteration. Converting the resulting differences to weights is a relatively cheap operation as each image-orientation pair at this stage is represented by a single scalar value. The back-projection in operation (iv) is more demanding since it is again necessary to work with all pixels of each image in multiple orientations. After the E-step has been evaluated for all (typically tens to hundreds of thousand) particles, in the M-step the running sum in 3D Fourier space is transformed into an updated 3D reference map for the next iteration. The corresponding reconstruction algorithm is expensive in terms of computer memory, but it typically needs orders of magnitude less time than the E-step because it is only performed once for every iteration. Therefore, operations (i), (ii) and (iv) of the E-step have dominated execution time in previous versions of RELION.<fig id="fig1" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.002</object-id><label>Figure 1.</label><caption><title>High level flowchart of RELION.</title><p>(<bold>A</bold>) Operations and the real vs. Fourier spaces used during (<bold>B</bold>) image reconstruction in RELION. Micrograph input and model setup use the CPU, while most subsequent processing steps have been adapted for accelerator hardware. The highlighted orientation-dependent difference calculation is by far the most demanding task, and fully accelerated. Taking 2D slices out of (and setting them back into) the reference transforms has also been accelerated at high gain. The inverse FFT operation has not yet been accelerated, but uses the CPU.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.002">http://dx.doi.org/10.7554/eLife.18722.002</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig1-v2"/></fig></p></sec><sec id="s2-2"><title>Extracting parallelism for accelerators</title><p>Modern accelerator processors - such as GPUs - achieve very high floating-point performance by incorporating a large set (thousands) of very simple and streamlined functional units instead of the handful advanced general-purpose cores in a normal (CPU) processor. In previous versions, RELION has scaled over multiple CPU cores by using separate processes for independent particle images. GPUs however require much broader low-level parallelism to increase performance substantially. Our implementation of RELION therefore required a reformulation to expose additional available parallelism. Since most of the computation time is spent on the E-step for a typical application, we focussed our acceleration efforts on this part. By treating multiple reference maps, all relative image translations and orientations, and even individual image pixels as parallel tasks (<xref ref-type="fig" rid="fig2">Figure 2</xref>), we created sufficient low-level parallelism to provide outstanding performance on accelerator hardware such as GPUs.<fig id="fig2" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.003</object-id><label>Figure 2.</label><caption><title>Extensive task-level parallelism for accelerators.</title><p>While previously relion only exploited parallelism over images (left), in the new implementation classes and all orientations of each class are expressed as tasks that can be scheduled independently on the accelerator hardware (e.g. GPUs). Even individual pixels for each orientation can be calculated in parallel, which makes the algorithm highly suited for GPUs.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.003">http://dx.doi.org/10.7554/eLife.18722.003</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig2-v2"/></fig></p><p>Formulating and enabling the available parallelism in RELION for GPUs did present specific challenges. In operations (i) and (ii) of the E-step, it would for instance require very large amounts of fast memory to pre-calculate projections of the 3D reference maps for all examined orientations. Pre-calculation could potentially increase re-use of data on the GPU, but it would impose severe limitations on the number of simultaneously examined references, input image sizes, and sampling granularity. Instead, like the CPU code, our implementation stores a two-fold oversampled Fourier transform of each reference in GPU memory, and 2D slices (along any orientation) are extracted only when needed. This alleviates limitations imposed by hardware, and makes it possible to improve performance through the use of so-called GPU <italic>textures</italic>. Textures store data that require fast lookup, and the corresponding <italic>texture units</italic> provide support for performing non-integer pixel interpolation of texture data in a single instruction with only marginal loss of precision. In graphics applications, textures are used to efficiently rescale image data. In RELION, they turn out to be well-suited for the resampling operations when taking slices from the 3D Fourier transform. The on-the-fly extraction of 2D Fourier slices is combined with the very broad parallelism of calculating squared differences between all pixels of all particle images and the reference projections in all orientations and all translations. For the technically interested reader, details of how we exploit this parallelism in our implementation of the squared difference calculation are presented in Appendix I. Technical details of how we also accelerated operation (iv) of the E-step, the back-projection of 2D images into the oversampled 3D Fourier transform, are presented in Appendix II. When combined, the E-step can now be evaluated in a fraction of the runtime previously needed.</p><p>Finally, like most scientific software, the CPU version of relion has historically used double precision, and merely recompiling in single does not improve performance. However, all GPUs provide higher performance for single precision, and the dedicated texture units can typically only perform reduced-precision operations. For these reasons we also reformulated our implementation of the E-step to be less precision-sensitive, making it possible to execute these calculations in single precision without adverse effects on the final results. As we did not accelerate the M-step, this part of the algorithm remains on the CPU and is still executed in double precision.</p></sec><sec id="s2-3"><title>Semi-automated picking</title><p>RELION also implements a template-based particle selection procedure, which calculates a probability measure (the R-value) for each pixel in the micrograph to signify the likelihood that it is the location of any of the provided templates (<xref ref-type="bibr" rid="bib35">Scheres, 2015</xref>). The R-value map of a micrograph considers all possible rotations of each template, and is subsequently used in a peak-search algorithm that locates particles within the original micrograph (<xref ref-type="fig" rid="fig3">Figure 3</xref>). These calculations are performed in Fourier space, where they are highly efficient (<xref ref-type="bibr" rid="bib28">Roseman, 2003</xref>). In fact, they are so fast that their execution time becomes negligible compared to the time spent performing FFTs to transform image objects between real and Fourier spaces. Consequently, even though reference templates are also treated as independent tasks to increase parallelism in the GPU version, a much larger gain is found at the level of template rotations, through parallel execution of FFTs. For example, when using 5-degree incremental template rotations, 72 such inverse FFTs are now performed concurrently on the GPU through the cufft cuda library. The size of these FFTs is now also padded automatically, since substantial performance penalties can occur if the transform size includes any large prime factors.<fig id="fig3" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.004</object-id><label>Figure 3.</label><caption><title>Semi-automated particle picking in RELION-2.</title><p>The low-pass filter applied to micrographs is a novel feature in RELION, aimed at reducing the size and execution time of the highlighted inverse FFTs, which accounts for most of the computational work. In addition to the inverse FFTs, all template- and rotation-dependent parallel steps have also been accelerated on GPUs.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.004">http://dx.doi.org/10.7554/eLife.18722.004</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig3-v2"/></fig></p></sec></sec><sec id="s3" sec-type="results"><title>Results</title><sec id="s3-1"><title>Acceleration of regularised likelihood optimisation</title><sec id="s3-1-1"><title>Performance</title><p>The performance of our implementation on a workstation equipped with modern GPUs can exceed that of hundreds of CPU cores (<xref ref-type="fig" rid="fig4">Figure 4</xref>). This is most prominent for increasing numbers of pixels, orientations and classes, due to the increased low-level parallelism RELION-2 has been designed to use efficiently. Therefore, calculations where many classes and orientations need to be sampled, e.g. 3D classifications over multiple classes and with fine sampling of orientations, experience the greatest gain from the acceleration (<xref ref-type="fig" rid="fig4">Figure 4</xref>). Traditionally such large problems have required cluster-size resources with high-performance interconnects for fast communication. As seen in the performance benchmarks, RELION-2 makes it possible to run many of these calculations even on workstations or low-cost desktop solutions (<xref ref-type="fig" rid="fig4">Figure 4</xref>). GPU hardware evolves rapidly, but appendix XI contains a few recommendations about the solutions we currently think are most cost-efficient. For sufficiently large computational problems, relion’s processing time scales linearly with increased number of classes, but since the extra calculations are much faster with the GPU-enabled version the relative advantage is larger the more classes are used (<xref ref-type="fig" rid="fig4">Figure 4D</xref>). In practice we believe this will make it more common to use very large numbers of classes in 3D classification. Further scrutiny reveals that the calculations still performed on the CPU actually dominate both the execution and scaling even for the GPU version (<xref ref-type="fig" rid="fig4">Figure 4E</xref>), which indicates new bottlenecks are now limiting scaling - we intend to focus on these parts of the code for future improvements.<fig id="fig4" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.005</object-id><label>Figure 4.</label><caption><title>RELION-2 enables desktop classification and refinement using GPUs.</title><p>EMPIAR (<xref ref-type="bibr" rid="bib21">Iudin et al., 2016</xref>) entry 10028 was used to assess performance, using refinements of 105 k ribosomal particles in 360<sup>2</sup>-pixel images. (<bold>A</bold>) A quad-GPU workstation easily outperforms even a large cluster job in 3D classification. (<bold>B</bold>) In 2D classification, the GPU desktop performs slightly better in the first few iteration and then provides performance equivalent to the 280 CPU cores. (<bold>C</bold>) Total time for 25 iterations of 3D classification for a few different hardware configurations. (<bold>D</bold>) Additional classes are processed at reduced cost compared to CPU-only execution, due to faster execution and increased capacity for latency hiding. (<bold>E</bold>) With increasing number of classes, the time spent in non-accelerated vs accelerated execution increases. (<bold>F</bold>) The workstation also beats the cluster for single-class refinement to high resolution, despite the generally lower degree of parallelism. This is particularly striking for the finer exhaustive sampling at 3.8<inline-formula><mml:math id="inf1"><mml:msup><mml:mi/><mml:mo lspace="4.2pt">∘</mml:mo></mml:msup></mml:math></inline-formula> due to the GPU’s ability to parallelise the drastically increased number of tasks.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.005">http://dx.doi.org/10.7554/eLife.18722.005</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig4-v2"/></fig></p></sec><sec id="s3-1-2"><title>Limited precision and accuracy</title><p>RELION has used double precision arithmetic since its first release in order to be as accurate as possible, at the cost of increased memory requirements. While there are professional GPUs with good double precision performance, the consumer market is dominated by visualisation and gaming applications, and for this reason cheap hardware only provides good performance for single precision. Even for professional hardware, the performance is better with single precision, although the difference is smaller. This makes it highly desirable to use single precision arithmetics wherever possible. In addition to much better floating-point throughput, single precision calculations reduce the memory requirements by a factor two, and make it possible to employ textures for image rotation. The relative advantage of single precision can thus be much higher on GPUs compared to CPUs. Because the required precision depends on the algorithms used in the application, part of the development of RELION-2 involved the evaluation of reconstructed quality when using single precision. We evaluate this primarily by examining the agreement of refinements results, characterising both the reconstructed volume and the image orientation assignment statistics. As image orientations are analogous to a location and rotation on the unit sphere, we compared refinement results of the EMPIAR 10028 dataset by the distribution of angular differences for all images. Two double-precision CPU refinements (using different random seeds) produce distributions where 81% of images fall within <inline-formula><mml:math id="inf2"><mml:msup><mml:mn>1</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula> of the other. Given that this distribution is modulated by the sine of the angle, this is a very close agreement. The single-precision GPU implementation finds 82% of images within the same <inline-formula><mml:math id="inf3"><mml:msup><mml:mn>1</mml:mn><mml:mo>∘</mml:mo></mml:msup></mml:math></inline-formula> tolerance. (<xref ref-type="fig" rid="fig5s1">Figure 5—figure supplement 1</xref>). In other words, the differences due to random seeds are at least as large as any systematic variation between the CPU and GPU versions. While a small loss of precision was observed e.g. in the fast interpolation (texture) intrinsics, the assignments of image orientations are similar enough to not influence the final reconstruction quality (<xref ref-type="fig" rid="fig5">Figure 5</xref>). In contrast, single-precision execution of the iterative gridding algorithm that underlies the reconstruction in the M-step (<xref ref-type="bibr" rid="bib33">Scheres, 2012a</xref>) did exhibit a notable deviation from the double-precision version when first tested. Therefore, we opted for a hybrid implementation of the algorithm: The computationally demanding slice projections, probability calculations, and back-projections in the E-step are performed in single precision on the GPU, while the reconstruction in the M-step remains in double precision on the CPU. Because the M-step is partially responsible for the new bottlenecks apparent in <xref ref-type="fig" rid="fig4">Figure 4E</xref> this is a candidate for additional future optimisation, but for now the hybrid approach provides a good compromise.<fig-group><fig id="fig5" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.006</object-id><label>Figure 5.</label><caption><title>The GPU reconstruction is qualitatively identical to the CPU version.</title><p>(<bold>A</bold>) A high-resolution refinement of the Plasmodium falciparum 80S ribosome using single precision GPU arithmetic achieves a gold-standard Fourier shell correlation (FSC) indistinguishable from double precision CPU-only refinement (previously deposited as EMD-2660). The FSC of full reconstructions comparing the two methods shows their agreement far exceeds the recoverable signal (grey), and as shown in <xref ref-type="fig" rid="fig5s1">Figure 5—figure supplement 1</xref> the variation in angle assignments match the differences between CPU runs with different random seeds. (<bold>B</bold>) Partial snapshots of the final reconstruction following post-processing, superimposed on PDB ID 3J79 (<xref ref-type="bibr" rid="bib40">Wong et al., 2014</xref>).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.006">http://dx.doi.org/10.7554/eLife.18722.006</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig5-v2"/></fig><fig id="fig5s1" position="float" specific-use="child-fig"><object-id pub-id-type="doi">10.7554/eLife.18722.007</object-id><label>Figure 5—figure supplement 1.</label><caption><title>The CPU and GPU implementations provide qualitatively identical distributions of image orientations.</title><p>For two CPU runs with different random seeds, 81% of images fall within 1<inline-formula><mml:math id="inf4"><mml:msup><mml:mi/><mml:mo lspace="4.2pt">∘</mml:mo></mml:msup></mml:math></inline-formula>, and for a GPU vs. CPU run 82%. Note that the probability of observing small angles vanishes since the number of potentially available points is proportional to the sine of the angle, which approaches zero for identical orientations. Both distributions were aligned against the reference refinement by fitting reconstructed models.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.007">http://dx.doi.org/10.7554/eLife.18722.007</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig5-figsupp1-v2"/></fig></fig-group></p></sec><sec id="s3-1-3"><title>Disk and memory considerations</title><p>relion has traditionally required large amounts of memory. Fortunately its peak use is however <italic>not</italic> during the accelerated, computationally most intensive, parts of the algorithm. Rather, memory use peaks during the M-step, which is executed on the CPU using the gridding reconstruction algorithm mentioned above. The amount of available GPU memory still remains a limitation, as it determines the capacity for storage of the oversampled Fourier transforms of one or more references. This is of particular concern for larger and higher-resolution structures, which require more memory to be faithfully represented. When resolving detail at the Nyquist frequency, due to a twofold oversampling (associated with gridding during reconstruction), relion requires memory corresponding to twice the cube of the image dimension. For example, when using 400<inline-formula><mml:math id="inf5"><mml:msup><mml:mi/><mml:mn>2</mml:mn></mml:msup></mml:math></inline-formula>-pixel particle images, the required grid size is 800<inline-formula><mml:math id="inf6"><mml:msup><mml:mi/><mml:mn>3</mml:mn></mml:msup></mml:math></inline-formula>, which becomes <inline-formula><mml:math id="inf7"><mml:mo>∼</mml:mo></mml:math></inline-formula>2 GB per class, since each value requires 4 bytes in single precision. Moreover, as the reconstructed object also needs to be accommodated, this number is effectively multiplied by 2.5. In practice, memory use with image sizes up to <inline-formula><mml:math id="inf8"><mml:msup><mml:mn>400</mml:mn><mml:mn>2</mml:mn></mml:msup></mml:math></inline-formula> indicate that at most 6 GB of GPU memory is needed to perform refinement to Nyquist (<xref ref-type="fig" rid="fig6">Figure 6</xref>). Classification using 3D references is usually performed at resolutions much lower than the Nyquist limit, and for this reason its memory requirements are typically much lower.<fig id="fig6" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.008</object-id><label>Figure 6.</label><caption><title>GPU memory requirements.</title><p>(<bold>A</bold>) The required GPU memory scales linearly with the number of classes. (<bold>B</bold>) The maximum required GPU memory occurs for single-class refinement to the Nyquist frequency, which increases rapidly with the image size. Horizontal grey lines indicate avaliable GPU memory on different cards.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.008">http://dx.doi.org/10.7554/eLife.18722.008</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig6-v2"/></fig></p><p>To enable efficient evaluation and good scaling on GPUs, several new methods to manually manage data efficiently have been implemented. Lower levels of parallelism are coalesced into larger objects using customised tools, which results in more efficient use of memory (see appendices I-II for details). In addition, because of the much improved performance, multiple tasks have become limited by how fast input data can be read from disk. Therefore, we now find it highly beneficial to explicitly cache data on local solid state devices (SSDs), as has also been observed for GPU-accelerated CTF estimation (<xref ref-type="bibr" rid="bib41">Zhang, 2016</xref>). To allow this in a straightforward way, RELION-2 features the ability to automatically copy data sets to fast local disks prior to refinement, which further increases performance during less computationally intensive steps, such as 2D classification.</p></sec></sec><sec id="s3-2"><title>Acceleration of automatic particle picking</title><sec id="s3-2-1"><title>Low-pass filtering of micrographs</title><p>Even after parallelisation and acceleration on GPUs, the cross-correlation-based particle selection in relion is dominated by computing many large inverse FFTs (<xref ref-type="fig" rid="fig3">Figure 3</xref>), as has been observed previously for similar methods (<xref ref-type="bibr" rid="bib4">Castaño-Díez et al., 2008</xref>). Reducing their size is thus the most straight-forward way to further improve execution performance. Reference templates are typically subject to low-pass filtering, and for this reason we investigated the possibility to apply a similar filtering to all micrographs, which reduces computations by discarding high-frequency information.</p><p>We found little difference in the particles selected when discarding resolution information in micrographs beyond that of search templates. While intuitively straightforward, this conclusion drastically reduces the size of FFT grids and subsequent computations, which provides large acceleration at virtually no quality loss. The low-pass filtering also significantly reduces the amount of memory required for particle selection, which permits parallelism to target hardware like desktop workstations more efficiently.</p></sec><sec id="s3-2-2"><title>Autopicking performance</title><p>We tested both picking speed and quality of picked particles of RELION-2. In an initial test, a single 4096<inline-formula><mml:math id="inf9"><mml:msup><mml:mi/><mml:mn>2</mml:mn></mml:msup></mml:math></inline-formula>-pixel micrograph containing ribosomes at 1.62 Å/pixel was processed against 8 templates with 5 degree angular sampling and no low-pass filtering. This took 675 s to evaluate on a CPU-only workstation (i7–5960X, using 1 thread merely to provide a per-core performance). When applying low-pass filtering to 20 Å, this time is reduced to 39 s, i.e. by a factor <inline-formula><mml:math id="inf10"><mml:mo>∼</mml:mo></mml:math></inline-formula>17. When using a single consumer-level GPU (GTX 1080) with a single CPU thread, execution is further reduced to just 0.73 s, or an additional factor <inline-formula><mml:math id="inf11"><mml:mo>∼</mml:mo></mml:math></inline-formula>54. Each GPU added to the workstation can therefore now process <inline-formula><mml:math id="inf12"><mml:mo>∼</mml:mo></mml:math></inline-formula>940 micrographs in the same time previously required to process just 8 micrographs (1 per available core) as shown in <xref ref-type="fig" rid="fig7">Figure 7</xref>.</p><p>We further evaluated the quality of filtered selection according to the <inline-formula><mml:math id="inf13"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase benchmark (EMPIAR entry 10017) used in the original implementation in RELION-1.3 (<xref ref-type="bibr" rid="bib35">Scheres, 2015</xref>). This data set consists of 84 micrographs of 4096<inline-formula><mml:math id="inf14"><mml:msup><mml:mi/><mml:mn>2</mml:mn></mml:msup></mml:math></inline-formula> pixels (1.77 Å/pixel), and comes with coordinates for 40,863 particles that were manually selected by Richard Henderson. The latter were used for comparison with our autopicking results, with a center cutoff distance of 35 pixels for particles to be considered identical (<xref ref-type="table" rid="tbl1">Table 1</xref>). Filtered selection did not decrease the quality of the results, but provided a just-so-slightly increased recall without increasing the false discovery rate (FDR, see e.g. (<xref ref-type="bibr" rid="bib23">Langlois and Frank, 2011</xref>) for definitions of recall and FDR). When filtering and GPU-acceleration are combined, a single GPU provides roughly 120 times the performance of an 8-core desktop, and the desktop can easily be equipped with quad GPUs for about 500x performance gain. In fact, similarly to the regularised likelihood optimisation, the semi-automated particle picking can become limited by disk access unless data is read from an SSD.<fig id="fig7" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.009</object-id><label>Figure 7.</label><caption><title>Low-pass filtering and acceleration of particle picking.</title><p>(<bold>A</bold>) Ribosomal particles were auto-picked from representative <inline-formula><mml:math id="inf15"><mml:msup><mml:mn>4096</mml:mn><mml:mn>2</mml:mn></mml:msup></mml:math></inline-formula>-pixel micrographs collected at 1.62 Å/pixel using four template classes, showing near-identical picking with and without low-pass filtering to 20 Å. The only differing particle is indicated in orange, and likely does not depict a ribosomal particle. (<bold>B–C</bold>) Despite near-identical particle selection, performance is dramatically improved. (<bold>D</bold>) Filtering alone provides almost 20-fold performance improvement on any hardware compared to previsos versions of relion, and when combined with GPU-accelerated particle picking the resulting performance gain is more than two orders of magnitude using only a single GPU (GTX 1080).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.009">http://dx.doi.org/10.7554/eLife.18722.009</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig7-v2"/></fig></p></sec></sec><sec id="s3-3"><title>A complete workflow for <inline-formula><mml:math id="inf16"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase</title><p>To illustrate the impact of our GPU implementation and show how it can alter practical work, we chose to re-analyse the EMPIAR-10061 dataset of <inline-formula><mml:math id="inf17"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase (<xref ref-type="bibr" rid="bib3">Bartesaghi et al., 2015</xref>) using RELION-2. This represents the largest presently available dataset in the empiar database, and provides a realistic challenge. We performed an entire processing workflow, including initial beam-induced motion correction in UNBLUR (<xref ref-type="bibr" rid="bib16">Grant and Grigorieff, 2015</xref>), CTF estimation in Gctf (<xref ref-type="bibr" rid="bib41">Zhang, 2016</xref>), and finally RELION-2 was employed for automated particle picking, 2D and 3D classification, movie-refinement, particle polishing (<xref ref-type="bibr" rid="bib34">Scheres, 2014</xref>) and high-resolution auto-refinement on a single workstation with four GTX 1080 cards. Calculating a map to 2.2 Å resolution (<xref ref-type="fig" rid="fig8">Figure 8A</xref>) took a few days – comparable to, if not faster than, the time required acquire this amount of high-quality data. <xref ref-type="fig" rid="fig8">Figure 8B</xref> shows an overview of the most computationally demanding steps during this processing. The parts of the workflow that have been GPU-accelerated no longer dominate execution, but this exposes other new bottlenecks. In particular, steps that involve reading large movie files from disk become problematic. We also note that due to the rigid nature of the <inline-formula><mml:math id="inf18"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase complex used for this benchmark, only a single 3D classification was performed. This is not representative for many other use cases: typically 3D classification is repeated multiple times to identify, sort, and isolate structural heterogeneity. In such a scenario, the impact of the GPU acceleration is even larger, as increased or multiple 3D classifications would still not dominate the complete workflow.<fig id="fig8" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.010</object-id><label>Figure 8.</label><caption><title>High-resolution structure determination on a single desktop.</title><p>(<bold>A</bold>) The resulting 2.2 Å map (deposited as EMD-4116) shows excellent high-resolution density throughout the complex. (<bold>B</bold>) The most time-consuming steps in the image processing workflow. GPU-accelerated steps are indicated in orange. The total time of image processing was less than that of downloading the data. (<bold>C</bold>) The resolution estimate is based on the gold-standard FSC after correcting for the convolution effects of a soft solvent mask (black). The FSC between the relion map and the atomic model in PDB ID 5A1A is shown in orange. The FSC between EMD-2984 and the same atomic model is shown for comparison (dashed gray).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.010">http://dx.doi.org/10.7554/eLife.18722.010</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-fig8-v2"/></fig></p></sec></sec><sec id="s4" sec-type="discussion"><title>Discussion</title><p>We present a GPU-enabled implementation of RELION-2, as a first step to address current and future needs for large and expedient computations in the field of cryo-EM structure determination. The principal benefits drawn from the presented work are twofold. First, the nature of progress in scientific applications is to continually re-evaluate and examine data in many different ways. With ease of re-processing data, the threshold for trial, error and successive improvement of existing methods is now markedly lowered. Second, the order-of-magnitude speedups make it possible to get by with much less hardware for cryo-EM processing, in most cases even desktops. This removes a computational bottleneck for large labs, and enables any group to perform their own reconstruction without access to supercomputers.</p><p>In the next few years, larger data sets and image sizes are expected, as well as new methods that require expedient processing of large data sets. The large reduction in computational costs opens up the possibility to perform more ambitious computational analyses without increasing the investments. For example, the favourable scaling of performance we observed for multi-class refinements will make it feasible to use many more classes than was practical before, which will lead to better descriptions of conformational diversity in flexible molecules. Additionally, with even faster algorithms and hardware it might soon be possible to perform highly automated, on-the-fly, structure determination while data acquisition is ongoing. In anticipation of these developments, RELION-2 already implements a pipelined approach for automated execution of pre-determined image processing workflows (<xref ref-type="bibr" rid="bib11">Fernandez-Leiro and Scheres, 2016a</xref>).</p><p>While the new GPU implementation has removed many of the previous computational bottlenecks in relion, the large speedup has exposed several new areas of the code that can now dominate execution time, such as data input/output and the reconstruction step during iterative image refinement. Although these parts of the algorithm were previously insignificant, in some cases they now collectively account for roughly 50% of total execution time. These parts of the code will see benefit from further modifications. Future work will e.g. strive to further generalise parallelism such that performance is less dependent on the type of refinement performed, as sufficient parallelism is always available within the relion core algorithm. Memory requirements on the GPU are also expected to be reduced further, so that larger image sizes and more classes can be handled to higher resolution.</p><p>With the current implementation, cryo-EM structures to near-atomic resolution can be calculated in a matter of days on a single workstation, or hours on a GPU-cluster. Nevertheless, the aim of the current adaptations is not to present a final solution to computational needs in RELION; while the present version achieves excellent speedup on a wide range of low-cost systems, we expect the acceleration to improve both in performance and coverage. Generalising the low-level parallelism described here to vectorised CPU calculations, and possibly an open GPU language like OpenCL, will constitute little more than translating this parallelism to new instructions. This is something we intend to pursue in the future. As such, RELION-2 represents a new incarnation of an existing algorithm, which is intended to be developed far further in the following years. Meanwhile, we hope that the current implementation will have as much impact in the broader community as it is already having in our labs.</p></sec><sec id="s5" sec-type="materials|methods"><title>Materials and methods</title><sec id="s5-1"><title>Availability</title><p>RELION 2 is both open source and free software, distributed under the GPLv2 licence. It is publicly available for download through <ext-link ext-link-type="uri" xlink:href="http://www2.mrc-lmb.cam.ac.uk/relion">http://www2.mrc-lmb.cam.ac.uk/relion</ext-link>.</p></sec><sec id="s5-2"><title>Data sets and hardware specifications</title><p>The ribosome data used for the 3D classification and refinement in <xref ref-type="fig" rid="fig4">Figures 4</xref> and <xref ref-type="fig" rid="fig5">5</xref> correspond to EMPAIR entry 10028 (<xref ref-type="bibr" rid="bib40">Wong et al., 2014</xref>). For autopicking, empiar entry 10017 was used (<xref ref-type="bibr" rid="bib35">Scheres, 2015</xref>). The complete workflow for <inline-formula><mml:math id="inf19"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase used EMPIAR entry 10061 (<xref ref-type="bibr" rid="bib3">Bartesaghi et al., 2015</xref>), and the reconstructed map was deposited in the EMDB (EMD-4116). In all cases where different hardware and/or software implementations were compared, identical refinement parameters were used, including the random seed provided to RELION. In cases where identical hardware and software were repeatedly used to examine variability, different seeds were used. The nondeterministic scheduling and summations of GPU-enabled execution can introduce some minor noise in results, but all runs achieve convergence and variations in final results are well within estimated errors and resolution of the raw data.</p><p>The acceleration in RELION-2 works with any NVIDIA GPU of compute-capability 3.5 or higher, which covers all models launched the last three years. Version 7.0 of the CUDA toolkit is also required, and was used for all presented results. CPU performance was benchmarked with a cluster of 10 compute nodes equipped with dual Xeon E5-2690v4 CPUs (2<inline-formula><mml:math id="inf20"><mml:mo>×</mml:mo></mml:math></inline-formula>14 physical cores, for a total of 280 cores) running at 2.6 GHz with 128 GB memory. While we refer to the physical core count when describing hardware, hyperthreading was enabled and used for all benchmarks (i.e., starting 560 threads on the 10 nodes) since it improves performance on the CPU side slightly. Two different workstations were used for GPU benchmarks. First a cost-efficient desktop with a single Core i7–6700 K (four cores, 4 GHz), dual GTX 1070 GPUs, and a 500 GB SSD disk. Second, a workstations equipped with a single Core i7–5960 X CPU (8 cores, 3GHz), four GTX 1080 GPUs, and either a single SSD or two configured in RAID0 for higher bandwidth. Both workstations had 64 GB of memory, and two CPU threads were used for each GPU to improve utilisation. In all cases hyper-threading was utilised to the fullest extent possible to improve CPU performance.</p></sec><sec id="s5-3"><title><inline-formula><mml:math id="inf21"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase image processing</title><p>Super-resolution <inline-formula><mml:math id="inf22"><mml:mrow><mml:mrow><mml:mrow><mml:mn>8</mml:mn><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mo>×</mml:mo><mml:mn>8</mml:mn></mml:mrow><mml:mo>⁢</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:math></inline-formula> micrograph movies with 38 frames were submitted to initial beam-induced motion correction using UNBLUR (<xref ref-type="bibr" rid="bib16">Grant and Grigorieff, 2015</xref>). The resulting average micrographs were used for CTF estimation in Gctf (<xref ref-type="bibr" rid="bib41">Zhang, 2016</xref>). Autopicking with six templates yielded an initial data set of 130,375 particles, which were subjected to reference-free 2D classification using 200 classes. This initial classification was done using <inline-formula><mml:math id="inf23"><mml:mrow><mml:mn>4</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> downscaled particles (with a pixel size of 1.274 Å and a box size of 192 pixels). Selection of the 75 best classes resulted in 120,514 particles. All subsequent calculations were performed using <inline-formula><mml:math id="inf24"><mml:mrow><mml:mn>2</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> downscaling (resulting in a pixel size of 0.637 Å and a box size of 384 pixels). The selected particles were subjected to an initial 3D auto-refinement that used PDB ID 3I3E (<xref ref-type="bibr" rid="bib9">Dugdale et al., 2010</xref>) as an initial model. Subsequent movie-refinement (with a running average of 7 movie frames and a standard deviation of 2 pixels on the translations) was followed by particle polishing (using a standard deviation of 1000 pixels on the inter-particle distance). The resulting shiny particles were submitted to a single round of 3D classification with exhaustive 7.5-degree angular searches and eight classes. Selection of the seven best classes yielded a final data set of 109,963 particles, which were submitted to 3D auto-refinement. The final resolution was estimated using phase-randomisation to account for the convolution effects of a solvent mask on the FSC between the two independently refined half-maps (<xref ref-type="bibr" rid="bib5">Chen et al., 2013</xref>). This mask was generated by binarisation of a 15 Å low-pass filtered version of the reconstructed map, with addition of a five-pixel wide cosine-shaped soft edge. FSC curves between the model and the solvent-masked map were calculated with <monospace>relion_image_handler</monospace>. The same soft solvent mask was also used for the calculation between EMDB-2984 and the atomic model.<table-wrap id="tbl1" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.011</object-id><label>Table 1.</label><caption><p>Quality and speed of autopicking for the <inline-formula><mml:math id="inf25"><mml:mi>β</mml:mi></mml:math></inline-formula>-galactosidase benchmark. Comparing the CPU version with the GPU version using increasing levels of low-pass filtering yields progressively higher recalls at similar FDRs. The GPU version yields identical results to that of the CPU version, but at a much reduced computational costs. Filtering does not depend on GPU-acceleration, and will perform similarly using only CPUs.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.011">http://dx.doi.org/10.7554/eLife.18722.011</ext-link></p></caption><table frame="hsides" rules="groups"><thead><tr><th>Code</th><th>Filter</th><th># picked</th><th>Recall</th><th>FDR</th><th>Time</th><th>Performance in</th></tr></thead><tbody><tr><td/><th>(Å)</th><th>particles</th><th/><th/><th>(s/micrograph)</th><th>CPU core units</th></tr><tr><th>CPU</th><th>none</th><th>54,301</th><th>0.88</th><th>0.34</th><th>1,227</th><th>1</th></tr><tr><td>GPU</td><td>none</td><td>54,325</td><td>0.88</td><td>0.34</td><td>10</td><td>122</td></tr><tr><td>GPU</td><td>5</td><td>55,629</td><td>0.90</td><td>0.34</td><td>5.8</td><td>211</td></tr><tr><td>GPU</td><td>10</td><td>55,886</td><td>0.90</td><td>0.34</td><td>2.1</td><td>584</td></tr><tr><td>GPU</td><td>15</td><td>56,450</td><td>0.92</td><td>0.33</td><td>1.6</td><td>766</td></tr><tr><td>GPU</td><td>20</td><td>57,361</td><td>0.95</td><td>0.33</td><td>1.3</td><td>943</td></tr></tbody></table></table-wrap></p></sec></sec></body><back><ack id="ack"><title>Acknowledgements</title><p>The authors would like to thank Szilárd Páll, Nikolay Markovskiy, and Mark Berger for fruitful discussions and cuda suggestions; Shintaro Aibara and Marta Carroni for providing data and early quality testing; and Toby Darling, Jake Grimmett, and Stefan Fleichmann for technical support.</p></ack><sec id="s6" sec-type="additional-information"><title>Additional information</title><fn-group content-type="competing-interest"><title>Competing interests</title><fn fn-type="conflict" id="conf2"><p>SHWS: Reviewing editor, <italic>eLife</italic></p></fn><fn fn-type="conflict" id="conf1"><p>The other authors declare that no competing interests exist.</p></fn></fn-group><fn-group content-type="author-contribution"><title>Author contributions</title><fn fn-type="con" id="con1"><p>DK, Conception and design, Acquisition of data, Analysis and interpretation of data, Drafting or revising the article</p></fn><fn fn-type="con" id="con2"><p>BOF, Conception and design, Acquisition of data, Analysis and interpretation of data, Drafting or revising the article</p></fn><fn fn-type="con" id="con3"><p>SHWS, Conception and design, Analysis and interpretation of data, Drafting or revising the article</p></fn><fn fn-type="con" id="con4"><p>EL, Conception and design, Analysis and interpretation of data, Drafting or revising the article</p></fn></fn-group></sec><sec id="s7" sec-type="supplementary-material"><title>Additional files</title><sec id="s8" sec-type="datasets"><title>Major datasets</title><p>The following dataset was generated:</p><p><related-object content-type="generated-dataset" id="data-ro1" source-id="http://www.ebi.ac.uk/pdbe/entry/emdb/EMD-4116" source-id-type="uri"><collab>Kimanius D</collab><x>,</x> <collab>Forsberg BO</collab><x>,</x> <collab>Scheres SHW</collab><x>,</x> <collab>Lindahl E</collab><x>,</x> <year>2016</year><x>,</x><source>RELION-2.0 reconstruction for beta-galactosidase data in EMPIAR-10061</source><x>,</x> <ext-link ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/pdbe/entry/emdb/EMD-4116">http://www.ebi.ac.uk/pdbe/entry/emdb/EMD-4116</ext-link><x>,</x> <comment>Publicly available at the EBI Protein Data Bank in Europe (accession no: EMD-4116)</comment></related-object></p><p>The following previously published datasets were used:</p><p><related-object content-type="generated-dataset" id="data-ro2" source-id="https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10017/" source-id-type="uri"><collab>Scheres SH</collab><x>,</x> <year>2014</year><x>,</x><source>Beta-galactosidase Falcon-II micrographs plus manually selected coordinates by Richard Henderson</source><x>,</x> <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10017/">https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10017/</ext-link><x>,</x> <comment>Publicly available at the EBI Electron Microscopy Pilot Image Archive (accession no: EMPIAR-10017)</comment></related-object></p><p><related-object content-type="generated-dataset" id="data-ro3" source-id="https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10028/" source-id-type="uri"><collab>Wong W</collab><x>,</x> <collab>Bai XC</collab><x>,</x> <collab>Brown A</collab><x>,</x> <collab>Fernandez IS</collab><x>,</x> <collab>Hanssen E</collab><x>,</x> <collab>Condron M</collab><x>,</x> <collab>Tan YH</collab><x>,</x> <collab>Baum J</collab><x>,</x> <collab>Scheres SHW</collab><x>,</x> <year>2014</year><x>,</x><source>Cryo-EM structure of the Plasmodium falciparum 80S ribosome bound to the anti-protozoan drug emetine</source><x>,</x> <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10028/">https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10028/</ext-link><x>,</x> <comment>Publicly available at the EBI Electron Microscopy Pilot Image Archive (accession no: EMPIAR-10028)</comment></related-object></p><p><related-object content-type="generated-dataset" id="data-ro4" source-id="https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10061/" source-id-type="uri"><collab>Bartesaghi A</collab><x>,</x> <collab>Merk A</collab><x>,</x> <collab>Banerjee S</collab><x>,</x> <collab>Matthies D</collab><x>,</x> <collab>Wu X</collab><x>,</x> <collab>Milne JL</collab><x>,</x> <collab>Subramaniam S</collab><x>,</x> <year>2015</year><x>,</x><source>2.2 A resolution cryo-EM structure of beta-galactosidase in complex with a cell-permeant inhibitor</source><x>,</x> <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10061/">https://www.ebi.ac.uk/pdbe/emdb/empiar/entry/10061/</ext-link><x>,</x> <comment>Publicly available at the EBI Electron Microscopy Pilot Image Archive (accession no: EMPIAR-10061)</comment></related-object></p></sec></sec><ref-list><title>References</title><ref id="bib1"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abraham</surname><given-names>MJ</given-names></name><name><surname>Murtola</surname><given-names>T</given-names></name><name><surname>Schulz</surname><given-names>R</given-names></name><name><surname>Páll</surname><given-names>S</given-names></name><name><surname>Smith</surname><given-names>JC</given-names></name><name><surname>Hess</surname><given-names>B</given-names></name><name><surname>Lindahl</surname><given-names>E</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>GROMACS: High performance molecular simulations through multi-level parallelism from laptops to supercomputers</article-title><source>SoftwareX</source><volume>1-2</volume><fpage>19</fpage><lpage>25</lpage><pub-id pub-id-type="doi">10.1016/j.softx.2015.06.001</pub-id></element-citation></ref><ref id="bib2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bai</surname><given-names>XC</given-names></name><name><surname>Rajendra</surname><given-names>E</given-names></name><name><surname>Yang</surname><given-names>G</given-names></name><name><surname>Shi</surname><given-names>Y</given-names></name><name><surname>Scheres</surname><given-names>SH</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Sampling the conformational space of the catalytic subunit of human γ-secretase</article-title><source>eLife</source><volume>4</volume><elocation-id>e11182</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.11182</pub-id><pub-id pub-id-type="pmid">26623517</pub-id></element-citation></ref><ref id="bib3"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bartesaghi</surname><given-names>A</given-names></name><name><surname>Merk</surname><given-names>A</given-names></name><name><surname>Banerjee</surname><given-names>S</given-names></name><name><surname>Matthies</surname><given-names>D</given-names></name><name><surname>Wu</surname><given-names>X</given-names></name><name><surname>Milne</surname><given-names>JL</given-names></name><name><surname>Subramaniam</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>2.2 Å resolution cryo-EM structure of β-galactosidase in complex with a cell-permeant inhibitor</article-title><source>Science</source><volume>348</volume><fpage>1147</fpage><lpage>1151</lpage><pub-id pub-id-type="doi">10.1126/science.aab1576</pub-id><pub-id pub-id-type="pmid">25953817</pub-id></element-citation></ref><ref id="bib4"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Castaño-Díez</surname><given-names>D</given-names></name><name><surname>Moser</surname><given-names>D</given-names></name><name><surname>Schoenegger</surname><given-names>A</given-names></name><name><surname>Pruggnaller</surname><given-names>S</given-names></name><name><surname>Frangakis</surname><given-names>AS</given-names></name></person-group><year iso-8601-date="2008">2008</year><article-title>Performance evaluation of image processing algorithms on the Gpu</article-title><source>Journal of Structural Biology</source><volume>164</volume><fpage>153</fpage><lpage>160</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2008.07.006</pub-id><pub-id pub-id-type="pmid">18692140</pub-id></element-citation></ref><ref id="bib5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>S</given-names></name><name><surname>McMullan</surname><given-names>G</given-names></name><name><surname>Faruqi</surname><given-names>AR</given-names></name><name><surname>Murshudov</surname><given-names>GN</given-names></name><name><surname>Short</surname><given-names>JM</given-names></name><name><surname>Scheres</surname><given-names>SH</given-names></name><name><surname>Henderson</surname><given-names>R</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>High-resolution noise substitution to measure overfitting and validate resolution in 3D structure determination by single particle electron cryomicroscopy</article-title><source>Ultramicroscopy</source><volume>135</volume><fpage>24</fpage><lpage>35</lpage><pub-id pub-id-type="doi">10.1016/j.ultramic.2013.06.004</pub-id><pub-id pub-id-type="pmid">23872039</pub-id></element-citation></ref><ref id="bib6"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cheng</surname><given-names>Y</given-names></name><name><surname>Grigorieff</surname><given-names>N</given-names></name><name><surname>Penczek</surname><given-names>PA</given-names></name><name><surname>Walz</surname><given-names>T</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>A primer to single-particle cryo-electron microscopy</article-title><source>Cell</source><volume>161</volume><fpage>438</fpage><lpage>449</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2015.03.050</pub-id><pub-id pub-id-type="pmid">25910204</pub-id></element-citation></ref><ref id="bib7"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cheng</surname><given-names>Y</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Single-Particle Cryo-EM at Crystallographic Resolution</article-title><source>Cell</source><volume>161</volume><fpage>450</fpage><lpage>457</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2015.03.049</pub-id><pub-id pub-id-type="pmid">25910205</pub-id></element-citation></ref><ref id="bib8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dempster</surname><given-names>AP</given-names></name><name><surname>Laird</surname><given-names>NM</given-names></name><name><surname>Rubin</surname><given-names>DB</given-names></name></person-group><year iso-8601-date="1977">1977</year><article-title>Maximum likelihood from incomplete data via Em algorithm</article-title><source>Journal of the Royal Statistical Society Series B-Methodological</source><volume>39</volume><fpage>1</fpage><lpage>38</lpage></element-citation></ref><ref id="bib9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dugdale</surname><given-names>ML</given-names></name><name><surname>Dymianiw</surname><given-names>DL</given-names></name><name><surname>Minhas</surname><given-names>BK</given-names></name><name><surname>D'Angelo</surname><given-names>I</given-names></name><name><surname>Huber</surname><given-names>RE</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Role of Met-542 as a guide for the conformational changes of Phe-601 that occur during the reaction of &amp;beta;-galactosidase (Escherichia coli)</article-title><source>Biochemistry and Cell Biology </source><volume>88</volume><fpage>861</fpage><lpage>869</lpage><pub-id pub-id-type="doi">10.1139/O10-009</pub-id><pub-id pub-id-type="pmid">20921997</pub-id></element-citation></ref><ref id="bib10"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Elmlund</surname><given-names>D</given-names></name><name><surname>Elmlund</surname><given-names>H</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>SIMPLE: Software for ab initio reconstruction of heterogeneous single-particles</article-title><source>Journal of Structural Biology</source><volume>180</volume><fpage>420</fpage><lpage>427</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2012.07.010</pub-id><pub-id pub-id-type="pmid">22902564</pub-id></element-citation></ref><ref id="bib11"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fernandez-Leiro</surname><given-names>R</given-names></name><name><surname>Scheres</surname><given-names>SHW</given-names></name></person-group><year iso-8601-date="2016">2016a</year><article-title>A pipeline approach to single-particle processing in Relion</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/078352</pub-id></element-citation></ref><ref id="bib12"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fernandez-Leiro</surname><given-names>R</given-names></name><name><surname>Scheres</surname><given-names>SHW</given-names></name></person-group><year iso-8601-date="2016">2016b</year><article-title>Unravelling biological macromolecules with cryo-electron microscopy</article-title><source>Nature</source><volume>537</volume><fpage>339</fpage><lpage>346</lpage><pub-id pub-id-type="doi">10.1038/nature19948</pub-id></element-citation></ref><ref id="bib13"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fernández</surname><given-names>IS</given-names></name><name><surname>Bai</surname><given-names>XC</given-names></name><name><surname>Hussain</surname><given-names>T</given-names></name><name><surname>Kelley</surname><given-names>AC</given-names></name><name><surname>Lorsch</surname><given-names>JR</given-names></name><name><surname>Ramakrishnan</surname><given-names>V</given-names></name><name><surname>Scheres</surname><given-names>SH</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Molecular architecture of a eukaryotic translational initiation complex</article-title><source>Science</source><volume>342</volume><fpage>1240585</fpage><pub-id pub-id-type="doi">10.1126/science.1240585</pub-id><pub-id pub-id-type="pmid">24200810</pub-id></element-citation></ref><ref id="bib14"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Frank</surname><given-names>J</given-names></name><name><surname>Radermacher</surname><given-names>M</given-names></name><name><surname>Penczek</surname><given-names>P</given-names></name><name><surname>Zhu</surname><given-names>J</given-names></name><name><surname>Li</surname><given-names>Y</given-names></name><name><surname>Ladjadj</surname><given-names>M</given-names></name><name><surname>Leith</surname><given-names>A</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>SPIDER and WEB: processing and visualization of images in 3D electron microscopy and related fields</article-title><source>Journal of Structural Biology</source><volume>116</volume><fpage>190</fpage><lpage>199</lpage><pub-id pub-id-type="doi">10.1006/jsbi.1996.0030</pub-id><pub-id pub-id-type="pmid">8742743</pub-id></element-citation></ref><ref id="bib15"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Frank</surname><given-names>J</given-names></name><name><surname>Shimkin</surname><given-names>B</given-names></name><name><surname>Dowse</surname><given-names>H</given-names></name></person-group><year iso-8601-date="1981">1981</year><article-title>Spider—A modular software system for electron image processing</article-title><source>Ultramicroscopy</source><volume>6</volume><fpage>343</fpage><lpage>357</lpage><pub-id pub-id-type="doi">10.1016/S0304-3991(81)80221-5</pub-id></element-citation></ref><ref id="bib16"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grant</surname><given-names>T</given-names></name><name><surname>Grigorieff</surname><given-names>N</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Measuring the optimal exposure for single particle cryo-EM using a 2.6 Å reconstruction of rotavirus VP6</article-title><source>eLife</source><volume>4</volume><elocation-id>e06980</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.06980</pub-id><pub-id pub-id-type="pmid">26023829</pub-id></element-citation></ref><ref id="bib17"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grigorieff</surname><given-names>N</given-names></name></person-group><year iso-8601-date="2007">2007</year><article-title>FREALIGN: high-resolution refinement of single particle structures</article-title><source>Journal of Structural Biology</source><volume>157</volume><fpage>117</fpage><lpage>125</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2006.05.004</pub-id><pub-id pub-id-type="pmid">16828314</pub-id></element-citation></ref><ref id="bib18"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Heymann</surname><given-names>JB</given-names></name><name><surname>Belnap</surname><given-names>DM</given-names></name></person-group><year iso-8601-date="2007">2007</year><article-title>Bsoft: image processing and molecular modeling for electron microscopy</article-title><source>Journal of Structural Biology</source><volume>157</volume><fpage>3</fpage><lpage>18</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2006.06.006</pub-id><pub-id pub-id-type="pmid">17011211</pub-id></element-citation></ref><ref id="bib19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hoang</surname><given-names>TV</given-names></name><name><surname>Cavin</surname><given-names>X</given-names></name><name><surname>Ritchie</surname><given-names>DW</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>gEMfitter: a highly parallel FFT-based 3D density fitting tool with GPU texture memory acceleration</article-title><source>Journal of Structural Biology</source><volume>184</volume><fpage>348</fpage><lpage>354</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2013.09.010</pub-id><pub-id pub-id-type="pmid">24060989</pub-id></element-citation></ref><ref id="bib20"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hohn</surname><given-names>M</given-names></name><name><surname>Tang</surname><given-names>G</given-names></name><name><surname>Goodyear</surname><given-names>G</given-names></name><name><surname>Baldwin</surname><given-names>PR</given-names></name><name><surname>Huang</surname><given-names>Z</given-names></name><name><surname>Penczek</surname><given-names>PA</given-names></name><name><surname>Yang</surname><given-names>C</given-names></name><name><surname>Glaeser</surname><given-names>RM</given-names></name><name><surname>Adams</surname><given-names>PD</given-names></name><name><surname>Ludtke</surname><given-names>SJ</given-names></name></person-group><year iso-8601-date="2007">2007</year><article-title>SPARX, a new environment for Cryo-EM image processing</article-title><source>Journal of Structural Biology</source><volume>157</volume><fpage>47</fpage><lpage>55</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2006.07.003</pub-id><pub-id pub-id-type="pmid">16931051</pub-id></element-citation></ref><ref id="bib21"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Iudin</surname><given-names>A</given-names></name><name><surname>Korir</surname><given-names>PK</given-names></name><name><surname>Salavert-Torres</surname><given-names>J</given-names></name><name><surname>Kleywegt</surname><given-names>GJ</given-names></name><name><surname>Patwardhan</surname><given-names>A</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>EMPIAR: a public archive for raw electron microscopy image data</article-title><source>Nature Methods</source><volume>13</volume><fpage>387</fpage><lpage>388</lpage><pub-id pub-id-type="doi">10.1038/nmeth.3806</pub-id><pub-id pub-id-type="pmid">27067018</pub-id></element-citation></ref><ref id="bib22"><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Jia</surname><given-names>Y</given-names></name><name><surname>Shelhamer</surname><given-names>E</given-names></name><name><surname>Donahue</surname><given-names>J</given-names></name><name><surname>Karayev</surname><given-names>S</given-names></name><name><surname>Long</surname><given-names>J</given-names></name><name><surname>Girshick</surname><given-names>R</given-names></name><name><surname>Guadarrama</surname><given-names>S</given-names></name><name><surname>Darrell</surname><given-names>T</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Caffe: convolutional architecture for fast feature embedding</article-title><source>Proceedings of the 22nd ACM international conference on Multimedia</source><fpage>675</fpage><lpage>678</lpage></element-citation></ref><ref id="bib23"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Langlois</surname><given-names>R</given-names></name><name><surname>Frank</surname><given-names>J</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>A clarification of the terms used in comparing semi-automated particle selection algorithms in cryo-EM</article-title><source>Journal of Structural Biology</source><volume>175</volume><fpage>348</fpage><lpage>352</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2011.03.009</pub-id><pub-id pub-id-type="pmid">21420497</pub-id></element-citation></ref><ref id="bib24"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>X</given-names></name><name><surname>Grigorieff</surname><given-names>N</given-names></name><name><surname>Cheng</surname><given-names>Y</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>GPU-enabled FREALIGN: accelerating single particle 3D reconstruction and refinement in Fourier space on graphics processors</article-title><source>Journal of Structural Biology</source><volume>172</volume><fpage>407</fpage><lpage>412</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2010.06.010</pub-id><pub-id pub-id-type="pmid">20558298</pub-id></element-citation></ref><ref id="bib25"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>X</given-names></name><name><surname>Mooney</surname><given-names>P</given-names></name><name><surname>Zheng</surname><given-names>S</given-names></name><name><surname>Booth</surname><given-names>CR</given-names></name><name><surname>Braunfeld</surname><given-names>MB</given-names></name><name><surname>Gubbens</surname><given-names>S</given-names></name><name><surname>Agard</surname><given-names>DA</given-names></name><name><surname>Cheng</surname><given-names>Y</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Electron counting and beam-induced motion correction enable near-atomic-resolution single-particle cryo-EM</article-title><source>Nature Methods</source><volume>10</volume><fpage>584</fpage><lpage>590</lpage><pub-id pub-id-type="doi">10.1038/nmeth.2472</pub-id><pub-id pub-id-type="pmid">23644547</pub-id></element-citation></ref><ref id="bib26"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>X</given-names></name><name><surname>Zheng</surname><given-names>S</given-names></name><name><surname>Agard</surname><given-names>DA</given-names></name><name><surname>Cheng</surname><given-names>Y</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Asynchronous data acquisition and on-the-fly analysis of dose fractionated cryoEM images by UCSFImage</article-title><source>Journal of Structural Biology</source><volume>192</volume><fpage>174</fpage><lpage>178</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2015.09.003</pub-id><pub-id pub-id-type="pmid">26370395</pub-id></element-citation></ref><ref id="bib27"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nguyen</surname><given-names>TH</given-names></name><name><surname>Galej</surname><given-names>WP</given-names></name><name><surname>Bai</surname><given-names>XC</given-names></name><name><surname>Oubridge</surname><given-names>C</given-names></name><name><surname>Newman</surname><given-names>AJ</given-names></name><name><surname>Scheres</surname><given-names>SH</given-names></name><name><surname>Nagai</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Cryo-EM structure of the yeast U4/U6.U5 tri-snRNP at 3.7 å resolution</article-title><source>Nature</source><volume>530</volume><fpage>298</fpage><lpage>302</lpage><pub-id pub-id-type="doi">10.1038/nature16940</pub-id><pub-id pub-id-type="pmid">26829225</pub-id></element-citation></ref><ref id="bib28"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Roseman</surname><given-names>AM</given-names></name></person-group><year iso-8601-date="2003">2003</year><article-title>Particle finding in electron micrographs using a fast local correlation algorithm</article-title><source>Ultramicroscopy</source><volume>94</volume><fpage>225</fpage><lpage>236</lpage><pub-id pub-id-type="doi">10.1016/S0304-3991(02)00333-9</pub-id><pub-id pub-id-type="pmid">12524193</pub-id></element-citation></ref><ref id="bib29"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Saibil</surname><given-names>HR</given-names></name><name><surname>Grünewald</surname><given-names>K</given-names></name><name><surname>Stuart</surname><given-names>DI</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>A national facility for biological cryo-electron microscopy</article-title><source>Acta Crystallographica. Section D, Biological Crystallography</source><volume>71</volume><fpage>127</fpage><lpage>135</lpage><pub-id pub-id-type="doi">10.1107/S1399004714025280</pub-id><pub-id pub-id-type="pmid">25615867</pub-id></element-citation></ref><ref id="bib30"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Salomon-Ferrer</surname><given-names>R</given-names></name><name><surname>Götz</surname><given-names>AW</given-names></name><name><surname>Poole</surname><given-names>D</given-names></name><name><surname>Le Grand</surname><given-names>S</given-names></name><name><surname>Walker</surname><given-names>RC</given-names></name><name><surname>Goetz</surname><given-names>AW</given-names></name><name><surname>Grand</surname><given-names>SL</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Routine microsecond molecular dynamics simulations with AMBER on GPUs. 2. explicit solvent particle Mesh Ewald</article-title><source>Journal of Chemical Theory and Computation</source><volume>9</volume><fpage>3878</fpage><lpage>3888</lpage><pub-id pub-id-type="doi">10.1021/ct400314y</pub-id><pub-id pub-id-type="pmid">26592383</pub-id></element-citation></ref><ref id="bib31"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Scheres</surname><given-names>SH</given-names></name><name><surname>Núñez-Ramírez</surname><given-names>R</given-names></name><name><surname>Sorzano</surname><given-names>CO</given-names></name><name><surname>Carazo</surname><given-names>JM</given-names></name><name><surname>Marabini</surname><given-names>R</given-names></name></person-group><year iso-8601-date="2008">2008</year><article-title>Image processing for electron microscopy single-particle analysis using XMIPP</article-title><source>Nature Protocols</source><volume>3</volume><fpage>977</fpage><lpage>990</lpage><pub-id pub-id-type="doi">10.1038/nprot.2008.62</pub-id><pub-id pub-id-type="pmid">18536645</pub-id></element-citation></ref><ref id="bib32"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Scheres</surname><given-names>SH</given-names></name></person-group><year iso-8601-date="2012">2012b</year><article-title>A Bayesian view on cryo-EM structure determination</article-title><source>Journal of Molecular Biology</source><volume>415</volume><fpage>406</fpage><lpage>418</lpage><pub-id pub-id-type="doi">10.1016/j.jmb.2011.11.010</pub-id><pub-id pub-id-type="pmid">22100448</pub-id></element-citation></ref><ref id="bib33"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Scheres</surname><given-names>SH</given-names></name></person-group><year iso-8601-date="2012">2012a</year><article-title>RELION: implementation of a Bayesian approach to cryo-EM structure determination</article-title><source>Journal of Structural Biology</source><volume>180</volume><fpage>519</fpage><lpage>530</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2012.09.006</pub-id><pub-id pub-id-type="pmid">23000701</pub-id></element-citation></ref><ref id="bib34"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Scheres</surname><given-names>SH</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Beam-induced motion correction for sub-megadalton cryo-EM particles</article-title><source>eLife</source><volume>3</volume><elocation-id>e03665</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.03665</pub-id><pub-id pub-id-type="pmid">25122622</pub-id></element-citation></ref><ref id="bib35"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Scheres</surname><given-names>SH</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Semi-automated selection of cryo-EM particles in RELION-1.3</article-title><source>Journal of Structural Biology</source><volume>189</volume><fpage>114</fpage><lpage>122</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2014.11.010</pub-id><pub-id pub-id-type="pmid">25486611</pub-id></element-citation></ref><ref id="bib36"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tagare</surname><given-names>HD</given-names></name><name><surname>Barthel</surname><given-names>A</given-names></name><name><surname>Sigworth</surname><given-names>FJ</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>An adaptive Expectation-Maximization algorithm with GPU implementation for electron cryomicroscopy</article-title><source>Journal of Structural Biology</source><volume>171</volume><fpage>256</fpage><lpage>265</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2010.06.004</pub-id><pub-id pub-id-type="pmid">20538058</pub-id></element-citation></ref><ref id="bib37"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tang</surname><given-names>G</given-names></name><name><surname>Peng</surname><given-names>L</given-names></name><name><surname>Baldwin</surname><given-names>PR</given-names></name><name><surname>Mann</surname><given-names>DS</given-names></name><name><surname>Jiang</surname><given-names>W</given-names></name><name><surname>Rees</surname><given-names>I</given-names></name><name><surname>Ludtke</surname><given-names>SJ</given-names></name></person-group><year iso-8601-date="2007">2007</year><article-title>EMAN2: an extensible image processing suite for electron microscopy</article-title><source>Journal of Structural Biology</source><volume>157</volume><fpage>38</fpage><lpage>46</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2006.05.009</pub-id><pub-id pub-id-type="pmid">16859925</pub-id></element-citation></ref><ref id="bib38"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ufimtsev</surname><given-names>IS</given-names></name><name><surname>Martínez</surname><given-names>TJ</given-names></name></person-group><year iso-8601-date="2008">2008</year><article-title>Graphical processing units for quantum chemistry</article-title><source>Computing in Science &amp; Engineering</source><volume>10</volume><fpage>26</fpage><lpage>34</lpage><pub-id pub-id-type="doi">10.1109/MCSE.2008.148</pub-id></element-citation></ref><ref id="bib39"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>van Heel</surname><given-names>M</given-names></name><name><surname>Harauz</surname><given-names>G</given-names></name><name><surname>Orlova</surname><given-names>EV</given-names></name><name><surname>Schmidt</surname><given-names>R</given-names></name><name><surname>Schatz</surname><given-names>M</given-names></name></person-group><year iso-8601-date="1996">1996</year><article-title>A new generation of the IMAGIC image processing system</article-title><source>Journal of Structural Biology</source><volume>116</volume><fpage>17</fpage><lpage>24</lpage><pub-id pub-id-type="doi">10.1006/jsbi.1996.0004</pub-id><pub-id pub-id-type="pmid">8742718</pub-id></element-citation></ref><ref id="bib40"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wong</surname><given-names>W</given-names></name><name><surname>Bai</surname><given-names>Xiao-chen</given-names></name><name><surname>Brown</surname><given-names>A</given-names></name><name><surname>Fernandez</surname><given-names>IS</given-names></name><name><surname>Hanssen</surname><given-names>E</given-names></name><name><surname>Condron</surname><given-names>M</given-names></name><name><surname>Tan</surname><given-names>YH</given-names></name><name><surname>Baum</surname><given-names>J</given-names></name><name><surname>Scheres</surname><given-names>SHW</given-names></name><name><surname>Bai</surname><given-names>X-C</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Cryo-EM structure of the Plasmodium falciparum 80S ribosome bound to the anti-protozoan drug emetine</article-title><source>eLife</source><volume>3</volume><elocation-id>e03080</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.03080</pub-id></element-citation></ref><ref id="bib41"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Gctf: Real-time CTF determination and correction</article-title><source>Journal of Structural Biology</source><volume>193</volume><fpage>1</fpage><lpage>12</lpage><pub-id pub-id-type="doi">10.1016/j.jsb.2015.11.003</pub-id><pub-id pub-id-type="pmid">26592709</pub-id></element-citation></ref></ref-list><app-group><app id="app1"><title>Appendix 1</title><boxed-text><sec id="s23" sec-type="appendix"><title>Difference calculation</title><sec id="s24"><title>Exhaustive coarse sampling</title><p>To align each particle image against a reference model, RELION performs an exhaustive grid search of a large number of reference model projections against a number of image translations. In our implementation, this difference-calculation kernel is by far the most significant computational load during classification and refinement. The computations are performed in Fourier space (<xref ref-type="fig" rid="fig1">Figure 1</xref>), where projections are interpolated slices of the Fourier transform of the reference model. The tri-linear interpolation of the Fourier components performed during extraction of the Fourier-volume slice is both computationally heavy, and has significant latency associated with reading data. This is despite the use of texture objects, which use a dedicated cache and specialised storage formats. To improve memory usage, it is important to reuse the sliced data in the kernel. The maximum number of parallel tasks within this kernel is <inline-formula><mml:math id="inf26"><mml:mrow><mml:mi>P</mml:mi><mml:mo>×</mml:mo><mml:mi>T</mml:mi><mml:mo>×</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="inf27"><mml:mi>P</mml:mi></mml:math></inline-formula> is the number of orientations, <inline-formula><mml:math id="inf28"><mml:mi>T</mml:mi></mml:math></inline-formula> the number translations, and <inline-formula><mml:math id="inf29"><mml:mi>C</mml:mi></mml:math></inline-formula> the number of Fourier components (pixels). However, reuse of sliced data from the reference model requires at least one synchronisation and data communication within the <inline-formula><mml:math id="inf30"><mml:mi>P</mml:mi></mml:math></inline-formula> groups of processes comparing translations with a common Fourier slice. To avoid performance penalties, we make sure all such groups are executed in the same thread-block to enable fast communication through shared memory.</p><p>The limitations in shared memory size are circumvented by splitting the reference slice into chunks of components (pixels) that are loaded separately, the management of which does however create further overhead. We fur- ther improve performance by grouping reference orientations (in groups of <italic>P<sub>0</sub></italic> slices) to also enable reuse of translated image components. The number of completely parallel tasks is then in fact reduced, which may limit perfor- mance by potentially not saturating the hardware with a sufficient number of independent tasks. However, this reduction in turn reduces the number of reads of the Fourier transform of the particle image. This, and the reuse of translated components, ultimately provided a significant performance boost.</p><p>The described protocol was implemented by dividing the kernel into two stages, where reference data is prepared in the first stage and then reused as much as possible in the second. <xref ref-type="fig" rid="fig9">Figure 9</xref> illustrates this setup in detail. The two arbitrary parameters <italic>N</italic> and <italic>P<sub>0</sub></italic> can be tuned to balance the shared memory size with the reuse of the translation intermediates. To avoid overfit- ting these parameters to benchmarking systems, we have selected values that yield a suitable minimum required shared memory size for typical available hardware.<fig id="fig9" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.012</object-id><label>Appendix 1—figure 1.</label><caption><title>Computational flow in difference calculation kernel.</title><p>The kernel is initiated with <inline-formula><mml:math id="inf31"><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:mi>e</mml:mi><mml:mo>⁢</mml:mo><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>l</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM7"><mml:mtext>𝐏</mml:mtext><mml:mo>/</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> thread-blocks and <inline-formula><mml:math id="inf32"><mml:mi>N</mml:mi></mml:math></inline-formula> threads, where P is the total number of projections. The work flow of a thread-block in each iteration <inline-formula><mml:math id="inf33"><mml:mi>i</mml:mi></mml:math></inline-formula> is divided into two stages. In stage A the <inline-formula><mml:math id="inf34"><mml:mi>N</mml:mi></mml:math></inline-formula> pixels of <inline-formula><mml:math id="inf35"><mml:msub><mml:mi>P</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math></inline-formula> reference slices are fetched through texture memory, interpolated, and stored in shared memory. This data is then exhaustively reused in stage B, where groups of threads compute the differences to the corresponding translated image components. Individual threads within a group work with different image components, <inline-formula><mml:math id="inf36"><mml:mi>n</mml:mi></mml:math></inline-formula>, of each reference slice, <inline-formula><mml:math id="inf37"><mml:mi>p</mml:mi></mml:math></inline-formula>. Collectively all threads iterate through the <inline-formula><mml:math id="inf38"><mml:mi>N</mml:mi></mml:math></inline-formula> components of each reference slice, for a total of <inline-formula><mml:math id="inf39"><mml:mrow><mml:mi>N</mml:mi><mml:mo>×</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> components for each iteration <inline-formula><mml:math id="inf40"><mml:mi>i</mml:mi></mml:math></inline-formula>. The final result is reduced back into shared memory through atomic reduction operations. All image components are covered as <inline-formula><mml:math id="inf41"><mml:mi>i</mml:mi></mml:math></inline-formula> goes from 1 to <inline-formula><mml:math id="inf42"><mml:mrow><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:mi>e</mml:mi><mml:mo>⁢</mml:mo><mml:mi>i</mml:mi><mml:mo>⁢</mml:mo><mml:mi>l</mml:mi><mml:mo>⁢</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow id="XM8"><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, where C is the total number of Fourier components. A reduced sum of differences for each pair of orientation and translation is written to global memory prior to the kernel exiting.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.012">http://dx.doi.org/10.7554/eLife.18722.012</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-app1-fig1-v2"/></fig></p></sec><sec id="s25"><title>Sparse fine sampling</title><p>Following the exhaustive search of orientations described above, relion performs a second, fine-grained, search of the orientations which contributed most to the total alignment weight. In the majority of cases this constitutes a more sparse operation, as a few orientations and/or classifications are typically dominating. If one were to invoke the same kernel in this case, many thread-blocks would contribute insignificantly or even perform null work. We therefore chose to specialise this as a separate kernel, to reach better efficiency and stay within hardware requirements under sparse but fine sampling. The fine-grained search therefore proceeds through a preparatory stage wherein the significantly contributing combinations of reference orientations and image translations are divided into jobs (see <xref ref-type="fig" rid="fig10">Figure 10</xref>). Lists of the relevant orientations and translations are also created. A specialised kernel is then provided with this list of jobs, and invoked in parallel to execute them independently. Jobs are also created to reuse unique information (a reference slice), and minimise overhead associated with reading relevant translation indices from high-latency global memory by using sequential translations within each job. See <xref ref-type="fig" rid="fig10">Figure 10</xref> for an in-depth description of this implementation.<fig id="fig10" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.013</object-id><label>Appendix 1—figure 2.</label><caption><title>A dedicated kernel function performs the targeted fine-grained examination of the most significantly matching regions during image alignment against a reference model.</title><p>The oversampling of each of five fitting dimensions during fine-grained search renders storage of all possible weights intractable, so input and output data are stored with explicit mapping arrays. These are read by the kernel function thread-block, rather than inferred based on block ID. This creates overhead and possible latency of global memory access, which makes this kernel even further separated from the exhaustive kernel represented in <xref ref-type="fig" rid="fig9">Figure 9</xref>. Here, a pixel-chunk of a single projection is reused for a number of sequential translations, arranged contiguously if possible. Invoking separate thread blocks for non-contiguous translations allows some implicit indexing of them, which affords better access patterns for SIMD instructions and reduced latency. Due to the sparseness, shared memory can also be used for in-kernel summation of all pixels of each image, which despite some some required explicit thread-level synchronisation increases throughput by avoiding the higher latency of atomic write operations during image summation in the coarse-search kernel.</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.013">http://dx.doi.org/10.7554/eLife.18722.013</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-app1-fig2-v2"/></fig></p></sec></sec></boxed-text></app><app id="app2"><title>Appendix 2</title><boxed-text><sec id="s26" sec-type="appendix"><title>Back-projection</title><p>The calculated weights for different orientation of the particle image are used to back-project the image data into a 3D volume (<xref ref-type="fig" rid="fig11">Figure 11A</xref>). This subroutine takes a comparably small amount of 2D data as input and outputs it to a large container of 3D data, made up of voxels, elements much like pixels in an image. Each image pixel contributes to eight voxels through a tri-linear interpolation.<fig id="fig11" position="float"><object-id pub-id-type="doi">10.7554/eLife.18722.014</object-id><label>Appendix 2—figure 1.</label><caption><title>Computational flow of fine-grained search kernel.</title><p>(<bold>A</bold>) Weighted back-projection of a 2D image into three different planes. We explored two memory access approaches (<bold>B</bold>) for this task, namely gather and scatter. In the gather approach a process (marked with orange) is assigned to individual or groups of 3D voxels. The process read from the input image and updates the data of the assigned voxel(s).</p><p><bold>DOI:</bold> <ext-link ext-link-type="doi" xlink:href="10.7554/eLife.18722.014">http://dx.doi.org/10.7554/eLife.18722.014</ext-link></p></caption><graphic mime-subtype="x-tiff" mimetype="image" xlink:href="elife-18722-app2-fig1-v2"/></fig></p><p>Two fundamentally different implementations were explored for this task, using either gather or scatter memory access patterns (<xref ref-type="fig" rid="fig11">Figure 11B</xref>). The issue of parallel processes writing to the same memory position simultaneously is avoided in the gather approach by restricting subsets of positions in the output to individual processes. In the scatter approach, on the contrary, write clashes are handled with atomic writes, where memory positions are reserved just in time prior to the write operation. This extra set of operations have an overhead and can become a considerable performance issue in regions with many clashes, e.g. close to the origin. However, the scatter approach enables full reuse of the interpolation of pixels for all the affected voxels, since no access restrictions exists for write operations.</p><p>In the scatter approach, processes are instead assigned to individual or groups of pixels and can output to all of the voxels. In our benchmarks the scatter approach performed significantly better and was thus selected as the standard. This is most likely due to the fact that individual images on average contribute very sparsely to the 3D volume and hence only affect a small subset of voxels. Since the number of processes in the gather approach is proportional to the number of voxels, this renders many initiated processes jobless. Both this issue and the reduced reuse of intermediates can be addressed to some degree by enabling processes to manage groups of voxels. This method yielded some performance improvements, but the scatter approach nevertheless provides superior performance.</p></sec></boxed-text></app><app id="app3"><title>Appendix 3</title><boxed-text><sec id="s27" sec-type="appendix"><title>Hardware recommendations</title><p>Each new generation of GPU hardware has provided significant performance gains and increasing amounts of memory, so the most important factor is to use a new GPU – currently Pascal-class cards. Titan-X (Pascal) cards are likely to provide the highest performance, but due to the substantial price premium of these cards, we believe GTX 1080 cards offer better value. The workstation with quad GTX 1080 GPUs described in the materials can currently be assembled from parts for around $5000 (See links from the relion home page), or purchased pre-assembled from a few vendors for about $6200. Since the heavy computational steps run on the GPU, there is no need for dual CPU sockets. However, disk I/O bandwidth needs are high, and as seen in <xref ref-type="fig" rid="fig4">Figure 4C</xref> it helps to use two SSDs configured in RAID0. This provides a powerful cluster replacement for many users, but the quad GPU configuration is sensitive to specific motherboard models and the fans can be a bit loud for a normal office environment. In our labs, the currently most popular option is rather a dual-GPU desktop that is both quiet and smaller. This will work with virtually any motherboard with two GPU sockets. With the cheap GTX 1070 cards the machine parts only cost $2000, and we expect it can be obtained from vendors for roughly $2500. A single SSD is sufficient in this case. All these prices are subject to fluctuations (and changes due to new hardware), but it is nevertheless interesting to compare the performance/price for the most computationally intensive 3D classification with the x86 CPU cluster (<inline-formula><mml:math id="inf43"><mml:mo>∼</mml:mo></mml:math></inline-formula>$8500/node, not including fast network). Based on the run times in <xref ref-type="fig" rid="fig4">Figure 4C</xref>, the performance/price ratio is a factor 27 higher for the quad-GPU workstation (with RAID0 SSD) compared to x86 CPU nodes, and a factor 45 higher for the low-cost dual GTX 1070 desktop (at the cost of lower absolute performance). This is based on pre-assembled system prices, and while some vendors might charge more there is always the option to assemble systems from parts for even better value. When it comes to rack-mounted alternatives, many such nodes only work with professional-class (Tesla) cards, but there are larger 4U nodes that work with quad GTX 1080 cards, and even a few 1U models. However, this is highly dependent on the hardware and the reader is advised to seek up-to-date recommendations from vendors or the RELION web pages.</p></sec></boxed-text></app></app-group></back><sub-article article-type="article-commentary" id="SA1"><front-stub><article-id pub-id-type="doi">10.7554/eLife.18722.023</article-id><title-group><article-title>Decision letter</article-title></title-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Subramaniam</surname><given-names>Sriram</given-names></name><role>Reviewing editor</role><aff id="aff5"><institution>National Cancer Institute</institution>, <country>United States</country></aff></contrib></contrib-group></front-stub><body><boxed-text><p>In the interests of transparency, eLife includes the editorial decision letter and accompanying author responses. A lightly edited version of the letter sent to the authors after peer review is shown, indicating the most substantive concerns; minor comments are not usually included.</p></boxed-text><p>Thank you for submitting your article &quot;Accelerated cryo-EM structure determination with parallelisation using GPUs in RELION-2&quot; for consideration by <italic>eLife</italic>. Your article has been reviewed by four peer reviewers, one of whom, Sriram Subramaniam, is a member of our Board of Reviewing Editors, and the evaluation has been overseen by John Kuriyan as the Senior Editor. The following individuals involved in review of your submission have agreed to reveal their identity: Steven J Ludtke and J Bernard Heymann. A further reviewer remains anonymous.</p><p>Following extensive discussions with the reviewers, we are willing to re-review a revised version of your manuscript. The revised version must address all of the technical comments from the reviewers and include a substantive technical section with more details of the software implementation, as well as a more extensive description of suitable platforms with a credible comparison of performance.</p><p>The main points of this discussion are noted below:</p><p>1) There was agreement that the main point of this manuscript was to advertise the existence of a GPU port of Relion, which many people in the field will likely wish to use. The changes to Relion described in the manuscript do not improve the scientific results, but improve computational efficiency that could potentially accelerate discoveries. Nevertheless, the reviewers expressed doubts that the increase in computational efficiency would stand out as a significant advance technologically or methodologically.</p><p>2) The reviewers also noted that the extent of the performance improvement with GPU was exaggerated and potentially misleading; this is an important parameter because this would lead to users making purchasing decisions without the correct facts. While the reviewers felt it is not possible to be completely equitable when comparing completely different hardware platforms, the views was that this manuscript is more strongly skewed towards GPU for the following reasons:</p><p>a) Very different generations of hardware were compared (the CPUs are 4 years older than the GPUs, and many changes have been made to CPUs in that time)</p><p>b) The code in Relion 2.0 was substantially optimized in the GPU version; it seems that many of these optimizations could be easily included in the CPU version of Relion 2.0. A better comparison would be to compare equivalent generations of GPU/CPUs, and equivalent versions of Relion.</p><p>3) There was concern that the specific improvements to the code that helped improve GPU performance were not identified clearly and that it was difficult to tell which are only of interest for GPU and which can be implemented for CPU. A portion of the community may have strong interest in the details of these improvements, while others will likely only be interested in the question of which platform is more likely to be cost efficient and remain relevant over a relatively extended lifetime. However, this manuscript does not lay out these improvements clearly for the first group, but also does not provide fully controlled comparison of comparable platforms for the second group.</p><p>The suggestions from the reviewers follow:</p><p>1) The manuscript needs to include a paragraph discussing previous EM work that used GPU implementations, encompassing the references listed below. Pubmed /26592709 is cited in section 2.1 in another context, but not for GPU implementation.</p><p><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/20538058">http://www.ncbi.nlm.nih.gov/pubmed/20538058</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/24060989">http://www.ncbi.nlm.nih.gov/pubmed/24060989</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/26370395">http://www.ncbi.nlm.nih.gov/pubmed/26370395</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/23644547">http://www.ncbi.nlm.nih.gov/pubmed/23644547</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/20558298">http://www.ncbi.nlm.nih.gov/pubmed/20558298</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/26592709">http://www.ncbi.nlm.nih.gov/pubmed/26592709</ext-link></p><p>2) It would be beneficial to include significantly more algorithmic details in the paper. The way it is currently written seems to present mainly the benchmark tests, while leaving largely absent the explanation of what was important for the development of the GPU code.</p><p>3) On a technical note, regarding the experiments made for comparing CPU and GPU code and between single and double precision, one would assume that the authors used the same initial model, parameters and random seed in all cases (--random_seed option in RELION) to initialize all the runs, but this is not mentioned anywhere in the text. If this was actually done, a fairly thorough analysis of the assigned orientations and orientational probabilities could've been done where the single difference between the runs would've been the different program implementations.</p><p>4) In paragraph one of the Results section, the mention of what the authors believe to have the most prominent influence on performance is only vaguely explained:</p><p>&quot;To overcome this, our implementation instead stores oversampled Fourier transforms of every class-reference in GPU memory, and extracts 2D-slices (in any orientation) on demand. By utilising fast-access data structures known as textures (normally used to project images on 3D objects), on-demand projection in fact achieves faster execution compared to reading pre-calculated projections from memory.&quot;</p><p>i) The authors claim to store oversampled Fourier transforms of every class-reference in GPU memory. What kind of transforms are being referred to, 3D or 2D? If this is a 3D oversampled FFT volume, then it should be mentioned and the sentence needs to be corrected to have one FFT transform per class-reference. On the other hand, if the authors mention 2D reference FFT slices (which is less likely because it is not consistent with the on-demand projection statement), they need to elaborate on how many such slices they used and on angular sampling strategies.</p><p>ii) The authors need to expand upon using texture operations for the on-demand projection. Specific citation(s) would be helpful.</p><p>5) There are inconsistent statements regarding the differences between the methods used in RELION 1.4 and the new accelerated version of RELION. On one side the authors state: &quot;Neither method nor behaviour of RELION has changed from that of version 1.4.&quot;, but later on they describe algorithmic changes to the particle picking strategy in Section 2.2. The only tangible difference appears to be the discarding of resolution information in micrographs beyond that of search templates, but this has to be properly highlighted and the statement in Section 2.1 revised to reflect the fact that there are changes, albeit subtle, between versions 1.4 and 2.0 other than the GPU speedup. It will save end-users time and confusion if all of the changes are documented.</p><p>Is it correct that Relion adopts a maximum-likelihood approach, and not a Bayesian approach because all the priors (distributions) it uses are refined? It would be good that a person familiar with the difference between &quot;Bayesian&quot; and &quot;Maximum Likelihood&quot; could clarify this point to get it right in the published version.</p><p>6) There are several comparisons noted in the paper that need to be clarified.</p><p>i) The comparison draw between overall processing time and the time it took the authors to download the data from EMPIAR is meaningless, there are many factors that can influence data download speed of large datasets and to use that as a benchmark can be misleading. The typical RELION user will probably not be downloading data from a database for processing but instead would be collecting and processing their own data. A comparison against the time it takes to collect data would therefore be more appropriate and provide the reader with a better reference point about what the other rate limiting steps in single particle cryo-EM. Another useful comparison is to estimate the number of CPUs required to process the data in the same time (115h) that it took for a GPU-driven solution.</p><p>ii) Distributing a job across a cluster leads to substantial overhead (e.g. network traffic) that will not be present when running on a single workstation. While it may be justified to look at the overhead as one reason for the slower execution of jobs on CPU systems, this should ideally be separated in benchmark tests from the actual CPU hours needed to complete the job. Maybe some of the tests could be rerun on a single workstation to exclude cluster-related overhead.</p><p>7) It is not clear who might be the intended reader of the manuscript. It is clearly not meant for an average user of Relion package, who most likely is a structural biologist oblivious to intricacies of computer code and its dependence on hardware platform. The problems mentioned are immediately apparent at the beginning of the Results section. The fact that &quot;class&quot; is used to mean &quot;3D structure&quot; took me by surprise, particularly that one has to compare <xref ref-type="fig" rid="fig1">Figure 1</xref> with <xref ref-type="fig" rid="fig2">Figure 2</xref> to realize that. Some formulations are cryptic – &quot;Even individual image pixels are evaluate independently from on another&quot;. Specifically how one evaluates individual pixels, for what purpose, and why doing it independently would constitute an advantage?</p><p>Results section, first paragraph; what is &quot;class-reference&quot;? What follows is difficult to understand – if, as stated, 2D slices are extracted from a presumably 3D volume, this constitutes a projection operation, but next sentence casts it in doubt, as it is stated this is being done using textures &quot;normally used to project images on 3D objects&quot;. So it is not a projection? Or some other projection is meant?</p><p>Subsequently, much is made of the number of classes, but it is not clear what these classes are and why one would want to have them. How their number is decided? What if one wants to preform analysis without any classes, is it possible? What would be the speed up?</p><p>The most cryptic is the closing sentence of the section: Neither method nor behaviour of relion has changed from that of version 1.4. First, what is so special about version 1.4? How a casual reader is supposed to know that or worse, care about this number? It would also appear the statement is contradicted by what follows, as much is made of single precision GPU implementation as opposed to double precision of the general purpose original code. On a side, why double precision is &quot;so-called&quot;? I am not sure what is meant here.</p><p>Finally, section on Limited precision does not offer much outside of generalities and ends at a surprising statement: &quot;Execution of the iterative gridding algorithm.… appeared to show significant loss of information.&quot; Appeared? How carefully was it investigated? What is &quot;significant&quot;?</p><p>8) Figures are microscopic, which probably reflects authors' interest in atomic-scale objects, but at the same time they are filled with details essential for the understanding of the text. In the very least, they should be properly referenced in the text in key places. The final maps should also be deposited as is customary in the field, this intent is not indicated in the manuscript.</p><p>9) As this manuscript may entice people to spend tens to hundreds of thousands of dollars in research funds, it is incumbent upon the authors and reviewers to insure that this study is as balanced and fair as possible. There was a similar pro-GPU move ~8 years ago, Frealign, EMAN2 and SPARX were all parallelized for the GPU, achieving typically 20-80x speedups, and many purchased hardware, but few made effective use of it for very long. While the reviewers do not dispute the accuracy of the presented results, they believe that the results are highly biased based on the specific hardware selection, and on issues not discussed in the manuscript.</p><p>10) There is some price/performance advantage in GPUs, but the current estimate is simply ludicrous, and many people reading this manuscript will not understand the technical differences. Primary issues that occur immediately are:</p><p>– The processors used on the 120 core test is a 4 year-old processor considered &quot;end of life&quot; by Intel. These are being compared to a set of 4 GPUs so new they are difficult to acquire at most vendors. The vectorization and architecture changes made by intel in recent years, major hyperthreading improvements, and other factors will come into play. Specifically:</p><p>–- CPU optimization for the specific processors in use? Image processing code compiled for specific current generation CPUs with -march=native often see 30% or more speedups, without any coding changes.</p><p>–hyperthreading use. This likely will not have an impact the older processors in the 120 core test, but Xeon v3 processors can often see speedups of ~30% even on compute-intensive loads with moderate thread oversubscription.</p><p>– Were the core parallelism improvements made for the GPU (those which were applicable) also compiled into the CPU version?</p><p>– Running on 120 cores implies use of MPI, and brings many other factors (network, available I/O) into play when comparing speed.</p><p>– Was the CPU computation done with single precision at similar points to make the comparison fair?</p><p>In <xref ref-type="fig" rid="fig4">Figure 4D</xref>, the authors are claiming a 10-40x price-performance improvement. One reviewer notes that he/she configured two machines at a reputable, but inexpensive vendor. Both machines had 64 GB of RAM, a 1.2 TB SSD. One was configured with 4x 1080 GPU cards and 8 CPU cores at 2.6 GHz. The other was configured with a base-level GPU for display and 2x E5-2697Av4 -&gt; 32 cores @ 2.6 GHz. Both machines come in at ~$9000. As compared to their &quot;one node&quot;, this machine has 32 rather than 12 cores, and with improvements in the CPU, each is ~1.5x more powerful than their test machine. This would already bring their price/performance comparison down by 4x, ignoring other issues.</p><p>11) The reviewers do not believe the current comparison in the manuscript is fair without at least some attempt to test on current generation CPUs with some real attempt to insure things are compiled and executed optimally. This need not be a month-long test, but at least a few iterations of a single model refinement to establish a baseline for modern hardware. As the major point of the manuscript is benchmarking, this is a minimum requirement for publication.</p><p>12) The following statements are not clear:</p><p>&quot;In fact, using GPU-enabled relion, the time needed for classification is only weakly dependent on the number of classes used, whereas the CPU-based implementation has a much steeper linear dependence (<xref ref-type="fig" rid="fig3">Figure 3</xref>)&quot;</p><p>and:</p><p>&quot;In the CPU-only version, the computational time scales linearly with increased number of classes (<xref ref-type="fig" rid="fig3">Figure 3B</xref>) due to the serialised single image calculations, whereas GPU-enabled execution can show better-than linear scaling.&quot;</p><p>Looking at <xref ref-type="fig" rid="fig3">Figure 3B</xref>, this is not clear. The GPU curve also visually appears to be following a linear trend, and rough estimates show a similar scaling to the GPU curve.</p><p>The values on the GPU curve are small enough compared to the size of the dots, this is difficult to assess quantitatively, but this figure certainly doesn't illustrate the point being made.</p><p>13) In <xref ref-type="fig" rid="fig3">Figure 3E</xref>, the prominent lump in the middle is quite odd. The statement &quot;GPU's ability to parallelise the drastically increased number of tasks&quot; does not really explain it. If N independent tasks need to be completed in iteration 10, and 30N need to be completed in iteration 15, the only way this curve makes sense is if the GPU is massively underutilizing resources during iteration 10. It also would make no sense that going from 7.5 to 3.8 degree sampling would increase the number of tasks 30-fold. Something very peculiar is going on here, and it seems important to understand it.</p><p>&quot;While relion-1.4 only exploited parallelism over images (left), in the new implementation classes and all orientations of each class are expressed as tasks that can be scheduled independently on the accelerator hardware (e.g. GPUs)&quot;</p><p>Could the same change not be tested on CPUs as well?</p><p>14) <xref ref-type="fig" rid="fig4">Figure 4</xref> – Why is this test suddenly shown for a ribosome? How does this compare on the benchmark ΒGal data set?</p><p>15) The use of GPU's is usually problematic because of rapid progress in GPU technology. This means that many different GPU's are available and in particular older one's suffer from poor feature support. The authors need to explain exactly what is required in a GPU and which GPU's are too old or inadequate.</p><p>16) The loss of information in the gridding reconstruction algorithm using single precision is not explained clearly. Typically, this indicates very small or very large values that could be avoided by some normalization approach. This could also indicate that the iterative refinement in the gridding algorithm is too fast, generating instabilities with single precision.</p><p>17) In the Introduction, the authors mention some other software packages giving the impression of a comprehensive list. However, some software packages are left out. Either be comprehensive or be more general in referring to the wiki showing software packages.</p><p>18) &quot;This allows high-resolution structure determination with minimal bias or user input.&quot; The impression is that a Bayesian approach is less biased than other methods. This is incorrect, as Bayesian methods are just as biased as any other when it is fed erroneous data (such as poorly picked particles) or an inappropriate starting reference (prior) is used.</p><p>19) There is no information about the availability of the package (web site and license) or about deposition of the maps.</p></body></sub-article><sub-article article-type="reply" id="SA2"><front-stub><article-id pub-id-type="doi">10.7554/eLife.18722.024</article-id><title-group><article-title>Author response</article-title></title-group></front-stub><body><p><italic>The main points of this discussion are noted below:</italic> </p><p><italic>1) There was agreement that the main point of this manuscript was to advertise the existence of a GPU port of Relion, which many people in the field will likely wish to use. The changes to Relion described in the manuscript do not improve the scientific results, but improve computational efficiency that could potentially accelerate discoveries. Nevertheless, the reviewers expressed doubts that the increase in computational efficiency would stand out as a significant advance technologically or methodologically.</italic> </p><p>As previously discussed, the acceleration described in our paper has the potential to completely change how we work with image reconstruction. With the cost of image processing substantially reduced, more extensive classification strategies, for example, may now be explored. Because this now becomes possible even for labs that do not have access to large supercomputing facilities, our approach will also contribute to increasing the accessibility of high-resolution cryo-EM structure determination to new users. In the revised version, we now also describe the modifications to our algorithms on a level where others can build on them. We have extended the manuscript with a more detailed methods section, descriptions of how the various steps have been tailored to modern GPU hardware, and we also provide appendices with detailed descriptions of the technical implementations, as requested by the reviewers.</p><p><italic>2) The reviewers also noted that the extent of the performance improvement with GPU was exaggerated and potentially misleading; this is an important parameter because this would lead to users making purchasing decisions without the correct facts. While the reviewers felt it is not possible to be completely equitable when comparing completely different hardware platforms, the views was that this manuscript is more strongly skewed towards GPU for the following reasons:a) Very different generations of hardware were compared (the CPUs are 4 years older than the GPUs, and many changes have been made to CPUs in that time)b) The code in Relion 2.0 was substantially optimized in the GPU version; it seems that many of these optimizations could be easily included in the CPU version of Relion 2.0. A better comparison would be to compare equivalent generations of GPU/CPUs, and equivalent versions of Relion.</italic> </p><p>Yes, we previously discussed this comparison should have used the latest-generation hardware. We have rewritten the text and base all comparisons on brand-new Xeon E5- 2960v4 nodes. However, because of the higher cost for such nodes, because more cores share memory, and because we introduced further optimizations in the GPU code, the relative performance advantages remain. When comparing to even more cost-efficient GTX 1070 GPUs that we now include in the performance/price ratio can even get close to a factor 50. However, we are not interested in arguing specific numbers (that no doubt will change), so to make the manuscript relevant in the long run we have also altered the formulations in the Abstract and understate it to only mention order-of-magnitude advantages.</p><p>We have also included detailed specifications of hardware, and provide users with examples of both cost-efficient and performance-leading hardware (in appendix III).</p><p>We are equally interested in improving CPU performance, and will invest efforts there in the future, but as seen e.g. from efforts by Intel to accelerate RELION on Xeon Phi (that only provide 30% speedup), this is not trivial work.</p><p><italic>3) There was concern that the specific improvements to the code that helped improve GPU performance were not identified clearly and that it was difficult to tell which are only of interest for GPU and which can be implemented for CPU. A portion of the community may have strong interest in the details of these improvements, while others will likely only be interested in the question of which platform is more likely to be cost efficient and remain relevant over a relatively extended lifetime. However, this manuscript does not lay out these improvements clearly for the first group, but also does not provide fully controlled comparison of comparable platforms for the second group.</italic> </p><p>We were initially hesitant about making the manuscript too technical in the initial version, but have now rewritten the methods section to provide a better technical background to the algorithms used and where the bottlenecks are, how this maps to GPU hardware features, and we added two appendices with specific details of the kernel implementations for the technically interested readers. We think that this has improved the paper substantially for both audiences, and thank the reviewers for their suggestion.</p><p><italic>The suggestions from the reviewers follow:</italic></p><p><italic>1) The manuscript needs to include a paragraph discussing previous EM work that used GPU implementations, encompassing the references listed below. Pubmed /26592709 is cited in section 2.1 in another context, but not for GPU implementation.</italic> </p><p><italic> <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/20538058">http://www.ncbi.nlm.nih.gov/pubmed/20538058</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/24060989%20">http://www.ncbi.nlm.nih.gov/pubmed/24060989</ext-link> <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/26370395">http://www.ncbi.nlm.nih.gov/pubmed/26370395</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/23644547">http://www.ncbi.nlm.nih.gov/pubmed/23644547</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/20558298">http://www.ncbi.nlm.nih.gov/pubmed/20558298</ext-link><ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/26592709">http://www.ncbi.nlm.nih.gov/pubmed/26592709</ext-link></italic></p><p>We’re delighted to add all of them, and these contributions are now mentioned in the Introduction.</p><p> <italic>2) It would be beneficial to include significantly more algorithmic details in the paper. The way it is currently written seems to present mainly the benchmark tests, while leaving largely absent the explanation of what was important for the development of the GPU code.</italic> </p><p>In the revised manuscript we have added a Method section which more thoroughly introduces parallelism and which goes on to explain the fundamental aspects of the acceleration. Additionally, appendices are provided and referred to in the text, which explain and schematically show program flow and discusses effects on performance.</p><p> <italic>3) On a technical note, regarding the experiments made for comparing CPU and GPU code and between single and double precision, one would assume that the authors used the same initial model, parameters and random seed in all cases (--random_seed option in RELION) to initialize all the runs, but this is not mentioned anywhere in the text. If this was actually done, a fairly thorough analysis of the assigned orientations and orientational probabilities could've been done where the single difference between the runs would've been the different program implementations.</italic> </p><p>All experiments were performed using the same command-line, however the non- deterministic nature of the GPU-enabled execution provides an element of variability which to some extent makes identical seeds superfluous. We nonetheless agree that this is an important consideration to mention, and this is now explicitly done in the revised manuscript. The analysis of the assigned orientations is a good suggestion. We've added histograms of the differences in orientations as <xref ref-type="fig" rid="fig5s1">Figure 5—figure supplement 1</xref>.</p><p> <italic>4) In paragraph one of the Results section, the mention of what the authors believe to have the most prominent influence on performance is only vaguely explained:</italic> </p><p> <italic>&quot;To overcome this, our implementation instead stores oversampled Fourier transforms of every class-reference in GPU memory, and extracts 2D-slices (in any orientation) on demand. By utilising fast-access data structures known as textures (normally used to project images on 3D objects), on-demand projection in fact achieves faster execution compared to reading pre-calculated projections from memory.&quot;</italic> </p><p> <italic>i) The authors claim to store oversampled Fourier transforms of every class-reference in GPU memory. What kind of transforms are being referred to, 3D or 2D? If this is a 3D oversampled FFT volume, then it should be mentioned and the sentence needs to be corrected to have one FFT transform per class-reference. On the other hand, if the authors mention 2D reference FFT slices (which is less likely because it is not consistent with the on-demand projection statement), they need to elaborate on how many such slices they used and on angular sampling strategies.</italic> </p><p>For 3D refinements or 3D classification, we keep oversampled 3D Fourier transforms in memory and take 2D slices out of these on demand. This is covered more in-depth by the expanded method-section. The phrase “Instead, like the CPU code, our implementation stores a two-fold oversampled Fourier transform of each reference in GPU memory, and 2D slices (along any orientation) are extracted only when needed.” has also been adopted to clarify storage of transformed volumes.</p><p> <italic>ii) The authors need to expand upon using texture operations for the on-demand projection. Specific citation(s) would be helpful.</italic> </p><p>We now both explain textures, texture units, and how it can be used to improve performance, in the expanded methods section and appendix I.</p><p> <italic>5) There are inconsistent statements regarding the differences between the methods used in RELION 1.4 and the new accelerated version of RELION. On one side the authors state: &quot;Neither method nor behaviour of RELION has changed from that of version 1.4.&quot;, but later on they describe algorithmic changes to the particle picking strategy in Section 2.2. The only tangible difference appears to be the discarding of resolution information in micrographs beyond that of search templates, but this has to be properly highlighted and the statement in Section 2.1 revised to reflect the fact that there are changes, albeit subtle, between versions 1.4 and 2.0 other than the GPU speedup. It will save end-users time and confusion if all of the changes are documented.</italic> </p><p>The conflicting statements have been resolved by removing the former. All implemented changes have been described and documented.</p><p> <italic>Is it correct that Relion adopts a maximum-likelihood approach, and not a Bayesian approach because all the priors (distributions) it uses are refined? It would be good that a person familiar with the difference between &quot;Bayesian&quot; and &quot;Maximum Likelihood&quot; could clarify this point to get it right in the published version.</italic> </p><p>This is not entirely correct, although much of this discussion is semantics. RELION uses a regularised likelihood approach, where a likelihood function is complemented with a prior probability of the model. According to Bayes' law, the regularised likelihood function is proportional to the posterior probability of the model given the experimental data. Because RELION estimates the parameters of the prior from the data themselves, this type of approach is called an empirical Bayesian approach (see Wikipedia for more details: <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Empirical_Bayes_method">https://en.wikipedia.org/wiki/Empirical_Bayes_method</ext-link>). Note that un-regularised likelihood optimisation algorithms (like e.g. implemented in Xmipp, and in a limited manner also in Frealign) do not include a prior on the model. These approaches are also called &quot;maximum likelihood&quot;, but often depend on more ad-hoc regularisation approaches, for example through customised low-pass filters. To distinguish RELION from the unregularised likelihood approaches, we use the term &quot;Bayesian&quot;. In response to the reviewer's comment, we've added the distinction of &quot;empirical&quot; Bayesian to the revised manuscript, and explain the entire algorithm better in the methods section.</p><p> <italic>6) There are several comparisons noted in the paper that need to be clarified.</italic> </p><p> <italic>i) The comparison draw between overall processing time and the time it took the authors to download the data from EMPIAR is meaningless, there are many factors that can influence data download speed of large datasets and to use that as a benchmark can be misleading. The typical RELION user will probably not be downloading data from a database for processing but instead would be collecting and processing their own data. A comparison against the time it takes to collect data would therefore be more appropriate and provide the reader with a better reference point about what the other rate limiting steps in single particle cryo-EM. Another useful comparison is to estimate the number of CPUs required to process the data in the same time (115h) that it took for a GPU-driven solution.</italic> </p><p>This is a valid objection. This data set comprises more than 1,500 micrographs, and although no exact timings for the data acquisition are given in the corresponding paper, it is likely that the data acquisition took multiple days. Therefore, we've replaced this statement and instead state that the total processing time was probably comparable to the data acquisition time.</p><p>Regarding the second point and quantitative comparisons of CPU and GPU hardware: such comparisons are given in detail for the ribosome benchmarks, and <xref ref-type="fig" rid="fig4">Figure 4</xref> as well as appendix III now provide both performance and performance/price ratios for different GPU options. The section on the betagal data set is rather intended as a representative use case where we illustrate that it is now indeed possible to process even one of today’s largest data set on a single GPU workstation.</p><p> <italic>ii) Distributing a job across a cluster leads to substantial overhead (e.g. network traffic) that will not be present when running on a single workstation. While it may be justified to look at the overhead as one reason for the slower execution of jobs on CPU systems, this should ideally be separated in benchmark tests from the actual CPU hours needed to complete the job. Maybe some of the tests could be rerun on a single workstation to exclude cluster-related overhead.</italic> </p><p>Because the absolute speed of the CPU implementation is so much lower, presently the network overhead is not a major limiting factor; when comparing performance for 1 vs. 10 CPU nodes in our benchmark, our communication overhead during the expectation step was below 5% when using 10Gb network. A comparison of CPU and GPU implementations on a single desktop would only serve the purpose of illustrating that the CPU implementation is entirely unfeasible to run on desktops (it would take over a month), whereas it works great with GPUs. Therefore, a limited amount of network overhead is inescapable for realistic processing using CPUs, whereas it can be avoided using GPUs.</p><p>However, doing extensive MPI benchmarking fairly would require an entire paper of its own, so we have instead removed our statement about MPI overhead.</p><p><italic>7) It is not clear who might be the intended reader of the manuscript. It is clearly not meant for an average user of Relion package, who most likely is a structural biologist oblivious to intricacies of computer code and its dependence on hardware platform. The problems mentioned are immediately apparent at the beginning of the Results section. The fact that &quot;class&quot; is used to mean &quot;3D structure&quot; took me by surprise, particularly that one has to compare <xref ref-type="fig" rid="fig1">Figure 1</xref> with <xref ref-type="fig" rid="fig2">Figure 2</xref> to realize that. Some formulations are cryptic – &quot;Even individual image pixels are evaluate independently from on another&quot;. Specifically how one evaluates individual pixels, for what purpose, and why doing it independently would constitute an advantage?</italic> </p><p>We now include more algorithmic detail in the expanded methods section, and we also add more useful information on the different hardware platforms for the average RELION user (<xref ref-type="fig" rid="fig4">Figure 4C</xref>, appendix III). We agree that the modern structural biologist interested in doing cryo-EM does need some minimum knowledge about issues pertaining to high- performance computing in order to make the best use of the available hardware (using RELION or any other program). By adding more information about the different aspects of the computations in our implementation, the revised manuscript should also be useful in that respect. The formulation of pixel “evaluation” has also been revised to more directly indicate any logical arithmethical operation.</p><p> <italic>Results section, first paragraph; what is &quot;class-reference&quot;? What follows is difficult to understand – if, as stated, 2D slices are extracted from a presumably 3D volume, this constitutes a projection operation, but next sentence casts it in doubt, as it is stated this is being done using textures &quot;normally used to project images on 3D objects&quot;. So it is not a projection? Or some other projection is meant?</italic> </p><p> <italic>Subsequently, much is made of the number of classes, but it is not clear what these classes are and why one would want to have them. How their number is decided? What if one wants to preform analysis without any classes, is it possible? What would be the speed up?</italic> </p><p>We have removed the term class-reference from the manuscript. We now speak about &quot;3D reference maps, or 3D classes&quot; (e.g. subsection “Regularised likelihood optimisation”) to make this clearer. The number of classes to refine is a user-defined parameter, as is the case with most multi- reference refinement programs in the field.</p><p> <italic>The most cryptic is the closing sentence of the section: Neither method nor behaviour of relion has changed from that of version 1.4. First, what is so special about version 1.4? How a casual reader is supposed to know that or worse, care about this number? It would also appear the statement is contradicted by what follows, as much is made of single precision GPU implementation as opposed to double precision of the general purpose original code. On a side, why double precision is &quot;so-called&quot;? I am not sure what is meant here.</italic> </p><p> <italic>Finally, section on Limited precision does not offer much outside of generalities and ends at a surprising statement: &quot;Execution of the iterative gridding algorithm.… appeared to show significant loss of information.&quot; Appeared? How carefully was it investigated? What is &quot;significant&quot;?</italic> </p><p>Version 1.4 is simply the most recent stable version of RELION. We've clarified this in the revised manuscript by instead referring to 'previous versions' of RELION. We have also removed the “so-called” statement regarding double precision. With regards to the gridding algorithm, we felt it necessary to briefly comment on what was omitted from GPU acceleration, but felt it unnecessary to elaborate on changes not made. In the revised manuscript we have removed the &quot;significant&quot; statement, and now mention the gridding algorithm as an opportunity for further improvement.</p><p> <italic>8) Figures are microscopic, which probably reflects authors' interest in atomic-scale objects, but at the same time they are filled with details essential for the understanding of the text. In the very least, they should be properly referenced in the text in key places. The final maps should also be deposited as is customary in the field, this intent is not indicated in the manuscript.</italic> </p><p>We don't really understand how this happened (on our screen/prints the figures aren't microscopic at all). Regardless, we apologize for any inconvenience caused. All figures are vector based and will be rescaled to balance layout and readability, and we have increased the relative size of small type and objects. We have deposited the β- galactosidase map at the EMDB (EMD-4116). We chose not to deposit the ribosome reconstruction from <xref ref-type="fig" rid="fig5">Figure 5</xref> (as numbered in the revised manuscript), as it is basically identical to the EMDB entry 2660, so would only constitute a duplication of an existing entry.</p><p><italic>9) As this manuscript may entice people to spend tens to hundreds of thousands of dollars in research funds, it is incumbent upon the authors and reviewers to insure that this study is as balanced and fair as possible. There was a similar pro-GPU move ~8 years ago, Frealign, EMAN2 and SPARX were all parallelized for the GPU, achieving typically 20-80x speedups, and many purchased hardware, but few made effective use of it for very long. While the reviewers do not dispute the accuracy of the presented results, they believe that the results are highly biased based on the specific hardware selection, and on issues not discussed in the manuscript.</italic> </p><p>There are two aspects to this point. First, there is the point of hardware selection. Second, the point of long-term usefulness of the code.</p><p>To address the first point, we have expanded the comparison of different combinations of hardware as a part of <xref ref-type="fig" rid="fig4">Figure 4</xref> (and appendix III). This comparison is not a comprehensive study of all hardware available on the market, but rather illustrates the considerations relevant for modern GPUs. We believe that the relative wide spread of difference GPUs (and CPUs) gives potential users a reasonable insight into what hardware to buy.</p><p>Regarding the second point, the impact of any software implementation depends on long- term maintenance, and that the code is incorporated in the main codebase rather than a separate spin-off from an old release. This is one key reason why everyone uses GPU for some cryo-EM programs like Gctf and Motioncorr (1 or -2), but not e.g. Frealign. We note here that our implementation represents a close collaboration between the Scheres and Lindahl groups, and is not a one-off optimization of a specific application version, but a long-term commitment to GPUs for RELION, now a part of the main codebase. We are ourselves also making large hardware investments in GPUs. In addition, after having supported GPUs for close to a decade in Gromacs, the molecular simulation users have switched entirely to GPUs. We believe this backs up our claims to long-term commitment.</p><p> <italic>10) There is some price/performance advantage in GPUs, but the current estimate is simply ludicrous, and many people reading this manuscript will not understand the technical differences. Primary issues that occur immediately are:</italic> </p><p> <italic>– The processors used on the 120 core test is a 4 year-old processor considered &quot;end of life&quot; by Intel. These are being compared to a set of 4 GPUs so new they are difficult to acquire at most vendors.</italic> </p><p>We understand these concerns and have updated benchmarks to use newer CPU hardware. However, not all benchmarks have seen an improvement in favour of the CPU, when considering price/performance, and the cheap GTX 1070 cards provide even better performance/price ratios. Still, despite this we have decided to tone down the statements and no longer mention specific numbers in the Abstract to focus on principles, not numbers.</p><p><italic>The vectorization and architecture changes made by intel in recent years, major hyperthreading improvements, and other factors will come into play. Specifically:</italic> </p><p> <italic>– CPU optimization for the specific processors in use? Image processing code compiled for specific current generation CPUs with -march=native often see 30% or more speedups, without any coding changes.</italic> </p><p>We used hyper-threading and the fastest (as far as we know) flags for the x86 code (RELION uses –O3 by default, which includes –march=native). Intel has also worked to accelerate RELION-1.4 for their latest Xeon Phi processors. When changing the code and selecting the best compiler flags, they see a 20-30% performance improvement – but only when adding a $4800 accelerator (the cost per node would be much higher than our nodes above). While this indicates possible improvements on the CPU-side, they do not amount to that estimated by the reviewer.</p><p> <italic>– hyperthreading use. This likely will not have an impact the older processors in the 120 core test, but Xeon v3 processors can often see speedups of ~30% even on compute-intensive loads with moderate thread oversubscription.</italic> </p><p>As mentioned above, hyperthreading was of course utilized for all CPU runs as is now clarified by “While we refer to the physical core count when describing hardware, hyperthreading was enabled and used for all benchmarks since it improves performance on the CPU side slightly.”</p><p> <italic>– Were the core parallelism improvements made for the GPU (those which were applicable) also compiled into the CPU version?</italic> </p><p>Some concepts – such as partial use of single precision as in the GPU implementation – were tested on the CPU but made execution slower (extra conversions), and thus they were not applied in the code nor in any benchmarks. Others – e.g. the autopick filtering – were clearly benefitial and were thus implemented on both the GPU and CPU code-bases. More generally, the extraction of large amounts of parallelism is key for GPUs require some 10,000 or more independent tasks to achieve good performance, meaning that the present developments are largely unapplicable to CPUs, which rather achieve good performance with a handful of general-purpose cores. Applying the GPU-intended methods and algorithms direclty to CPUs would just cause overhead. Generalized vector-operations however currently noted as a future improvement.</p><p> <italic>– Running on 120 cores implies use of MPI, and brings many other factors (network, available I/O) into play when comparing speed.</italic> </p><p>The mentioned overhead is in part addressed in the updated benchmarks, where all nodes make a copy of the data to a local disk prior to the computations, thereby removing the major part of network/MPI communication cost. For our benchmark using 10 vs. 1 CPU nodes, during the expectation step we never observed communication overhead in excess of 5% (on 10GbE). However, mentioned above, there is also not much alternative to MPI when using CPU clusters since few users (in our opinion) would be willing to wait a month for the results just to achieve slightly higher efficiency by limiting it to a single node.</p><p><italic>– Was the CPU computation done with single precision at similar points to make the comparison fair?</italic> </p><p>Unfortunately, the performance of the CPU version does not improve with simple translation of instructions to use single precision (mainly due to conversions to double precision in parts which require more accurate computations). We would additionally like to note that it is not merely a matter of “changing double to single”, but to make it possible to get accurate results from single precision on CPUs we would need to implement similar amendments to core algorithms as in the GPU code, and since there is little or no performance improvement that is presently of limited value. Even if this is done, the relative advantage of single is much higher on GPUs, both because of a factor ~8 higher performance and use of texture units. We have updated the text to explain this better.</p><p> <italic>In <xref ref-type="fig" rid="fig4">Figure 4D</xref>, the authors are claiming a 10-40x price-performance improvement. One reviewer notes that he/she configured two machines at a reputable, but inexpensive vendor. Both machines had 64 GB of RAM, a 1.2 TB SSD. One was configured with 4x 1080 GPU cards and 8 CPU cores at 2.6 GHz. The other was configured with a base-level GPU for display and 2x E5-2697Av4 -&gt; 32 cores @ 2.6 GHz. Both machines come in at ~$9000. As compared to their &quot;one node&quot;, this machine has 32 rather than 12 cores, and with improvements in the CPU, each is ~1.5x more powerful than their test machine. This would already bring their price/performance comparison down by 4x, ignoring other issues.</italic> </p><p>Yes, as we acknowledge above it is more fair to use the very latest Xeon cores for a comparison, and we now have access to such nodes. However, as seen from <xref ref-type="fig" rid="fig4">Figure 4</xref>, with the latest code version running on brand-new Xeon cores vs. GTX1080 the difference persists – and then we have not even included the 25% faster Titan-X Pascal GPUs.</p><p>Rather than discussing how theoretically “powerful” different cores might be (the reviewer e.g. does not take memory bandwidth into account), we focus on how fast the reconstruction actually runs on the hardware, taking a pragmatic view which we believe benefits users better.</p><p>There are definitely highly priced GPU systems around too, in particular when selecting dual CPU socket systems (which are not needed for RELION). We have provided publicly available (www.cryoem.se/RELION-gpu) examples of specific hardware which we have purchased, tested and re-evaluated recently, at significantly better prices. However, ultimately we do not think specific prices should be featured in a scientific paper, since they change rapidly. We think it is better to show the performance for different hardware, and encourage educated users to make their own decision based on current prices. Because we do however realize the need for some guidance on purchase options for our users, we will maintain the blog mentioned above, and have also added benchmark results with different types of hardware on the Relion WIKI page (<ext-link ext-link-type="uri" xlink:href="http://www2.mrc-%20lmb.cam.ac.uk/relion/index.php/Benchmarks_%26_computer_hardware">http://www2.mrc- lmb.cam.ac.uk/relion/index.php/Benchmarks_%26_computer_hardware</ext-link>).</p><p> <italic>11) The reviewers do not believe the current comparison in the manuscript is fair without at least some attempt to test on current generation CPUs with some real attempt to insure things are compiled and executed optimally. This need not be a month-long test, but at least a few iterations of a single model refinement to establish a baseline for modern hardware. As the major point of the manuscript is benchmarking, this is a minimum requirement for publication.</italic> </p><p>Agreed – as described above, we have now completely replaced the previous benchmarks using state-of-the-art CPU hardware, which we believe backs up our statements better.</p><p><italic>12) The following statements are not clear:</italic> </p><p><italic>&quot;In fact, using GPU-enabled relion, the time needed for classification is only weakly dependent on the number of classes used, whereas the CPU-based implementation has a much steeper linear dependence (<xref ref-type="fig" rid="fig3">Figure 3</xref>)&quot;</italic> </p><p><italic>and:</italic> </p><p> <italic>&quot;In the CPU-only version, the computational time scales linearly with increased number of classes (<xref ref-type="fig" rid="fig3">Figure 3B</xref>) due to the serialised single image calculations, whereas GPU-enabled execution can show better-than linear scaling.&quot;</italic> </p><p> <italic>Looking at <xref ref-type="fig" rid="fig3">Figure 3B</xref>, this is not clear. The GPU curve also visually appears to be following a linear trend, and rough estimates show a similar scaling to the GPU curve.</italic> </p><p> <italic>The values on the GPU curve are small enough compared to the size of the dots, this is difficult to assess quantitatively, but this figure certainly doesn't illustrate the point being made.</italic> </p><p>The indicated statements have been reformulated to “For sufficiently large computational problems, RELION’s processing time scales linearly with increased number of classes, but since the extra calculations are much faster with the GPU- enabled version the relative advantage is larger the more classes are used (<xref ref-type="fig" rid="fig4">Figure 4D</xref>).” This also improves the clarity of the message conveyed by the indicated figure.</p><p> <italic>13) In <xref ref-type="fig" rid="fig3">Figure 3E</xref>, the prominent lump in the middle is quite odd. The statement &quot;GPU's ability to parallelise the drastically increased number of tasks&quot; does not really explain it. If N independent tasks need to be completed in iteration 10, and 30N need to be completed in iteration 15, the only way this curve makes sense is if the GPU is massively underutilizing resources during iteration 10. It also would make no sense that going from 7.5 to 3.8 degree sampling would increase the number of tasks 30-fold. Something very peculiar is going on here, and it seems important to understand it.</italic> </p><p> <italic>&quot;While relion-1.4 only exploited parallelism over images (left), in the new implementation classes and all orientations of each class are expressed as tasks that can be scheduled independently on the accelerator hardware (e.g. GPUs)&quot;</italic> </p><p> <italic>Could the same change not be tested on CPUs as well?</italic> </p><p>The reason for the “lump” is simply that the fine exhaustive search requires a huge amount of both floating-point operations and memory bandwidth, which becomes very costly on the CPU. The reason this is not evident on the GPU is that the reviewer is quite correct – we are still nowhere near utilizing the full GPU resources in the early iterations (the GPU time/iteration does go up by ~50% in this region, but the absolute number is still much lower than the CPU).</p><p>The factor 30 stems from the two-fold increase in sampling in each of the 5 fitting dimensions (3 angular and 2 translational), where the load subsequently increases by 2^5=32. Similar parallel procedures could be adopted for the CPU implementation, however the anticipated improvement does not motivate the time investment, as explained previously.</p><p> <italic>14) <xref ref-type="fig" rid="fig4">Figure 4</xref> – Why is this test suddenly shown for a ribosome? How does this compare on the benchmark ΒGal data set?</italic></p><p>Throughout the manuscript, we use the <italic>Plasmodium falciparum</italic> ribosome data set to benchmark each of the different algorithms separately (e.g. auto-picking, 3D classification and 3D auto-refinement). We have chosen this data set (for which so-called 'polished particles' from RELION's movie-processing procedure are available for download by anyone interested from the EMPIAR data base) as the standard benchmark for RELION. The betagal data set is used as an additional illustration of the impact of the GPU- implementation on an entire processing workflow. We believe that a second example data set, being the highest-resolution data set available in the EMPIAR data base, adds value to the paper. We've added the following sentence to the revised manuscript to clarify this: &quot;This represents the largest presently available dataset in the EMPIAR database, and provides a realistic challenge.&quot;</p><p><italic>15) The use of GPU's is usually problematic because of rapid progress in GPU technology. This means that many different GPU's are available and in particular older one's suffer from poor feature support. The authors need to explain exactly what is required in a GPU and which GPU's are too old or inadequate.</italic> </p><p>We understand reviewer’s concerns that rapid development of hardware can be problematic for directed optimizations of code which relies on hardware specifications. We would argue that the rapid progress in GPU technology is good and provides opportunity for long- term commitments which are able to exploit such hardware competently and without excessive optimization, of which we believe RELION is a perfect example. We do agree that information about performance and support for older cards is useful, and we have added this to the dataset and hardware section. In short, we support at least the three latest generations of NVIDIA GPUs and will continue to provide updated support and development, making the rapid progress of GPU hardware an asset rather than problematic.</p><p> <italic>16) The loss of information in the gridding reconstruction algorithm using single precision is not explained clearly. Typically, this indicates very small or very large values that could be avoided by some normalization approach. This could also indicate that the iterative refinement in the gridding algorithm is too fast, generating instabilities with single precision.</italic> </p><p>Yes, this is an excellent point, and we already use the normalization approach in other parts of the code. Because the current implementation avoids this issue by leaving the gridding algorithm non-accelerated (i.e. run always on the CPU), we now rather mention this opportunity for future improvement in the revised manuscript, as mentioned above.</p><p><italic>17) In the Introduction, the authors mention some other software packages giving the impression of a comprehensive list. However, some software packages are left out. Either be comprehensive or be more general in referring to the wiki showing software packages.</italic> </p><p>We feel it would be inappropriate not to cite at least some of the available alternative programs, so we have extended this list with several additional software packages to be more comprehensive.</p><p><italic>18) &quot;This allows high-resolution structure determination with minimal bias or user input.&quot; The impression is that a Bayesian approach is less biased than other methods. This is incorrect, as Bayesian methods are just as biased as any other when it is fed erroneous data (such as poorly picked particles) or an inappropriate starting reference (prior) is used.</italic> </p><p>Agreed. We have removed the word 'bias' from the sentence.</p><p><italic>19) There is no information about the availability of the package (web site and license) or about deposition of the maps.</italic></p><p>We added the following sentence to the manuscript. &quot;RELION-2 is both open source and free software, distributed under the GPLv2 licence. It is publicly available for download through <ext-link ext-link-type="uri" xlink:href="http://www2.mrc-lmb.cam.ac.uk/relion">http://www2.mrc-lmb.cam.ac.uk/relion</ext-link>.&quot; We also provide accession code of the deposited map, and the previously available ribosome map.</p></body></sub-article></article>